
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2018 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32l4xx_hal.h"
#include "adc.h"
#include "rtc.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */
#include "stm32l4xx_hal_adc.h"
#include "string.h"
#include "stdio.h"
#include "float.h"
#include "math.h"
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
ADC_ChannelConfTypeDef sConfig;
/* Private variables ---------------------------------------------------------*/


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
uint16_t Read_Analog_Value(void);
void Mensa_debug_Usart1(char texto[32]);
void Error_Handler2(void);

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	char aTxBuffer[32]; // Transmit Buffer
	// ADC
	float VADC, Vdd, Idd, totalPower, VDU; // Analogue Values
	float V_Avg = 0;
	int ADC_SamplesV[15];
	int N = 0;

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_ADC1_Init();
  MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  Mensa_debug_Usart1("----------Start ---------- \n ");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Trigger on transistor
//	  HAL_Delay (100); // Time taken to reach ADC
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Trigger off transistor

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0){
		  HAL_Delay (100); // Time taken to reach ADC

		  for(N = 0; N < 15; N++){
			  // PA0
			  sConfig.Channel = ADC_CHANNEL_5;
			  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
			  ADC_SamplesV [N] = Read_Analog_Value(); // adds DU to array
			  V_Avg += ADC_SamplesV [N];
			  HAL_Delay(1);
		  }
		  VDU = V_Avg/N; // finds average of all 16 values
		  VADC = (VDU + 57.225)/(1212.3); // DU to VADC, from Excel plot

		  // Piecewise
		  if (VADC < 3.263 && VADC >=  3.067){ // 4-6V
			  Vdd = ((VADC - 3.5862)/(-0.0935))+ 0.55;
		  }
		  else if (VADC < 3.067 && VADC >= 2.843 ){ // 6-8V
			  Vdd = ((VADC - 3.6587)/(-0.1079)) + 0.47;
		  }
		  else if (VADC < 2.843 && VADC >= 2.588){ // 8-10V
			  Vdd = ((VADC - 3.8133)/(-0.127)) + 0.45;
		  }
		  else if (VADC < 2.588 && VADC >= 1.716){ // 10-16V
			  Vdd = ((VADC - 4)/(-0.1444)) + 0.3;
		  }
		  else if (VADC <  1.716 && VADC >= 1.262){ // 16-19V
			  Vdd = ((VADC - 4.0367)/(-0.146));
		  }
		  else if (VADC <= 1.262 && VADC >= 0.806){ // 19-22V
			  Vdd = ((VADC - 4.0466)/(-0.1475));
		  }
		  else if (VADC <= 0.806 && VADC > 0.460){ // 22-24V
			  Vdd = ((VADC - 3.999)/(-0.146));
		  }

		  Idd = Vdd/10.5; // Vdd divided by tested resistance
		  totalPower = (Vdd*Idd); // totalPower calculation

		  // Range Checking
		  if (Vdd < 3.8 || Vdd > 24.2){
			  sprintf(aTxBuffer, "Out of range: value is inaccurate \n  ");
			  Mensa_debug_Usart1(aTxBuffer);
		  }
		  else{
//			  sprintf(aTxBuffer, "VDU = %4.0f \n", VDU);
//			  Mensa_debug_Usart1(aTxBuffer);
//	  		  sprintf(aTxBuffer, "VADC: %4.3fV  \n ", VADC);
//	  		  Mensa_debug_Usart1(aTxBuffer);
//	  		  sprintf(aTxBuffer, "Vdd: %4.3fV  \n \n ", Vdd);
//	  		  Mensa_debug_Usart1(aTxBuffer);
	  		  sprintf(aTxBuffer, "Idd: %4.3fA \n ", Idd);
	  		  Mensa_debug_Usart1(aTxBuffer);
//	  		  sprintf(aTxBuffer, "Power: %4.1fW \n \n ", totalPower);
//	  		  Mensa_debug_Usart1(aTxBuffer);
		  }
		  HAL_Delay(1000);
		  N = 0;
		  V_Avg = 0;
	  }
  }
}


  /* USER CODE END 3 */

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
	HAL_GPIO_TogglePin(GPIOB, Trigger_Pin);
	return;
}

void Mensa_debug_Usart1(char texto[32])
{
	if(HAL_UART_Transmit(&huart1, (uint8_t*) texto, strlen(texto), 1000)!= HAL_OK)
	{
		Error_Handler2();
	}
	HAL_Delay (50); // si se usa en CALLBACK el Delay cuelga el micro.
	//if used in CALLBACK the Delay hangs the microphone
	return;
}

void Error_Handler2(void)
{
  while(1)
  { }
}

//*** FOR READING IN ANALOG VALUES *** //
uint16_t Read_Analog_Value(void)
{
	uint16_t valor_analog;

	HAL_ADC_Start(&hadc1);
	if (HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK)
	{}
	valor_analog = HAL_ADC_GetValue(&hadc1);
	//HAL_Delay(100);
	HAL_ADC_Stop(&hadc1);
	return valor_analog ;
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
