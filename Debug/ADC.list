
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000664c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  080067e0  080067e0  000167e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006b30  08006b30  00016b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006b38  08006b38  00016b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006b3c  08006b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000674  20000000  08006b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000016c  20000674  080071b4  00020674  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007e0  080071b4  000207e0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019287  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ff2  00000000  00000000  0003992b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000654a  00000000  00000000  0003c91d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a58  00000000  00000000  00042e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cf0  00000000  00000000  000438c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000068e4  00000000  00000000  000445b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004604  00000000  00000000  0004ae94  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004f498  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000025b4  00000000  00000000  0004f514  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000674 	.word	0x20000674
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067c4 	.word	0x080067c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000678 	.word	0x20000678
 80001cc:	080067c4 	.word	0x080067c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_InitTick+0x24>)
{
 8000f54:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f60:	f000 fd0e 	bl	8001980 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	4621      	mov	r1, r4
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 fcc8 	bl	8001900 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000f70:	2000      	movs	r0, #0
 8000f72:	bd10      	pop	{r4, pc}
 8000f74:	20000000 	.word	0x20000000

08000f78 <HAL_Init>:
{
 8000f78:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 fcae 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff ffe5 	bl	8000f50 <HAL_InitTick>
  HAL_MspInit();
 8000f86:	f002 fc03 	bl	8003790 <HAL_MspInit>
}
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	bd08      	pop	{r3, pc}
	...

08000f90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f90:	4a02      	ldr	r2, [pc, #8]	; (8000f9c <HAL_IncTick+0xc>)
 8000f92:	6813      	ldr	r3, [r2, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200006c8 	.word	0x200006c8

08000fa0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fa0:	4b01      	ldr	r3, [pc, #4]	; (8000fa8 <HAL_GetTick+0x8>)
 8000fa2:	6818      	ldr	r0, [r3, #0]
}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200006c8 	.word	0x200006c8

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff fff6 	bl	8000fa0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000fb6:	4605      	mov	r5, r0
  {
    wait++;
 8000fb8:	bf18      	it	ne
 8000fba:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000fbc:	f7ff fff0 	bl	8000fa0 <HAL_GetTick>
 8000fc0:	1b40      	subs	r0, r0, r5
 8000fc2:	4284      	cmp	r4, r0
 8000fc4:	d8fa      	bhi.n	8000fbc <HAL_Delay+0x10>
  {
  }
}
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}

08000fc8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fc8:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fca:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000fce:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000fd2:	fab6 f386 	clz	r3, r6
 8000fd6:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 8000fda:	40de      	lsrs	r6, r3
 8000fdc:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 8000fde:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8000fe2:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8000fe6:	fa93 f5a3 	rbit	r5, r3
 8000fea:	fab5 f585 	clz	r5, r5
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	2407      	movs	r4, #7
 8000ff4:	fa21 f505 	lsr.w	r5, r1, r5
 8000ff8:	fa04 f505 	lsl.w	r5, r4, r5
 8000ffc:	fab3 f383 	clz	r3, r3
 8001000:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001004:	40d9      	lsrs	r1, r3
 8001006:	ea24 0405 	bic.w	r4, r4, r5
 800100a:	fa02 f101 	lsl.w	r1, r2, r1
 800100e:	4321      	orrs	r1, r4
 8001010:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8001014:	bd70      	pop	{r4, r5, r6, pc}
	...

08001018 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001018:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800101e:	4604      	mov	r4, r0
 8001020:	2800      	cmp	r0, #0
 8001022:	f000 80b2 	beq.w	800118a <HAL_ADC_Init+0x172>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001026:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8001028:	b925      	cbnz	r5, 8001034 <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102a:	f002 f885 	bl	8003138 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800102e:	65e5      	str	r5, [r4, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001030:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 8001034:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800103a:	bf41      	itttt	mi
 800103c:	689a      	ldrmi	r2, [r3, #8]
 800103e:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 8001042:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 8001046:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 8001048:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 800104a:	00d1      	lsls	r1, r2, #3
 800104c:	d574      	bpl.n	8001138 <HAL_ADC_Init+0x120>
 800104e:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8001050:	00d2      	lsls	r2, r2, #3
 8001052:	f140 8088 	bpl.w	8001166 <HAL_ADC_Init+0x14e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001056:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001058:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800105a:	06d5      	lsls	r5, r2, #27
 800105c:	f100 8091 	bmi.w	8001182 <HAL_ADC_Init+0x16a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001060:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001062:	0751      	lsls	r1, r2, #29
 8001064:	f100 808d 	bmi.w	8001182 <HAL_ADC_Init+0x16a>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001068:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800106a:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800106e:	f042 0202 	orr.w	r2, r2, #2
 8001072:	65a2      	str	r2, [r4, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	2a01      	cmp	r2, #1
 800107c:	f040 8087 	bne.w	800118e <HAL_ADC_Init+0x176>
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	07d2      	lsls	r2, r2, #31
 8001084:	f140 8083 	bpl.w	800118e <HAL_ADC_Init+0x176>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 8001088:	68e5      	ldr	r5, [r4, #12]
 800108a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 800108c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 800108e:	432a      	orrs	r2, r5
 8001090:	68a5      	ldr	r5, [r4, #8]
 8001092:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8001094:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001096:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 8001098:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 800109c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010a0:	bf02      	ittt	eq
 80010a2:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 80010a4:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80010a8:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80010ae:	b121      	cbz	r1, 80010ba <HAL_ADC_Init+0xa2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80010b0:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010b2:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80010b6:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010b8:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 80010ba:	68dd      	ldr	r5, [r3, #12]
 80010bc:	4938      	ldr	r1, [pc, #224]	; (80011a0 <HAL_ADC_Init+0x188>)
 80010be:	4029      	ands	r1, r5
 80010c0:	430a      	orrs	r2, r1
 80010c2:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	f012 0f0c 	tst.w	r2, #12
 80010ca:	d11e      	bne.n	800110a <HAL_ADC_Init+0xf2>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 80010cc:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 80010ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80010d0:	69a5      	ldr	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 80010d2:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 80010d4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 80010d8:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 80010dc:	f021 0102 	bic.w	r1, r1, #2
 80010e0:	430a      	orrs	r2, r1
 80010e2:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 80010e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80010e6:	2a01      	cmp	r2, #1
 80010e8:	d147      	bne.n	800117a <HAL_ADC_Init+0x162>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80010ea:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80010ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010ee:	6919      	ldr	r1, [r3, #16]
 80010f0:	432a      	orrs	r2, r5
 80010f2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80010f4:	f042 0201 	orr.w	r2, r2, #1
 80010f8:	432a      	orrs	r2, r5
 80010fa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80010fc:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001100:	432a      	orrs	r2, r5
 8001102:	f021 0104 	bic.w	r1, r1, #4
 8001106:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001108:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800110a:	6922      	ldr	r2, [r4, #16]
 800110c:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800110e:	bf05      	ittet	eq
 8001110:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001112:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001114:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001116:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800111a:	bf06      	itte	eq
 800111c:	f021 010f 	biceq.w	r1, r1, #15
 8001120:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001122:	f022 020f 	bicne.w	r2, r2, #15
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001128:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800112a:	f023 0303 	bic.w	r3, r3, #3
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001134:	b003      	add	sp, #12
 8001136:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8001138:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800113a:	491a      	ldr	r1, [pc, #104]	; (80011a4 <HAL_ADC_Init+0x18c>)
 800113c:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8001140:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001144:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <HAL_ADC_Init+0x190>)
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	fbb2 f1f1 	udiv	r1, r2, r1
 8001152:	220a      	movs	r2, #10
 8001154:	434a      	muls	r2, r1
      wait_loop_index--;
 8001156:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 8001158:	9a01      	ldr	r2, [sp, #4]
 800115a:	2a00      	cmp	r2, #0
 800115c:	f43f af77 	beq.w	800104e <HAL_ADC_Init+0x36>
      wait_loop_index--;
 8001160:	9a01      	ldr	r2, [sp, #4]
 8001162:	3a01      	subs	r2, #1
 8001164:	e7f7      	b.n	8001156 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001166:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001168:	f042 0210 	orr.w	r2, r2, #16
 800116c:	65a2      	str	r2, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001170:	f042 0201 	orr.w	r2, r2, #1
 8001174:	65e2      	str	r2, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8001176:	2001      	movs	r0, #1
 8001178:	e76e      	b.n	8001058 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	f022 0201 	bic.w	r2, r2, #1
 8001180:	e7c2      	b.n	8001108 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001182:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	65a3      	str	r3, [r4, #88]	; 0x58
    return HAL_ERROR;
 800118a:	2001      	movs	r0, #1
 800118c:	e7d2      	b.n	8001134 <HAL_ADC_Init+0x11c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800118e:	4907      	ldr	r1, [pc, #28]	; (80011ac <HAL_ADC_Init+0x194>)
 8001190:	6865      	ldr	r5, [r4, #4]
 8001192:	688a      	ldr	r2, [r1, #8]
 8001194:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001198:	432a      	orrs	r2, r5
 800119a:	608a      	str	r2, [r1, #8]
 800119c:	e774      	b.n	8001088 <HAL_ADC_Init+0x70>
 800119e:	bf00      	nop
 80011a0:	fff0c007 	.word	0xfff0c007
 80011a4:	001e8480 	.word	0x001e8480
 80011a8:	20000000 	.word	0x20000000
 80011ac:	50040300 	.word	0x50040300

080011b0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011b2:	6945      	ldr	r5, [r0, #20]
 80011b4:	2d08      	cmp	r5, #8
{
 80011b6:	4604      	mov	r4, r0
 80011b8:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011ba:	d00a      	beq.n	80011d2 <HAL_ADC_PollForConversion+0x22>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Check ADC DMA mode in independant mode */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 80011bc:	6803      	ldr	r3, [r0, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	07dd      	lsls	r5, r3, #31
 80011c2:	d505      	bpl.n	80011d0 <HAL_ADC_PollForConversion+0x20>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80011c6:	f043 0320 	orr.w	r3, r3, #32
 80011ca:	6583      	str	r3, [r0, #88]	; 0x58
        return HAL_ERROR;
 80011cc:	2001      	movs	r0, #1
 80011ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80011d0:	2504      	movs	r5, #4
      }
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80011d2:	f7ff fee5 	bl	8000fa0 <HAL_GetTick>
 80011d6:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4215      	tst	r5, r2
 80011de:	d01d      	beq.n	800121c <HAL_ADC_PollForConversion+0x6c>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011e0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80011e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011e6:	65a2      	str	r2, [r4, #88]	; 0x58
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80011ee:	d10f      	bne.n	8001210 <HAL_ADC_PollForConversion+0x60>
 80011f0:	69e2      	ldr	r2, [r4, #28]
 80011f2:	b96a      	cbnz	r2, 8001210 <HAL_ADC_PollForConversion+0x60>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	0711      	lsls	r1, r2, #28
 80011f8:	d50a      	bpl.n	8001210 <HAL_ADC_PollForConversion+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011fa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80011fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001200:	65a2      	str	r2, [r4, #88]	; 0x58
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001202:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001204:	04d2      	lsls	r2, r2, #19
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001206:	bf5e      	ittt	pl
 8001208:	6da2      	ldrpl	r2, [r4, #88]	; 0x58
 800120a:	f042 0201 	orrpl.w	r2, r2, #1
 800120e:	65a2      	strpl	r2, [r4, #88]	; 0x58
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001210:	2d08      	cmp	r5, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 8001212:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001214:	d114      	bne.n	8001240 <HAL_ADC_PollForConversion+0x90>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 8001216:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001218:	2000      	movs	r0, #0
}
 800121a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800121c:	1c70      	adds	r0, r6, #1
 800121e:	d0dc      	beq.n	80011da <HAL_ADC_PollForConversion+0x2a>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001220:	b946      	cbnz	r6, 8001234 <HAL_ADC_PollForConversion+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 800122a:	2300      	movs	r3, #0
 800122c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8001230:	2003      	movs	r0, #3
 8001232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001234:	f7ff feb4 	bl	8000fa0 <HAL_GetTick>
 8001238:	1bc0      	subs	r0, r0, r7
 800123a:	4286      	cmp	r6, r0
 800123c:	d2cc      	bcs.n	80011d8 <HAL_ADC_PollForConversion+0x28>
 800123e:	e7f0      	b.n	8001222 <HAL_ADC_PollForConversion+0x72>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001240:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8001244:	d1e8      	bne.n	8001218 <HAL_ADC_PollForConversion+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001246:	220c      	movs	r2, #12
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800124c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800124c:	6803      	ldr	r3, [r0, #0]
 800124e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001250:	4770      	bx	lr
	...

08001254 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800125a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800125e:	2b01      	cmp	r3, #1
{
 8001260:	4605      	mov	r5, r0
 8001262:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8001264:	f000 818d 	beq.w	8001582 <HAL_ADC_ConfigChannel+0x32e>
 8001268:	2301      	movs	r3, #1
 800126a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800126e:	6800      	ldr	r0, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001270:	6882      	ldr	r2, [r0, #8]
 8001272:	0757      	lsls	r7, r2, #29
 8001274:	f100 817f 	bmi.w	8001576 <HAL_ADC_ConfigChannel+0x322>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001278:	684b      	ldr	r3, [r1, #4]
 800127a:	2b05      	cmp	r3, #5
 800127c:	d808      	bhi.n	8001290 <HAL_ADC_ConfigChannel+0x3c>
    {
      switch (sConfig->Rank)
 800127e:	3b02      	subs	r3, #2
 8001280:	2b03      	cmp	r3, #3
 8001282:	d85c      	bhi.n	800133e <HAL_ADC_ConfigChannel+0xea>
 8001284:	e8df f003 	tbb	[pc, r3]
 8001288:	58565402 	.word	0x58565402
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800128c:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 800128e:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001290:	6861      	ldr	r1, [r4, #4]
 8001292:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001296:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	f401 7640 	and.w	r6, r1, #768	; 0x300
 80012a2:	40de      	lsrs	r6, r3
 80012a4:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80012a8:	f001 011f 	and.w	r1, r1, #31
 80012ac:	231f      	movs	r3, #31
 80012ae:	fa03 f201 	lsl.w	r2, r3, r1
 80012b2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 80012b6:	ea23 0302 	bic.w	r3, r3, r2
 80012ba:	6822      	ldr	r2, [r4, #0]
 80012bc:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80012c0:	408a      	lsls	r2, r1
 80012c2:	4313      	orrs	r3, r2
 80012c4:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012c8:	6883      	ldr	r3, [r0, #8]
 80012ca:	f013 0f0c 	tst.w	r3, #12
 80012ce:	d11e      	bne.n	800130e <HAL_ADC_ConfigChannel+0xba>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80012d0:	68a2      	ldr	r2, [r4, #8]
 80012d2:	6821      	ldr	r1, [r4, #0]
 80012d4:	f7ff fe78 	bl	8000fc8 <LL_ADC_SetChannelSamplingTime>

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80012d8:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012da:	f8d5 e000 	ldr.w	lr, [r5]
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80012e4:	2e04      	cmp	r6, #4
 80012e6:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 80012ea:	d02a      	beq.n	8001342 <HAL_ADC_ConfigChannel+0xee>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012ec:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80012f0:	0048      	lsls	r0, r1, #1
 80012f2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 80012f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 80012f8:	4081      	lsls	r1, r0
 80012fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012fe:	4319      	orrs	r1, r3
 8001300:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8001304:	4bc6      	ldr	r3, [pc, #792]	; (8001620 <HAL_ADC_ConfigChannel+0x3cc>)
 8001306:	4003      	ands	r3, r0
 8001308:	4319      	orrs	r1, r3
 800130a:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800130e:	6828      	ldr	r0, [r5, #0]
 8001310:	6883      	ldr	r3, [r0, #8]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b01      	cmp	r3, #1
 8001318:	f040 8135 	bne.w	8001586 <HAL_ADC_ConfigChannel+0x332>
 800131c:	6803      	ldr	r3, [r0, #0]
 800131e:	07de      	lsls	r6, r3, #31
 8001320:	f140 8131 	bpl.w	8001586 <HAL_ADC_ConfigChannel+0x332>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001326:	2300      	movs	r3, #0
 8001328:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
}
 800132c:	b003      	add	sp, #12
 800132e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001330:	2312      	movs	r3, #18
 8001332:	e7ac      	b.n	800128e <HAL_ADC_ConfigChannel+0x3a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001334:	2318      	movs	r3, #24
 8001336:	e7aa      	b.n	800128e <HAL_ADC_ConfigChannel+0x3a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133c:	e7a7      	b.n	800128e <HAL_ADC_ConfigChannel+0x3a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 800133e:	2306      	movs	r3, #6
 8001340:	e7a5      	b.n	800128e <HAL_ADC_ConfigChannel+0x3a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001342:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001346:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800134a:	f3c1 6784 	ubfx	r7, r1, #26, #5
 800134e:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 8001352:	2800      	cmp	r0, #0
 8001354:	d13a      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x178>
 8001356:	f3c3 6084 	ubfx	r0, r3, #26, #5
 800135a:	4287      	cmp	r7, r0
 800135c:	f040 814c 	bne.w	80015f8 <HAL_ADC_ConfigChannel+0x3a4>
  MODIFY_REG(*preg,
 8001360:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001364:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001368:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800136a:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 800136e:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001372:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001376:	bb9f      	cbnz	r7, 80013e0 <HAL_ADC_ConfigChannel+0x18c>
 8001378:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800137c:	4283      	cmp	r3, r0
 800137e:	f040 8140 	bne.w	8001602 <HAL_ADC_ConfigChannel+0x3ae>
  MODIFY_REG(*preg,
 8001382:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001386:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001388:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800138a:	6891      	ldr	r1, [r2, #8]
 800138c:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001390:	f102 0608 	add.w	r6, r2, #8
 8001394:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001398:	bb77      	cbnz	r7, 80013f8 <HAL_ADC_ConfigChannel+0x1a4>
 800139a:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800139e:	4298      	cmp	r0, r3
 80013a0:	f040 8136 	bne.w	8001610 <HAL_ADC_ConfigChannel+0x3bc>
  MODIFY_REG(*preg,
 80013a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80013a8:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013aa:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ac:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013b0:	68d2      	ldr	r2, [r2, #12]
 80013b2:	f3c3 0612 	ubfx	r6, r3, #0, #19
 80013b6:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80013ba:	bb4e      	cbnz	r6, 8001410 <HAL_ADC_ConfigChannel+0x1bc>
 80013bc:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80013c0:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 80013c2:	bf04      	itt	eq
 80013c4:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80013c8:	6002      	streq	r2, [r0, #0]
 80013ca:	e7a0      	b.n	800130e <HAL_ADC_ConfigChannel+0xba>
 80013cc:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013d0:	fab0 f080 	clz	r0, r0
 80013d4:	4287      	cmp	r7, r0
 80013d6:	d0c3      	beq.n	8001360 <HAL_ADC_ConfigChannel+0x10c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013d8:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013dc:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80013e0:	fa93 f3a3 	rbit	r3, r3
 80013e4:	fab3 f383 	clz	r3, r3
 80013e8:	4283      	cmp	r3, r0
 80013ea:	d0ca      	beq.n	8001382 <HAL_ADC_ConfigChannel+0x12e>
 80013ec:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013ee:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f0:	f102 0608 	add.w	r6, r2, #8
 80013f4:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80013f8:	fa93 f3a3 	rbit	r3, r3
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	4283      	cmp	r3, r0
 8001402:	d0cf      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x150>
 8001404:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001408:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	e7d2      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x16c>
 800141a:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 800141e:	fab2 f282 	clz	r2, r2
 8001422:	3201      	adds	r2, #1
 8001424:	2a09      	cmp	r2, #9
 8001426:	d859      	bhi.n	80014dc <HAL_ADC_ConfigChannel+0x288>
 8001428:	fa93 f2a3 	rbit	r2, r3
 800142c:	fab2 f282 	clz	r2, r2
 8001430:	3201      	adds	r2, #1
 8001432:	0692      	lsls	r2, r2, #26
 8001434:	fa93 f1a3 	rbit	r1, r3
 8001438:	fab1 f181 	clz	r1, r1
 800143c:	1c4e      	adds	r6, r1, #1
 800143e:	2101      	movs	r1, #1
 8001440:	40b1      	lsls	r1, r6
 8001442:	e001      	b.n	8001448 <HAL_ADC_ConfigChannel+0x1f4>
 8001444:	fa01 f10e 	lsl.w	r1, r1, lr
 8001448:	430a      	orrs	r2, r1
 800144a:	2f00      	cmp	r7, #0
 800144c:	d140      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x27c>
 800144e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001452:	1c59      	adds	r1, r3, #1
 8001454:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001458:	0509      	lsls	r1, r1, #20
 800145a:	4311      	orrs	r1, r2
 800145c:	68a2      	ldr	r2, [r4, #8]
 800145e:	f7ff fdb3 	bl	8000fc8 <LL_ADC_SetChannelSamplingTime>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001462:	6822      	ldr	r2, [r4, #0]
 8001464:	4b6f      	ldr	r3, [pc, #444]	; (8001624 <HAL_ADC_ConfigChannel+0x3d0>)
 8001466:	429a      	cmp	r2, r3
 8001468:	d14b      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x2ae>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800146a:	4b6f      	ldr	r3, [pc, #444]	; (8001628 <HAL_ADC_ConfigChannel+0x3d4>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001472:	f47f af57 	bne.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001476:	682b      	ldr	r3, [r5, #0]
 8001478:	6898      	ldr	r0, [r3, #8]
 800147a:	f000 0003 	and.w	r0, r0, #3
 800147e:	2801      	cmp	r0, #1
 8001480:	d103      	bne.n	800148a <HAL_ADC_ConfigChannel+0x236>
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	07c9      	lsls	r1, r1, #31
 8001486:	f100 80b2 	bmi.w	80015ee <HAL_ADC_ConfigChannel+0x39a>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800148a:	4966      	ldr	r1, [pc, #408]	; (8001624 <HAL_ADC_ConfigChannel+0x3d0>)
 800148c:	428a      	cmp	r2, r1
 800148e:	d149      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x2d0>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8001490:	4a66      	ldr	r2, [pc, #408]	; (800162c <HAL_ADC_ConfigChannel+0x3d8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	f47f af46 	bne.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
 8001498:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800149c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014a0:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014a4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80014a8:	430b      	orrs	r3, r1
 80014aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014ae:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80014b2:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <HAL_ADC_ConfigChannel+0x3dc>)
 80014b4:	4a5f      	ldr	r2, [pc, #380]	; (8001634 <HAL_ADC_ConfigChannel+0x3e0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80014bc:	2378      	movs	r3, #120	; 0x78
 80014be:	4353      	muls	r3, r2
                wait_loop_index--;
 80014c0:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0)
 80014c2:	9b01      	ldr	r3, [sp, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f43f af2d 	beq.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
                wait_loop_index--;
 80014ca:	9b01      	ldr	r3, [sp, #4]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	e7f7      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x26c>
 80014d0:	fa93 f1a3 	rbit	r1, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80014d4:	fab1 f181 	clz	r1, r1
 80014d8:	3101      	adds	r1, #1
 80014da:	e7bb      	b.n	8001454 <HAL_ADC_ConfigChannel+0x200>
 80014dc:	fa93 f2a3 	rbit	r2, r3
 80014e0:	fab2 f282 	clz	r2, r2
 80014e4:	3201      	adds	r2, #1
 80014e6:	0696      	lsls	r6, r2, #26
 80014e8:	fa93 f1a3 	rbit	r1, r3
 80014ec:	fab1 f181 	clz	r1, r1
 80014f0:	1c4a      	adds	r2, r1, #1
 80014f2:	2101      	movs	r1, #1
 80014f4:	4091      	lsls	r1, r2
 80014f6:	e06c      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x37e>
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	fab3 f383 	clz	r3, r3
 8001500:	e06d      	b.n	80015de <HAL_ADC_ConfigChannel+0x38a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 8001502:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <HAL_ADC_ConfigChannel+0x3e4>)
 8001504:	429a      	cmp	r2, r3
 8001506:	d104      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x2be>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001508:	4b47      	ldr	r3, [pc, #284]	; (8001628 <HAL_ADC_ConfigChannel+0x3d4>)
 800150a:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800150c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001510:	e7af      	b.n	8001472 <HAL_ADC_ConfigChannel+0x21e>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 8001512:	4b4a      	ldr	r3, [pc, #296]	; (800163c <HAL_ADC_ConfigChannel+0x3e8>)
 8001514:	429a      	cmp	r2, r3
 8001516:	f47f af05 	bne.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
 800151a:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_ADC_ConfigChannel+0x3d4>)
 800151c:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800151e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001522:	e7a6      	b.n	8001472 <HAL_ADC_ConfigChannel+0x21e>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001524:	4944      	ldr	r1, [pc, #272]	; (8001638 <HAL_ADC_ConfigChannel+0x3e4>)
 8001526:	428a      	cmp	r2, r1
 8001528:	d111      	bne.n	800154e <HAL_ADC_ConfigChannel+0x2fa>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800152a:	4a40      	ldr	r2, [pc, #256]	; (800162c <HAL_ADC_ConfigChannel+0x3d8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	f47f aef9 	bne.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
 8001532:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001536:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800153a:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800153e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001542:	430b      	orrs	r3, r1
 8001544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001548:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 800154c:	e6ea      	b.n	8001324 <HAL_ADC_ConfigChannel+0xd0>
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800154e:	493b      	ldr	r1, [pc, #236]	; (800163c <HAL_ADC_ConfigChannel+0x3e8>)
 8001550:	428a      	cmp	r2, r1
 8001552:	f47f aee7 	bne.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001556:	4a35      	ldr	r2, [pc, #212]	; (800162c <HAL_ADC_ConfigChannel+0x3d8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	f47f aee3 	bne.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800155e:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001562:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001566:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800156a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800156e:	430b      	orrs	r3, r1
 8001570:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001574:	e7e8      	b.n	8001548 <HAL_ADC_ConfigChannel+0x2f4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001576:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8001578:	f042 0220 	orr.w	r2, r2, #32
 800157c:	65aa      	str	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800157e:	4618      	mov	r0, r3
 8001580:	e6d1      	b.n	8001326 <HAL_ADC_ConfigChannel+0xd2>
  __HAL_LOCK(hadc);
 8001582:	2002      	movs	r0, #2
 8001584:	e6d2      	b.n	800132c <HAL_ADC_ConfigChannel+0xd8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001586:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8001588:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <HAL_ADC_ConfigChannel+0x3ec>)
 800158a:	f8d0 60b0 	ldr.w	r6, [r0, #176]	; 0xb0
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	f001 0e20 	and.w	lr, r1, #32
 8001594:	fa02 f20e 	lsl.w	r2, r2, lr
 8001598:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800159c:	4072      	eors	r2, r6
 800159e:	403a      	ands	r2, r7
 80015a0:	4072      	eors	r2, r6
 80015a2:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015a6:	4a27      	ldr	r2, [pc, #156]	; (8001644 <HAL_ADC_ConfigChannel+0x3f0>)
 80015a8:	4291      	cmp	r1, r2
 80015aa:	f47f af5a 	bne.w	8001462 <HAL_ADC_ConfigChannel+0x20e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80015ae:	2f00      	cmp	r7, #0
 80015b0:	f47f af33 	bne.w	800141a <HAL_ADC_ConfigChannel+0x1c6>
 80015b4:	f3c3 6184 	ubfx	r1, r3, #26, #5
 80015b8:	f101 0e01 	add.w	lr, r1, #1
 80015bc:	f1be 0f09 	cmp.w	lr, #9
 80015c0:	f04f 0101 	mov.w	r1, #1
 80015c4:	ea4f 628e 	mov.w	r2, lr, lsl #26
 80015c8:	f67f af3c 	bls.w	8001444 <HAL_ADC_ConfigChannel+0x1f0>
 80015cc:	4616      	mov	r6, r2
 80015ce:	fa01 f10e 	lsl.w	r1, r1, lr
 80015d2:	ea41 0206 	orr.w	r2, r1, r6
 80015d6:	2f00      	cmp	r7, #0
 80015d8:	d18e      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x2a4>
 80015da:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80015de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015e2:	f1a3 011b 	sub.w	r1, r3, #27
 80015e6:	0509      	lsls	r1, r1, #20
 80015e8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80015ec:	e735      	b.n	800145a <HAL_ADC_ConfigChannel+0x206>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80015f0:	f043 0320 	orr.w	r3, r3, #32
 80015f4:	65ab      	str	r3, [r5, #88]	; 0x58
 80015f6:	e696      	b.n	8001326 <HAL_ADC_ConfigChannel+0xd2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015f8:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015fc:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001600:	e6ba      	b.n	8001378 <HAL_ADC_ConfigChannel+0x124>
 8001602:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001604:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001606:	f102 0608 	add.w	r6, r2, #8
 800160a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800160e:	e6c4      	b.n	800139a <HAL_ADC_ConfigChannel+0x146>
 8001610:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001614:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	f3c2 6184 	ubfx	r1, r2, #26, #5
 800161c:	e6ce      	b.n	80013bc <HAL_ADC_ConfigChannel+0x168>
 800161e:	bf00      	nop
 8001620:	03fff000 	.word	0x03fff000
 8001624:	c7520000 	.word	0xc7520000
 8001628:	50040300 	.word	0x50040300
 800162c:	50040000 	.word	0x50040000
 8001630:	20000000 	.word	0x20000000
 8001634:	001e8480 	.word	0x001e8480
 8001638:	cb840000 	.word	0xcb840000
 800163c:	80000001 	.word	0x80000001
 8001640:	0007ffff 	.word	0x0007ffff
 8001644:	407f0000 	.word	0x407f0000

08001648 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001648:	6803      	ldr	r3, [r0, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	f012 0f0c 	tst.w	r2, #12
{
 8001650:	b570      	push	{r4, r5, r6, lr}
 8001652:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001654:	d101      	bne.n	800165a <ADC_ConversionStop+0x12>
    }
    
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001656:	2000      	movs	r0, #0
 8001658:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	0190      	lsls	r0, r2, #6
 800165e:	d52a      	bpl.n	80016b6 <ADC_ConversionStop+0x6e>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 8001660:	69e2      	ldr	r2, [r4, #28]
 8001662:	2a01      	cmp	r2, #1
 8001664:	d127      	bne.n	80016b6 <ADC_ConversionStop+0x6e>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 8001666:	69a2      	ldr	r2, [r4, #24]
 8001668:	2a01      	cmp	r2, #1
 800166a:	d124      	bne.n	80016b6 <ADC_ConversionStop+0x6e>
 800166c:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <ADC_ConversionStop+0xb0>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800166e:	6819      	ldr	r1, [r3, #0]
 8001670:	0649      	lsls	r1, r1, #25
 8001672:	d514      	bpl.n	800169e <ADC_ConversionStop+0x56>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001674:	2240      	movs	r2, #64	; 0x40
 8001676:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8001678:	2101      	movs	r1, #1
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	0756      	lsls	r6, r2, #29
 800167e:	d50a      	bpl.n	8001696 <ADC_ConversionStop+0x4e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001680:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001682:	0795      	lsls	r5, r2, #30
 8001684:	d407      	bmi.n	8001696 <ADC_ConversionStop+0x4e>
  MODIFY_REG(ADCx->CR,
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800168c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001690:	f042 0210 	orr.w	r2, r2, #16
 8001694:	609a      	str	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001696:	2901      	cmp	r1, #1
 8001698:	d10f      	bne.n	80016ba <ADC_ConversionStop+0x72>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800169a:	2504      	movs	r5, #4
        break;
 800169c:	e01e      	b.n	80016dc <ADC_ConversionStop+0x94>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 800169e:	3a01      	subs	r2, #1
 80016a0:	d1e5      	bne.n	800166e <ADC_ConversionStop+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 80016b2:	2001      	movs	r0, #1
 80016b4:	bd70      	pop	{r4, r5, r6, pc}
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80016b6:	2902      	cmp	r1, #2
 80016b8:	d1df      	bne.n	800167a <ADC_ConversionStop+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	0710      	lsls	r0, r2, #28
 80016be:	d506      	bpl.n	80016ce <ADC_ConversionStop+0x86>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80016c0:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80016c2:	0792      	lsls	r2, r2, #30
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 80016c4:	bf5e      	ittt	pl
 80016c6:	689a      	ldrpl	r2, [r3, #8]
 80016c8:	f042 0220 	orrpl.w	r2, r2, #32
 80016cc:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 80016ce:	2902      	cmp	r1, #2
 80016d0:	d003      	beq.n	80016da <ADC_ConversionStop+0x92>
 80016d2:	2903      	cmp	r1, #3
 80016d4:	d1e1      	bne.n	800169a <ADC_ConversionStop+0x52>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80016d6:	250c      	movs	r5, #12
 80016d8:	e000      	b.n	80016dc <ADC_ConversionStop+0x94>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80016da:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 80016dc:	f7ff fc60 	bl	8000fa0 <HAL_GetTick>
 80016e0:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	421d      	tst	r5, r3
 80016e8:	d0b5      	beq.n	8001656 <ADC_ConversionStop+0xe>
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80016ea:	f7ff fc59 	bl	8000fa0 <HAL_GetTick>
 80016ee:	1b80      	subs	r0, r0, r6
 80016f0:	2805      	cmp	r0, #5
 80016f2:	d9f6      	bls.n	80016e2 <ADC_ConversionStop+0x9a>
 80016f4:	e7d5      	b.n	80016a2 <ADC_ConversionStop+0x5a>
 80016f6:	bf00      	nop
 80016f8:	0a340001 	.word	0x0a340001

080016fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 80016fe:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001700:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 8001702:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001704:	6893      	ldr	r3, [r2, #8]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b01      	cmp	r3, #1
{
 800170c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800170e:	d108      	bne.n	8001722 <ADC_Enable+0x26>
 8001710:	6813      	ldr	r3, [r2, #0]
 8001712:	07d8      	lsls	r0, r3, #31
 8001714:	d505      	bpl.n	8001722 <ADC_Enable+0x26>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001716:	2000      	movs	r0, #0
}
 8001718:	b002      	add	sp, #8
 800171a:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 800171c:	9b01      	ldr	r3, [sp, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	e012      	b.n	8001748 <ADC_Enable+0x4c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001722:	6891      	ldr	r1, [r2, #8]
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <ADC_Enable+0x94>)
 8001726:	4219      	tst	r1, r3
 8001728:	d127      	bne.n	800177a <ADC_Enable+0x7e>
  MODIFY_REG(ADCx->CR,
 800172a:	6893      	ldr	r3, [r2, #8]
 800172c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001730:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6093      	str	r3, [r2, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <ADC_Enable+0x98>)
 800173c:	4a16      	ldr	r2, [pc, #88]	; (8001798 <ADC_Enable+0x9c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	fbb3 f2f2 	udiv	r2, r3, r2
 8001744:	230a      	movs	r3, #10
 8001746:	4353      	muls	r3, r2
      wait_loop_index--;
 8001748:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800174a:	9b01      	ldr	r3, [sp, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1e5      	bne.n	800171c <ADC_Enable+0x20>
    tickstart = HAL_GetTick();
 8001750:	f7ff fc26 	bl	8000fa0 <HAL_GetTick>
 8001754:	4e11      	ldr	r6, [pc, #68]	; (800179c <ADC_Enable+0xa0>)
 8001756:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001758:	6822      	ldr	r2, [r4, #0]
 800175a:	6813      	ldr	r3, [r2, #0]
 800175c:	07db      	lsls	r3, r3, #31
 800175e:	d4da      	bmi.n	8001716 <ADC_Enable+0x1a>
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001760:	6893      	ldr	r3, [r2, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 8001762:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8001764:	bf5f      	itttt	pl
 8001766:	6893      	ldrpl	r3, [r2, #8]
 8001768:	4033      	andpl	r3, r6
 800176a:	f043 0301 	orrpl.w	r3, r3, #1
 800176e:	6093      	strpl	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001770:	f7ff fc16 	bl	8000fa0 <HAL_GetTick>
 8001774:	1b40      	subs	r0, r0, r5
 8001776:	2802      	cmp	r0, #2
 8001778:	d9ee      	bls.n	8001758 <ADC_Enable+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800177c:	f043 0310 	orr.w	r3, r3, #16
 8001780:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001782:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 800178a:	2001      	movs	r0, #1
 800178c:	e7c4      	b.n	8001718 <ADC_Enable+0x1c>
 800178e:	bf00      	nop
 8001790:	8000003f 	.word	0x8000003f
 8001794:	20000000 	.word	0x20000000
 8001798:	001e8480 	.word	0x001e8480
 800179c:	7fffffc0 	.word	0x7fffffc0

080017a0 <HAL_ADC_Start>:
{
 80017a0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017a2:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80017a4:	689d      	ldr	r5, [r3, #8]
 80017a6:	f015 0504 	ands.w	r5, r5, #4
{
 80017aa:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017ac:	d13a      	bne.n	8001824 <HAL_ADC_Start+0x84>
    __HAL_LOCK(hadc);
 80017ae:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d036      	beq.n	8001824 <HAL_ADC_Start+0x84>
 80017b6:	2301      	movs	r3, #1
 80017b8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80017bc:	f7ff ff9e 	bl	80016fc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d12c      	bne.n	800181e <HAL_ADC_Start+0x7e>
      ADC_STATE_CLR_SET(hadc->State,
 80017c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d2:	65a3      	str	r3, [r4, #88]	; 0x58
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017da:	65a3      	str	r3, [r4, #88]	; 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017de:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017e0:	bf48      	it	mi
 80017e2:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017e4:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 80017e6:	bf52      	itee	pl
 80017e8:	65e0      	strpl	r0, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017ea:	f023 0306 	bicmi.w	r3, r3, #6
 80017ee:	65e3      	strmi	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017f0:	231c      	movs	r3, #28
 80017f2:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 80017f4:	2300      	movs	r3, #0
 80017f6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80017fa:	68d3      	ldr	r3, [r2, #12]
 80017fc:	019b      	lsls	r3, r3, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017fe:	bf41      	itttt	mi
 8001800:	6da3      	ldrmi	r3, [r4, #88]	; 0x58
 8001802:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8001806:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 800180a:	65a3      	strmi	r3, [r4, #88]	; 0x58
  MODIFY_REG(ADCx->CR,
 800180c:	6893      	ldr	r3, [r2, #8]
 800180e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001812:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	6093      	str	r3, [r2, #8]
 800181c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 800181e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8001822:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8001824:	2002      	movs	r0, #2
}
 8001826:	bd38      	pop	{r3, r4, r5, pc}

08001828 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001828:	6802      	ldr	r2, [r0, #0]
{
 800182a:	b538      	push	{r3, r4, r5, lr}
 800182c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800182e:	6890      	ldr	r0, [r2, #8]
 8001830:	f000 0003 	and.w	r0, r0, #3
 8001834:	2801      	cmp	r0, #1
 8001836:	d001      	beq.n	800183c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001838:	2000      	movs	r0, #0
 800183a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800183c:	6813      	ldr	r3, [r2, #0]
 800183e:	07d9      	lsls	r1, r3, #31
 8001840:	d5fa      	bpl.n	8001838 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001842:	6893      	ldr	r3, [r2, #8]
 8001844:	f003 030d 	and.w	r3, r3, #13
 8001848:	2b01      	cmp	r3, #1
 800184a:	d11f      	bne.n	800188c <ADC_Disable+0x64>
  MODIFY_REG(ADCx->CR,
 800184c:	6893      	ldr	r3, [r2, #8]
 800184e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001852:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800185c:	2303      	movs	r3, #3
 800185e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001860:	f7ff fb9e 	bl	8000fa0 <HAL_GetTick>
 8001864:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	07db      	lsls	r3, r3, #31
 800186c:	d5e4      	bpl.n	8001838 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800186e:	f7ff fb97 	bl	8000fa0 <HAL_GetTick>
 8001872:	1b40      	subs	r0, r0, r5
 8001874:	2802      	cmp	r0, #2
 8001876:	d9f6      	bls.n	8001866 <ADC_Disable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001878:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001880:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 8001888:	2001      	movs	r0, #1
 800188a:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001894:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800189c:	bd38      	pop	{r3, r4, r5, pc}

0800189e <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800189e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80018a2:	2b01      	cmp	r3, #1
{
 80018a4:	b510      	push	{r4, lr}
 80018a6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80018a8:	d016      	beq.n	80018d8 <HAL_ADC_Stop+0x3a>
 80018aa:	2301      	movs	r3, #1
 80018ac:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80018b0:	2103      	movs	r1, #3
 80018b2:	f7ff fec9 	bl	8001648 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80018b6:	b958      	cbnz	r0, 80018d0 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 80018b8:	4620      	mov	r0, r4
 80018ba:	f7ff ffb5 	bl	8001828 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80018be:	b938      	cbnz	r0, 80018d0 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 80018c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 80018d0:	2300      	movs	r3, #0
 80018d2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
  return tmp_hal_status;
 80018d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80018d8:	2002      	movs	r0, #2
}
 80018da:	bd10      	pop	{r4, pc}

080018dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80018de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018e4:	041b      	lsls	r3, r3, #16
 80018e6:	0c1b      	lsrs	r3, r3, #16
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80018ec:	0200      	lsls	r0, r0, #8
 80018ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80018f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80018f8:	60d3      	str	r3, [r2, #12]
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001902:	b530      	push	{r4, r5, lr}
 8001904:	68dc      	ldr	r4, [r3, #12]
 8001906:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	2b04      	cmp	r3, #4
 8001912:	bf28      	it	cs
 8001914:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 0501 	mov.w	r5, #1
 800191c:	fa05 f303 	lsl.w	r3, r5, r3
 8001920:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001924:	bf8c      	ite	hi
 8001926:	3c03      	subhi	r4, #3
 8001928:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192a:	4019      	ands	r1, r3
 800192c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192e:	fa05 f404 	lsl.w	r4, r5, r4
 8001932:	3c01      	subs	r4, #1
 8001934:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001936:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	ea42 0201 	orr.w	r2, r2, r1
 800193c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	bfaf      	iteee	ge
 8001942:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	f000 000f 	andlt.w	r0, r0, #15
 800194a:	4b06      	ldrlt	r3, [pc, #24]	; (8001964 <HAL_NVIC_SetPriority+0x64>)
 800194c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	bfa5      	ittet	ge
 8001950:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001954:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800195c:	bd30      	pop	{r4, r5, pc}
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00
 8001964:	e000ed14 	.word	0xe000ed14

08001968 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001968:	0942      	lsrs	r2, r0, #5
 800196a:	2301      	movs	r3, #1
 800196c:	f000 001f 	and.w	r0, r0, #31
 8001970:	fa03 f000 	lsl.w	r0, r3, r0
 8001974:	4b01      	ldr	r3, [pc, #4]	; (800197c <HAL_NVIC_EnableIRQ+0x14>)
 8001976:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100

08001980 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	3801      	subs	r0, #1
 8001982:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001986:	d20a      	bcs.n	800199e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	21f0      	movs	r1, #240	; 0xf0
 8001990:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800199e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80019ae:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80019b0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80019b2:	bf0c      	ite	eq
 80019b4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80019b8:	f022 0204 	bicne.w	r2, r2, #4
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	4770      	bx	lr
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80019c4:	4770      	bx	lr

080019c6 <HAL_SYSTICK_IRQHandler>:
{
 80019c6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80019c8:	f7ff fffc 	bl	80019c4 <HAL_SYSTICK_Callback>
 80019cc:	bd08      	pop	{r3, pc}
	...

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80019d4:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8001b50 <HAL_GPIO_Init+0x180>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019dc:	4a5a      	ldr	r2, [pc, #360]	; (8001b48 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00;
 80019de:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80019e0:	fa38 f403 	lsrs.w	r4, r8, r3
 80019e4:	d102      	bne.n	80019ec <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 80019e6:	b003      	add	sp, #12
 80019e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019ec:	2401      	movs	r4, #1
 80019ee:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 80019f2:	ea18 050a 	ands.w	r5, r8, sl
 80019f6:	f000 809c 	beq.w	8001b32 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fa:	684c      	ldr	r4, [r1, #4]
 80019fc:	f024 0b10 	bic.w	fp, r4, #16
 8001a00:	f1bb 0f02 	cmp.w	fp, #2
 8001a04:	d114      	bne.n	8001a30 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8001a06:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001a0a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a0e:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001a12:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a16:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001a1a:	270f      	movs	r7, #15
 8001a1c:	fa07 f70c 	lsl.w	r7, r7, ip
 8001a20:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a24:	690e      	ldr	r6, [r1, #16]
 8001a26:	fa06 f60c 	lsl.w	r6, r6, ip
 8001a2a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8001a2c:	f8ce 6020 	str.w	r6, [lr, #32]
 8001a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001a34:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001a36:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001a38:	fa07 f70c 	lsl.w	r7, r7, ip
 8001a3c:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a3e:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001a42:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a44:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a48:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a4c:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a50:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001a54:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a56:	d811      	bhi.n	8001a7c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001a58:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001a5a:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a5e:	68ce      	ldr	r6, [r1, #12]
 8001a60:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001a64:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001a68:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a6a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a6c:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a70:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001a74:	409e      	lsls	r6, r3
 8001a76:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001a7a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a7c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001a7e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a80:	688e      	ldr	r6, [r1, #8]
 8001a82:	fa06 f60c 	lsl.w	r6, r6, ip
 8001a86:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a88:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001a8a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a8c:	d551      	bpl.n	8001b32 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001a92:	f046 0601 	orr.w	r6, r6, #1
 8001a96:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001a9a:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001a9e:	f023 0703 	bic.w	r7, r3, #3
 8001aa2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001aa6:	f006 0601 	and.w	r6, r6, #1
 8001aaa:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001aae:	9601      	str	r6, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ab0:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab4:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001ab6:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ab8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001abc:	f04f 0e0f 	mov.w	lr, #15
 8001ac0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001ac4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ac8:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001acc:	d033      	beq.n	8001b36 <HAL_GPIO_Init+0x166>
 8001ace:	4e1f      	ldr	r6, [pc, #124]	; (8001b4c <HAL_GPIO_Init+0x17c>)
 8001ad0:	42b0      	cmp	r0, r6
 8001ad2:	d032      	beq.n	8001b3a <HAL_GPIO_Init+0x16a>
 8001ad4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ad8:	42b0      	cmp	r0, r6
 8001ada:	d030      	beq.n	8001b3e <HAL_GPIO_Init+0x16e>
 8001adc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ae0:	42b0      	cmp	r0, r6
 8001ae2:	d02e      	beq.n	8001b42 <HAL_GPIO_Init+0x172>
 8001ae4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ae8:	42b0      	cmp	r0, r6
 8001aea:	bf14      	ite	ne
 8001aec:	2607      	movne	r6, #7
 8001aee:	2604      	moveq	r6, #4
 8001af0:	fa06 f60c 	lsl.w	r6, r6, ip
 8001af4:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001af8:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8001afa:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afe:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001b02:	bf0c      	ite	eq
 8001b04:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b06:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8001b08:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8001b0a:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b0c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001b10:	bf0c      	ite	eq
 8001b12:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b14:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8001b16:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8001b18:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b1a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	bf0c      	ite	eq
 8001b20:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b22:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8001b24:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8001b26:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b28:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	bf54      	ite	pl
 8001b2c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001b2e:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8001b30:	60d6      	str	r6, [r2, #12]
    position++;
 8001b32:	3301      	adds	r3, #1
 8001b34:	e754      	b.n	80019e0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001b36:	2600      	movs	r6, #0
 8001b38:	e7da      	b.n	8001af0 <HAL_GPIO_Init+0x120>
 8001b3a:	2601      	movs	r6, #1
 8001b3c:	e7d8      	b.n	8001af0 <HAL_GPIO_Init+0x120>
 8001b3e:	2602      	movs	r6, #2
 8001b40:	e7d6      	b.n	8001af0 <HAL_GPIO_Init+0x120>
 8001b42:	2603      	movs	r6, #3
 8001b44:	e7d4      	b.n	8001af0 <HAL_GPIO_Init+0x120>
 8001b46:	bf00      	nop
 8001b48:	40010400 	.word	0x40010400
 8001b4c:	48000400 	.word	0x48000400
 8001b50:	40021000 	.word	0x40021000

08001b54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b54:	b10a      	cbz	r2, 8001b5a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b56:	6181      	str	r1, [r0, #24]
 8001b58:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b5a:	6281      	str	r1, [r0, #40]	; 0x28
 8001b5c:	4770      	bx	lr

08001b5e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001b5e:	6943      	ldr	r3, [r0, #20]
 8001b60:	4059      	eors	r1, r3
 8001b62:	6141      	str	r1, [r0, #20]
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b68:	4b02      	ldr	r3, [pc, #8]	; (8001b74 <HAL_PWREx_GetVoltageRange+0xc>)
 8001b6a:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001b6c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40007000 	.word	0x40007000

08001b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b7a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b7c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b80:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b84:	d11a      	bne.n	8001bbc <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b86:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001b8a:	d013      	beq.n	8001bb4 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b8c:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001b8e:	4912      	ldr	r1, [pc, #72]	; (8001bd8 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b90:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b98:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001b9a:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	fbb2 f1f1 	udiv	r1, r2, r1
 8001ba2:	2232      	movs	r2, #50	; 0x32
 8001ba4:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001ba6:	b112      	cbz	r2, 8001bae <HAL_PWREx_ControlVoltageScaling+0x36>
 8001ba8:	6959      	ldr	r1, [r3, #20]
 8001baa:	0549      	lsls	r1, r1, #21
 8001bac:	d404      	bmi.n	8001bb8 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	055b      	lsls	r3, r3, #21
 8001bb2:	d40d      	bmi.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	4770      	bx	lr
        wait_loop_index--;
 8001bb8:	3a01      	subs	r2, #1
 8001bba:	e7f4      	b.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bbc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bc0:	bf1f      	itttt	ne
 8001bc2:	681a      	ldrne	r2, [r3, #0]
 8001bc4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001bc8:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001bcc:	601a      	strne	r2, [r3, #0]
 8001bce:	e7f1      	b.n	8001bb4 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8001bd0:	2003      	movs	r0, #3
}  
 8001bd2:	4770      	bx	lr
 8001bd4:	40007000 	.word	0x40007000
 8001bd8:	000f4240 	.word	0x000f4240
 8001bdc:	20000000 	.word	0x20000000

08001be0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001be2:	4d1e      	ldr	r5, [pc, #120]	; (8001c5c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001be4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001be6:	00da      	lsls	r2, r3, #3
{
 8001be8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bea:	d518      	bpl.n	8001c1e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bec:	f7ff ffbc 	bl	8001b68 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bf0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001bf4:	d123      	bne.n	8001c3e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bf6:	2c80      	cmp	r4, #128	; 0x80
 8001bf8:	d929      	bls.n	8001c4e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bfa:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bfc:	bf8c      	ite	hi
 8001bfe:	2002      	movhi	r0, #2
 8001c00:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001c04:	6813      	ldr	r3, [r2, #0]
 8001c06:	f023 0307 	bic.w	r3, r3, #7
 8001c0a:	4303      	orrs	r3, r0
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8001c0e:	6813      	ldr	r3, [r2, #0]
 8001c10:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001c14:	1a18      	subs	r0, r3, r0
 8001c16:	bf18      	it	ne
 8001c18:	2001      	movne	r0, #1
 8001c1a:	b003      	add	sp, #12
 8001c1c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	65ab      	str	r3, [r5, #88]	; 0x58
 8001c26:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001c30:	f7ff ff9a 	bl	8001b68 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c34:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	65ab      	str	r3, [r5, #88]	; 0x58
 8001c3c:	e7d8      	b.n	8001bf0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001c3e:	2c80      	cmp	r4, #128	; 0x80
 8001c40:	d807      	bhi.n	8001c52 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001c42:	d008      	beq.n	8001c56 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001c44:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001c48:	4258      	negs	r0, r3
 8001c4a:	4158      	adcs	r0, r3
 8001c4c:	e7d9      	b.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c4e:	2000      	movs	r0, #0
 8001c50:	e7d7      	b.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c52:	2003      	movs	r0, #3
 8001c54:	e7d5      	b.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c56:	2002      	movs	r0, #2
 8001c58:	e7d3      	b.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40022000 	.word	0x40022000

08001c64 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001c64:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	f012 0f0c 	tst.w	r2, #12
{
 8001c6c:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001c6e:	d009      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001c76:	2a0c      	cmp	r2, #12
 8001c78:	d12d      	bne.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	f002 0203 	and.w	r2, r2, #3
 8001c80:	2a01      	cmp	r2, #1
 8001c82:	d128      	bne.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001c84:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001c86:	4928      	ldr	r1, [pc, #160]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001c88:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c8a:	bf55      	itete	pl
 8001c8c:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c90:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c92:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c96:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8001c9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001c9e:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001ca0:	f011 0f0c 	tst.w	r1, #12
 8001ca4:	bf0c      	ite	eq
 8001ca6:	4610      	moveq	r0, r2
 8001ca8:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001caa:	6899      	ldr	r1, [r3, #8]
 8001cac:	f001 010c 	and.w	r1, r1, #12
 8001cb0:	290c      	cmp	r1, #12
 8001cb2:	d130      	bne.n	8001d16 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cb4:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb6:	68d8      	ldr	r0, [r3, #12]
 8001cb8:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001cbc:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cbe:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8001cc2:	2802      	cmp	r0, #2
 8001cc4:	d019      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0x96>
 8001cc6:	2803      	cmp	r0, #3
 8001cc8:	d026      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cca:	fbb2 f2f1 	udiv	r2, r2, r1
 8001cce:	68d8      	ldr	r0, [r3, #12]
 8001cd0:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001cd4:	e017      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	f002 020c 	and.w	r2, r2, #12
 8001cdc:	2a04      	cmp	r2, #4
 8001cde:	d007      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	f002 020c 	and.w	r2, r2, #12
 8001ce6:	2a08      	cmp	r2, #8
 8001ce8:	d104      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8001cea:	4810      	ldr	r0, [pc, #64]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001cec:	2200      	movs	r2, #0
 8001cee:	e7dc      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001cf0:	480f      	ldr	r0, [pc, #60]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cf2:	e7fb      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001cf4:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	e7d7      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cfe:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d02:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001d0c:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d0e:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d10:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001d12:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001d16:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	4804      	ldr	r0, [pc, #16]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d1c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001d20:	e7ef      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x9e>
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08006888 	.word	0x08006888
 8001d2c:	007a1200 	.word	0x007a1200
 8001d30:	00f42400 	.word	0x00f42400

08001d34 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d34:	6803      	ldr	r3, [r0, #0]
{
 8001d36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001d3a:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d3c:	06d8      	lsls	r0, r3, #27
 8001d3e:	d539      	bpl.n	8001db4 <HAL_RCC_OscConfig+0x80>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001d40:	4cab      	ldr	r4, [pc, #684]	; (8001ff0 <HAL_RCC_OscConfig+0x2bc>)
 8001d42:	68a3      	ldr	r3, [r4, #8]
 8001d44:	f013 0f0c 	tst.w	r3, #12
 8001d48:	d162      	bne.n	8001e10 <HAL_RCC_OscConfig+0xdc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	0799      	lsls	r1, r3, #30
 8001d4e:	d503      	bpl.n	8001d58 <HAL_RCC_OscConfig+0x24>
 8001d50:	69ab      	ldr	r3, [r5, #24]
 8001d52:	b90b      	cbnz	r3, 8001d58 <HAL_RCC_OscConfig+0x24>
      return HAL_ERROR;
 8001d54:	2001      	movs	r0, #1
 8001d56:	e07f      	b.n	8001e58 <HAL_RCC_OscConfig+0x124>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	6a28      	ldr	r0, [r5, #32]
 8001d5c:	071a      	lsls	r2, r3, #28
 8001d5e:	bf56      	itet	pl
 8001d60:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001d64:	6823      	ldrmi	r3, [r4, #0]
 8001d66:	091b      	lsrpl	r3, r3, #4
 8001d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d6c:	4283      	cmp	r3, r0
 8001d6e:	d23a      	bcs.n	8001de6 <HAL_RCC_OscConfig+0xb2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d70:	f7ff ff36 	bl	8001be0 <RCC_SetFlashLatencyFromMSIRange>
 8001d74:	2800      	cmp	r0, #0
 8001d76:	d1ed      	bne.n	8001d54 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	f043 0308 	orr.w	r3, r3, #8
 8001d7e:	6023      	str	r3, [r4, #0]
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	6a2a      	ldr	r2, [r5, #32]
 8001d84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d8c:	6863      	ldr	r3, [r4, #4]
 8001d8e:	69ea      	ldr	r2, [r5, #28]
 8001d90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d98:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d9a:	f7ff ff63 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001d9e:	68a3      	ldr	r3, [r4, #8]
 8001da0:	4a94      	ldr	r2, [pc, #592]	; (8001ff4 <HAL_RCC_OscConfig+0x2c0>)
 8001da2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001da6:	5cd3      	ldrb	r3, [r2, r3]
 8001da8:	40d8      	lsrs	r0, r3
 8001daa:	4b93      	ldr	r3, [pc, #588]	; (8001ff8 <HAL_RCC_OscConfig+0x2c4>)
 8001dac:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff f8ce 	bl	8000f50 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	07d8      	lsls	r0, r3, #31
 8001db8:	d461      	bmi.n	8001e7e <HAL_RCC_OscConfig+0x14a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dba:	682b      	ldr	r3, [r5, #0]
 8001dbc:	0799      	lsls	r1, r3, #30
 8001dbe:	f100 80a9 	bmi.w	8001f14 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc2:	682b      	ldr	r3, [r5, #0]
 8001dc4:	071a      	lsls	r2, r3, #28
 8001dc6:	f100 80e7 	bmi.w	8001f98 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dca:	682b      	ldr	r3, [r5, #0]
 8001dcc:	075b      	lsls	r3, r3, #29
 8001dce:	f100 8115 	bmi.w	8001ffc <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dd2:	682b      	ldr	r3, [r5, #0]
 8001dd4:	069a      	lsls	r2, r3, #26
 8001dd6:	f100 817c 	bmi.w	80020d2 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dda:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001ddc:	2a00      	cmp	r2, #0
 8001dde:	f040 81a3 	bne.w	8002128 <HAL_RCC_OscConfig+0x3f4>
  return HAL_OK;
 8001de2:	2000      	movs	r0, #0
 8001de4:	e038      	b.n	8001e58 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	6023      	str	r3, [r4, #0]
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001df4:	4303      	orrs	r3, r0
 8001df6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df8:	6863      	ldr	r3, [r4, #4]
 8001dfa:	69ea      	ldr	r2, [r5, #28]
 8001dfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e04:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e06:	f7ff feeb 	bl	8001be0 <RCC_SetFlashLatencyFromMSIRange>
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d0c5      	beq.n	8001d9a <HAL_RCC_OscConfig+0x66>
 8001e0e:	e7a1      	b.n	8001d54 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e10:	69ab      	ldr	r3, [r5, #24]
 8001e12:	b323      	cbz	r3, 8001e5e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_MSI_ENABLE();
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f8c0 	bl	8000fa0 <HAL_GetTick>
 8001e20:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	079b      	lsls	r3, r3, #30
 8001e26:	d511      	bpl.n	8001e4c <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	f043 0308 	orr.w	r3, r3, #8
 8001e2e:	6023      	str	r3, [r4, #0]
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	6a2a      	ldr	r2, [r5, #32]
 8001e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e3c:	6863      	ldr	r3, [r4, #4]
 8001e3e:	69ea      	ldr	r2, [r5, #28]
 8001e40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e48:	6063      	str	r3, [r4, #4]
 8001e4a:	e7b3      	b.n	8001db4 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e4c:	f7ff f8a8 	bl	8000fa0 <HAL_GetTick>
 8001e50:	1b80      	subs	r0, r0, r6
 8001e52:	2802      	cmp	r0, #2
 8001e54:	d9e5      	bls.n	8001e22 <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 8001e56:	2003      	movs	r0, #3
}
 8001e58:	b002      	add	sp, #8
 8001e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e66:	f7ff f89b 	bl	8000fa0 <HAL_GetTick>
 8001e6a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	079f      	lsls	r7, r3, #30
 8001e70:	d5a0      	bpl.n	8001db4 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e72:	f7ff f895 	bl	8000fa0 <HAL_GetTick>
 8001e76:	1b80      	subs	r0, r0, r6
 8001e78:	2802      	cmp	r0, #2
 8001e7a:	d9f7      	bls.n	8001e6c <HAL_RCC_OscConfig+0x138>
 8001e7c:	e7eb      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001e7e:	4c5c      	ldr	r4, [pc, #368]	; (8001ff0 <HAL_RCC_OscConfig+0x2bc>)
 8001e80:	68a3      	ldr	r3, [r4, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d009      	beq.n	8001e9e <HAL_RCC_OscConfig+0x16a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e8a:	68a3      	ldr	r3, [r4, #8]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001e90:	2b0c      	cmp	r3, #12
 8001e92:	d10b      	bne.n	8001eac <HAL_RCC_OscConfig+0x178>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e94:	68e3      	ldr	r3, [r4, #12]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d106      	bne.n	8001eac <HAL_RCC_OscConfig+0x178>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	039a      	lsls	r2, r3, #14
 8001ea2:	d58a      	bpl.n	8001dba <HAL_RCC_OscConfig+0x86>
 8001ea4:	686b      	ldr	r3, [r5, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d187      	bne.n	8001dba <HAL_RCC_OscConfig+0x86>
 8001eaa:	e753      	b.n	8001d54 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eac:	686b      	ldr	r3, [r5, #4]
 8001eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb2:	d110      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x1a2>
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f870 	bl	8000fa0 <HAL_GetTick>
 8001ec0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	039b      	lsls	r3, r3, #14
 8001ec6:	f53f af78 	bmi.w	8001dba <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eca:	f7ff f869 	bl	8000fa0 <HAL_GetTick>
 8001ece:	1b80      	subs	r0, r0, r6
 8001ed0:	2864      	cmp	r0, #100	; 0x64
 8001ed2:	d9f6      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x18e>
 8001ed4:	e7bf      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eda:	d104      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x1b2>
 8001edc:	6823      	ldr	r3, [r4, #0]
 8001ede:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee2:	6023      	str	r3, [r4, #0]
 8001ee4:	e7e6      	b.n	8001eb4 <HAL_RCC_OscConfig+0x180>
 8001ee6:	6822      	ldr	r2, [r4, #0]
 8001ee8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eec:	6022      	str	r2, [r4, #0]
 8001eee:	6822      	ldr	r2, [r4, #0]
 8001ef0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ef4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1e0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 8001efa:	f7ff f851 	bl	8000fa0 <HAL_GetTick>
 8001efe:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	039f      	lsls	r7, r3, #14
 8001f04:	f57f af59 	bpl.w	8001dba <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff f84a 	bl	8000fa0 <HAL_GetTick>
 8001f0c:	1b80      	subs	r0, r0, r6
 8001f0e:	2864      	cmp	r0, #100	; 0x64
 8001f10:	d9f6      	bls.n	8001f00 <HAL_RCC_OscConfig+0x1cc>
 8001f12:	e7a0      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001f14:	4c36      	ldr	r4, [pc, #216]	; (8001ff0 <HAL_RCC_OscConfig+0x2bc>)
 8001f16:	68a3      	ldr	r3, [r4, #8]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d009      	beq.n	8001f34 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f20:	68a3      	ldr	r3, [r4, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001f26:	2b0c      	cmp	r3, #12
 8001f28:	d113      	bne.n	8001f52 <HAL_RCC_OscConfig+0x21e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f2a:	68e3      	ldr	r3, [r4, #12]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d10e      	bne.n	8001f52 <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	055e      	lsls	r6, r3, #21
 8001f38:	d503      	bpl.n	8001f42 <HAL_RCC_OscConfig+0x20e>
 8001f3a:	68eb      	ldr	r3, [r5, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f43f af09 	beq.w	8001d54 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	6863      	ldr	r3, [r4, #4]
 8001f44:	692a      	ldr	r2, [r5, #16]
 8001f46:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001f4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f4e:	6063      	str	r3, [r4, #4]
 8001f50:	e737      	b.n	8001dc2 <HAL_RCC_OscConfig+0x8e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f52:	68eb      	ldr	r3, [r5, #12]
 8001f54:	b17b      	cbz	r3, 8001f76 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_ENABLE();
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f5e:	f7ff f81f 	bl	8000fa0 <HAL_GetTick>
 8001f62:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	0558      	lsls	r0, r3, #21
 8001f68:	d4eb      	bmi.n	8001f42 <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7ff f819 	bl	8000fa0 <HAL_GetTick>
 8001f6e:	1b80      	subs	r0, r0, r6
 8001f70:	2802      	cmp	r0, #2
 8001f72:	d9f7      	bls.n	8001f64 <HAL_RCC_OscConfig+0x230>
 8001f74:	e76f      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f7e:	f7ff f80f 	bl	8000fa0 <HAL_GetTick>
 8001f82:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	0559      	lsls	r1, r3, #21
 8001f88:	f57f af1b 	bpl.w	8001dc2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7ff f808 	bl	8000fa0 <HAL_GetTick>
 8001f90:	1b80      	subs	r0, r0, r6
 8001f92:	2802      	cmp	r0, #2
 8001f94:	d9f6      	bls.n	8001f84 <HAL_RCC_OscConfig+0x250>
 8001f96:	e75e      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f98:	696b      	ldr	r3, [r5, #20]
 8001f9a:	4c15      	ldr	r4, [pc, #84]	; (8001ff0 <HAL_RCC_OscConfig+0x2bc>)
 8001f9c:	b19b      	cbz	r3, 8001fc6 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 8001f9e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001faa:	f7fe fff9 	bl	8000fa0 <HAL_GetTick>
 8001fae:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001fb0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001fb4:	079f      	lsls	r7, r3, #30
 8001fb6:	f53f af08 	bmi.w	8001dca <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fba:	f7fe fff1 	bl	8000fa0 <HAL_GetTick>
 8001fbe:	1b80      	subs	r0, r0, r6
 8001fc0:	2802      	cmp	r0, #2
 8001fc2:	d9f5      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x27c>
 8001fc4:	e747      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8001fc6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001fd2:	f7fe ffe5 	bl	8000fa0 <HAL_GetTick>
 8001fd6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001fd8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001fdc:	0798      	lsls	r0, r3, #30
 8001fde:	f57f aef4 	bpl.w	8001dca <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe2:	f7fe ffdd 	bl	8000fa0 <HAL_GetTick>
 8001fe6:	1b80      	subs	r0, r0, r6
 8001fe8:	2802      	cmp	r0, #2
 8001fea:	d9f5      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x2a4>
 8001fec:	e733      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	0800686d 	.word	0x0800686d
 8001ff8:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ffc:	4c79      	ldr	r4, [pc, #484]	; (80021e4 <HAL_RCC_OscConfig+0x4b0>)
 8001ffe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002000:	00d9      	lsls	r1, r3, #3
 8002002:	d427      	bmi.n	8002054 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200a:	65a3      	str	r3, [r4, #88]	; 0x58
 800200c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	9301      	str	r3, [sp, #4]
 8002014:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002016:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002018:	4e73      	ldr	r6, [pc, #460]	; (80021e8 <HAL_RCC_OscConfig+0x4b4>)
 800201a:	6833      	ldr	r3, [r6, #0]
 800201c:	05da      	lsls	r2, r3, #23
 800201e:	d51b      	bpl.n	8002058 <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002020:	68ab      	ldr	r3, [r5, #8]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d129      	bne.n	800207a <HAL_RCC_OscConfig+0x346>
 8002026:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002032:	f7fe ffb5 	bl	8000fa0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800203a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800203c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002040:	0798      	lsls	r0, r3, #30
 8002042:	d540      	bpl.n	80020c6 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8002044:	2f00      	cmp	r7, #0
 8002046:	f43f aec4 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800204a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800204c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002050:	65a3      	str	r3, [r4, #88]	; 0x58
 8002052:	e6be      	b.n	8001dd2 <HAL_RCC_OscConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;
 8002054:	2700      	movs	r7, #0
 8002056:	e7df      	b.n	8002018 <HAL_RCC_OscConfig+0x2e4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002058:	6833      	ldr	r3, [r6, #0]
 800205a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002060:	f7fe ff9e 	bl	8000fa0 <HAL_GetTick>
 8002064:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002066:	6833      	ldr	r3, [r6, #0]
 8002068:	05db      	lsls	r3, r3, #23
 800206a:	d4d9      	bmi.n	8002020 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206c:	f7fe ff98 	bl	8000fa0 <HAL_GetTick>
 8002070:	eba0 0008 	sub.w	r0, r0, r8
 8002074:	2802      	cmp	r0, #2
 8002076:	d9f6      	bls.n	8002066 <HAL_RCC_OscConfig+0x332>
 8002078:	e6ed      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207a:	2b05      	cmp	r3, #5
 800207c:	d106      	bne.n	800208c <HAL_RCC_OscConfig+0x358>
 800207e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800208a:	e7cc      	b.n	8002026 <HAL_RCC_OscConfig+0x2f2>
 800208c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002098:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800209c:	f022 0204 	bic.w	r2, r2, #4
 80020a0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1c4      	bne.n	8002032 <HAL_RCC_OscConfig+0x2fe>
      tickstart = HAL_GetTick();
 80020a8:	f7fe ff7a 	bl	8000fa0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80020b0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80020b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80020b6:	0799      	lsls	r1, r3, #30
 80020b8:	d5c4      	bpl.n	8002044 <HAL_RCC_OscConfig+0x310>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe ff71 	bl	8000fa0 <HAL_GetTick>
 80020be:	1b80      	subs	r0, r0, r6
 80020c0:	4540      	cmp	r0, r8
 80020c2:	d9f6      	bls.n	80020b2 <HAL_RCC_OscConfig+0x37e>
 80020c4:	e6c7      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7fe ff6b 	bl	8000fa0 <HAL_GetTick>
 80020ca:	1b80      	subs	r0, r0, r6
 80020cc:	4540      	cmp	r0, r8
 80020ce:	d9b5      	bls.n	800203c <HAL_RCC_OscConfig+0x308>
 80020d0:	e6c1      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80020d4:	4c43      	ldr	r4, [pc, #268]	; (80021e4 <HAL_RCC_OscConfig+0x4b0>)
 80020d6:	b19b      	cbz	r3, 8002100 <HAL_RCC_OscConfig+0x3cc>
      __HAL_RCC_HSI48_ENABLE();
 80020d8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80020e4:	f7fe ff5c 	bl	8000fa0 <HAL_GetTick>
 80020e8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80020ea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80020ee:	079b      	lsls	r3, r3, #30
 80020f0:	f53f ae73 	bmi.w	8001dda <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f4:	f7fe ff54 	bl	8000fa0 <HAL_GetTick>
 80020f8:	1b80      	subs	r0, r0, r6
 80020fa:	2802      	cmp	r0, #2
 80020fc:	d9f5      	bls.n	80020ea <HAL_RCC_OscConfig+0x3b6>
 80020fe:	e6aa      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8002100:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800210c:	f7fe ff48 	bl	8000fa0 <HAL_GetTick>
 8002110:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8002112:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002116:	079f      	lsls	r7, r3, #30
 8002118:	f57f ae5f 	bpl.w	8001dda <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800211c:	f7fe ff40 	bl	8000fa0 <HAL_GetTick>
 8002120:	1b80      	subs	r0, r0, r6
 8002122:	2802      	cmp	r0, #2
 8002124:	d9f5      	bls.n	8002112 <HAL_RCC_OscConfig+0x3de>
 8002126:	e696      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002128:	4c2e      	ldr	r4, [pc, #184]	; (80021e4 <HAL_RCC_OscConfig+0x4b0>)
 800212a:	68a3      	ldr	r3, [r4, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b0c      	cmp	r3, #12
 8002132:	f43f ae0f 	beq.w	8001d54 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8002136:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002138:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800213a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800213e:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002140:	d136      	bne.n	80021b0 <HAL_RCC_OscConfig+0x47c>
        tickstart = HAL_GetTick();
 8002142:	f7fe ff2d 	bl	8000fa0 <HAL_GetTick>
 8002146:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	0198      	lsls	r0, r3, #6
 800214c:	d42a      	bmi.n	80021a4 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800214e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002150:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002152:	06db      	lsls	r3, r3, #27
 8002154:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002158:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800215a:	4313      	orrs	r3, r2
 800215c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800215e:	3a01      	subs	r2, #1
 8002160:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002164:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002166:	0852      	lsrs	r2, r2, #1
 8002168:	3a01      	subs	r2, #1
 800216a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800216e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002170:	0852      	lsrs	r2, r2, #1
 8002172:	3a01      	subs	r2, #1
 8002174:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002178:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002180:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002182:	68e3      	ldr	r3, [r4, #12]
 8002184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002188:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800218a:	f7fe ff09 	bl	8000fa0 <HAL_GetTick>
 800218e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	0199      	lsls	r1, r3, #6
 8002194:	f53f ae25 	bmi.w	8001de2 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002198:	f7fe ff02 	bl	8000fa0 <HAL_GetTick>
 800219c:	1b40      	subs	r0, r0, r5
 800219e:	2802      	cmp	r0, #2
 80021a0:	d9f6      	bls.n	8002190 <HAL_RCC_OscConfig+0x45c>
 80021a2:	e658      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe fefc 	bl	8000fa0 <HAL_GetTick>
 80021a8:	1b80      	subs	r0, r0, r6
 80021aa:	2802      	cmp	r0, #2
 80021ac:	d9cc      	bls.n	8002148 <HAL_RCC_OscConfig+0x414>
 80021ae:	e652      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021b4:	bf5e      	ittt	pl
 80021b6:	68e3      	ldrpl	r3, [r4, #12]
 80021b8:	f023 0303 	bicpl.w	r3, r3, #3
 80021bc:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80021be:	68e3      	ldr	r3, [r4, #12]
 80021c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c8:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80021ca:	f7fe fee9 	bl	8000fa0 <HAL_GetTick>
 80021ce:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	019b      	lsls	r3, r3, #6
 80021d4:	f57f ae05 	bpl.w	8001de2 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe fee2 	bl	8000fa0 <HAL_GetTick>
 80021dc:	1b40      	subs	r0, r0, r5
 80021de:	2802      	cmp	r0, #2
 80021e0:	d9f6      	bls.n	80021d0 <HAL_RCC_OscConfig+0x49c>
 80021e2:	e638      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40007000 	.word	0x40007000

080021ec <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80021ec:	4a56      	ldr	r2, [pc, #344]	; (8002348 <HAL_RCC_ClockConfig+0x15c>)
 80021ee:	6813      	ldr	r3, [r2, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	428b      	cmp	r3, r1
{
 80021f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021fa:	4605      	mov	r5, r0
 80021fc:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80021fe:	d32b      	bcc.n	8002258 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002200:	682b      	ldr	r3, [r5, #0]
 8002202:	07d9      	lsls	r1, r3, #31
 8002204:	d435      	bmi.n	8002272 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002206:	6829      	ldr	r1, [r5, #0]
 8002208:	078a      	lsls	r2, r1, #30
 800220a:	f100 8083 	bmi.w	8002314 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800220e:	4a4e      	ldr	r2, [pc, #312]	; (8002348 <HAL_RCC_ClockConfig+0x15c>)
 8002210:	6813      	ldr	r3, [r2, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	429e      	cmp	r6, r3
 8002218:	f0c0 8084 	bcc.w	8002324 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	f011 0f04 	tst.w	r1, #4
 8002220:	4c4a      	ldr	r4, [pc, #296]	; (800234c <HAL_RCC_ClockConfig+0x160>)
 8002222:	f040 808a 	bne.w	800233a <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	070b      	lsls	r3, r1, #28
 8002228:	d506      	bpl.n	8002238 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800222a:	68a3      	ldr	r3, [r4, #8]
 800222c:	692a      	ldr	r2, [r5, #16]
 800222e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002232:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002236:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002238:	f7ff fd14 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 800223c:	68a3      	ldr	r3, [r4, #8]
 800223e:	4a44      	ldr	r2, [pc, #272]	; (8002350 <HAL_RCC_ClockConfig+0x164>)
 8002240:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	40d8      	lsrs	r0, r3
 8002248:	4b42      	ldr	r3, [pc, #264]	; (8002354 <HAL_RCC_ClockConfig+0x168>)
 800224a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800224c:	2000      	movs	r0, #0
 800224e:	f7fe fe7f 	bl	8000f50 <HAL_InitTick>
  return HAL_OK;
 8002252:	2000      	movs	r0, #0
}
 8002254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002258:	6813      	ldr	r3, [r2, #0]
 800225a:	f023 0307 	bic.w	r3, r3, #7
 800225e:	430b      	orrs	r3, r1
 8002260:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8002262:	6813      	ldr	r3, [r2, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	4299      	cmp	r1, r3
 800226a:	d0c9      	beq.n	8002200 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800226c:	2001      	movs	r0, #1
 800226e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002272:	686a      	ldr	r2, [r5, #4]
 8002274:	4c35      	ldr	r4, [pc, #212]	; (800234c <HAL_RCC_ClockConfig+0x160>)
 8002276:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002278:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227a:	d11c      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800227c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002280:	d0f4      	beq.n	800226c <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002282:	68a3      	ldr	r3, [r4, #8]
 8002284:	f023 0303 	bic.w	r3, r3, #3
 8002288:	4313      	orrs	r3, r2
 800228a:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800228c:	f7fe fe88 	bl	8000fa0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002290:	686b      	ldr	r3, [r5, #4]
 8002292:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8002294:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002296:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	d118      	bne.n	80022ce <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229c:	68a3      	ldr	r3, [r4, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d0af      	beq.n	8002206 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a6:	f7fe fe7b 	bl	8000fa0 <HAL_GetTick>
 80022aa:	1bc0      	subs	r0, r0, r7
 80022ac:	4540      	cmp	r0, r8
 80022ae:	d9f5      	bls.n	800229c <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 80022b0:	2003      	movs	r0, #3
 80022b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b6:	2a02      	cmp	r2, #2
 80022b8:	d102      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80022ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022be:	e7df      	b.n	8002280 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022c0:	b912      	cbnz	r2, 80022c8 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80022c2:	f013 0f02 	tst.w	r3, #2
 80022c6:	e7db      	b.n	8002280 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80022c8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80022cc:	e7d8      	b.n	8002280 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d10a      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80022d2:	68a3      	ldr	r3, [r4, #8]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d094      	beq.n	8002206 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe fe60 	bl	8000fa0 <HAL_GetTick>
 80022e0:	1bc0      	subs	r0, r0, r7
 80022e2:	4540      	cmp	r0, r8
 80022e4:	d9f5      	bls.n	80022d2 <HAL_RCC_ClockConfig+0xe6>
 80022e6:	e7e3      	b.n	80022b0 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022e8:	b973      	cbnz	r3, 8002308 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80022ea:	68a3      	ldr	r3, [r4, #8]
 80022ec:	f013 0f0c 	tst.w	r3, #12
 80022f0:	d089      	beq.n	8002206 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f2:	f7fe fe55 	bl	8000fa0 <HAL_GetTick>
 80022f6:	1bc0      	subs	r0, r0, r7
 80022f8:	4540      	cmp	r0, r8
 80022fa:	d9f6      	bls.n	80022ea <HAL_RCC_ClockConfig+0xfe>
 80022fc:	e7d8      	b.n	80022b0 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fe:	f7fe fe4f 	bl	8000fa0 <HAL_GetTick>
 8002302:	1bc0      	subs	r0, r0, r7
 8002304:	4540      	cmp	r0, r8
 8002306:	d8d3      	bhi.n	80022b0 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002308:	68a3      	ldr	r3, [r4, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d1f5      	bne.n	80022fe <HAL_RCC_ClockConfig+0x112>
 8002312:	e778      	b.n	8002206 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002314:	4a0d      	ldr	r2, [pc, #52]	; (800234c <HAL_RCC_ClockConfig+0x160>)
 8002316:	68a8      	ldr	r0, [r5, #8]
 8002318:	6893      	ldr	r3, [r2, #8]
 800231a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800231e:	4303      	orrs	r3, r0
 8002320:	6093      	str	r3, [r2, #8]
 8002322:	e774      	b.n	800220e <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002324:	6813      	ldr	r3, [r2, #0]
 8002326:	f023 0307 	bic.w	r3, r3, #7
 800232a:	4333      	orrs	r3, r6
 800232c:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	429e      	cmp	r6, r3
 8002336:	d199      	bne.n	800226c <HAL_RCC_ClockConfig+0x80>
 8002338:	e770      	b.n	800221c <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233a:	68a3      	ldr	r3, [r4, #8]
 800233c:	68ea      	ldr	r2, [r5, #12]
 800233e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002342:	4313      	orrs	r3, r2
 8002344:	60a3      	str	r3, [r4, #8]
 8002346:	e76e      	b.n	8002226 <HAL_RCC_ClockConfig+0x3a>
 8002348:	40022000 	.word	0x40022000
 800234c:	40021000 	.word	0x40021000
 8002350:	0800686d 	.word	0x0800686d
 8002354:	20000000 	.word	0x20000000

08002358 <HAL_RCC_GetHCLKFreq>:
}
 8002358:	4b01      	ldr	r3, [pc, #4]	; (8002360 <HAL_RCC_GetHCLKFreq+0x8>)
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000000 	.word	0x20000000

08002364 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	4a03      	ldr	r2, [pc, #12]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002372:	6810      	ldr	r0, [r2, #0]
}
 8002374:	40d8      	lsrs	r0, r3
 8002376:	4770      	bx	lr
 8002378:	40021000 	.word	0x40021000
 800237c:	0800687d 	.word	0x0800687d
 8002380:	20000000 	.word	0x20000000

08002384 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	4a03      	ldr	r2, [pc, #12]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002392:	6810      	ldr	r0, [r2, #0]
}
 8002394:	40d8      	lsrs	r0, r3
 8002396:	4770      	bx	lr
 8002398:	40021000 	.word	0x40021000
 800239c:	0800687d 	.word	0x0800687d
 80023a0:	20000000 	.word	0x20000000

080023a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023a6:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <RCCEx_PLLSAI1_Config+0x114>)
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	f012 0f03 	tst.w	r2, #3
{
 80023ae:	4605      	mov	r5, r0
 80023b0:	460e      	mov	r6, r1
 80023b2:	461c      	mov	r4, r3
 80023b4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023b6:	d039      	beq.n	800242c <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	f002 0203 	and.w	r2, r2, #3
 80023be:	4282      	cmp	r2, r0
 80023c0:	d14b      	bne.n	800245a <RCCEx_PLLSAI1_Config+0xb6>
       ||
 80023c2:	2a00      	cmp	r2, #0
 80023c4:	d049      	beq.n	800245a <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023c6:	68db      	ldr	r3, [r3, #12]
       ||
 80023c8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80023ce:	3301      	adds	r3, #1
       ||
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d142      	bne.n	800245a <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023da:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023dc:	f7fe fde0 	bl	8000fa0 <HAL_GetTick>
 80023e0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	011a      	lsls	r2, r3, #4
 80023e6:	d441      	bmi.n	800246c <RCCEx_PLLSAI1_Config+0xc8>
 80023e8:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023ea:	2e00      	cmp	r6, #0
 80023ec:	d045      	beq.n	800247a <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023ee:	2e01      	cmp	r6, #1
 80023f0:	d14f      	bne.n	8002492 <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023f2:	6922      	ldr	r2, [r4, #16]
 80023f4:	6928      	ldr	r0, [r5, #16]
 80023f6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80023fa:	0840      	lsrs	r0, r0, #1
 80023fc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002400:	3801      	subs	r0, #1
 8002402:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002406:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800240a:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002412:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe fdc4 	bl	8000fa0 <HAL_GetTick>
 8002418:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	d545      	bpl.n	80024ac <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002420:	6923      	ldr	r3, [r4, #16]
 8002422:	69aa      	ldr	r2, [r5, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	6123      	str	r3, [r4, #16]
 8002428:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800242a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800242c:	2802      	cmp	r0, #2
 800242e:	d010      	beq.n	8002452 <RCCEx_PLLSAI1_Config+0xae>
 8002430:	2803      	cmp	r0, #3
 8002432:	d014      	beq.n	800245e <RCCEx_PLLSAI1_Config+0xba>
 8002434:	2801      	cmp	r0, #1
 8002436:	d110      	bne.n	800245a <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	079f      	lsls	r7, r3, #30
 800243c:	d5f5      	bpl.n	800242a <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800243e:	68e3      	ldr	r3, [r4, #12]
 8002440:	686a      	ldr	r2, [r5, #4]
 8002442:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002446:	3a01      	subs	r2, #1
 8002448:	4318      	orrs	r0, r3
 800244a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800244e:	60e0      	str	r0, [r4, #12]
 8002450:	e7c0      	b.n	80023d4 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002458:	d1f1      	bne.n	800243e <RCCEx_PLLSAI1_Config+0x9a>
 800245a:	2001      	movs	r0, #1
 800245c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	0391      	lsls	r1, r2, #14
 8002462:	d4ec      	bmi.n	800243e <RCCEx_PLLSAI1_Config+0x9a>
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800246a:	e7f5      	b.n	8002458 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800246c:	f7fe fd98 	bl	8000fa0 <HAL_GetTick>
 8002470:	1bc0      	subs	r0, r0, r7
 8002472:	2802      	cmp	r0, #2
 8002474:	d9b5      	bls.n	80023e2 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002476:	2003      	movs	r0, #3
 8002478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800247a:	6922      	ldr	r2, [r4, #16]
 800247c:	68e9      	ldr	r1, [r5, #12]
 800247e:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8002482:	06c9      	lsls	r1, r1, #27
 8002484:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8002488:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800248c:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800248e:	6123      	str	r3, [r4, #16]
 8002490:	e7bc      	b.n	800240c <RCCEx_PLLSAI1_Config+0x68>
 8002492:	6923      	ldr	r3, [r4, #16]
 8002494:	6968      	ldr	r0, [r5, #20]
 8002496:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800249a:	0840      	lsrs	r0, r0, #1
 800249c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024a0:	3801      	subs	r0, #1
 80024a2:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80024a6:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80024aa:	e7f0      	b.n	800248e <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ac:	f7fe fd78 	bl	8000fa0 <HAL_GetTick>
 80024b0:	1b80      	subs	r0, r0, r6
 80024b2:	2802      	cmp	r0, #2
 80024b4:	d9b1      	bls.n	800241a <RCCEx_PLLSAI1_Config+0x76>
 80024b6:	e7de      	b.n	8002476 <RCCEx_PLLSAI1_Config+0xd2>
 80024b8:	40021000 	.word	0x40021000

080024bc <HAL_RCCEx_PeriphCLKConfig>:
{
 80024bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024c0:	6805      	ldr	r5, [r0, #0]
 80024c2:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 80024c6:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024c8:	d00e      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80024ca:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80024cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80024d0:	d05b      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0xce>
 80024d2:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80024d6:	d05d      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80024d8:	2900      	cmp	r1, #0
 80024da:	d166      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024dc:	3004      	adds	r0, #4
 80024de:	f7ff ff61 	bl	80023a4 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 80024e2:	4605      	mov	r5, r0
 80024e4:	2800      	cmp	r0, #0
 80024e6:	d055      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	0398      	lsls	r0, r3, #14
 80024ec:	d56d      	bpl.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ee:	4e9d      	ldr	r6, [pc, #628]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80024f0:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80024f2:	00d9      	lsls	r1, r3, #3
 80024f4:	d45b      	bmi.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	65b3      	str	r3, [r6, #88]	; 0x58
 80024fe:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002508:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800250a:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8002768 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800250e:	f8d8 3000 	ldr.w	r3, [r8]
 8002512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002516:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 800251a:	f7fe fd41 	bl	8000fa0 <HAL_GetTick>
 800251e:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8002520:	f8d8 3000 	ldr.w	r3, [r8]
 8002524:	05da      	lsls	r2, r3, #23
 8002526:	d544      	bpl.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 8002528:	2d00      	cmp	r5, #0
 800252a:	d149      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800252c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002530:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002534:	d014      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002536:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002538:	4293      	cmp	r3, r2
 800253a:	d011      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800253c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002540:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002544:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002548:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800254c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002554:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002558:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800255c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002560:	07db      	lsls	r3, r3, #31
 8002562:	d509      	bpl.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002564:	f7fe fd1c 	bl	8000fa0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800256c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800256e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002572:	0798      	lsls	r0, r3, #30
 8002574:	f140 80d8 	bpl.w	8002728 <HAL_RCCEx_PeriphCLKConfig+0x26c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002578:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800257c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800257e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8002588:	e01a      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800258a:	4a76      	ldr	r2, [pc, #472]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800258c:	68d3      	ldr	r3, [r2, #12]
 800258e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002592:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002594:	4a73      	ldr	r2, [pc, #460]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002596:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002598:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800259c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025a0:	430b      	orrs	r3, r1
 80025a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80025a6:	2500      	movs	r5, #0
 80025a8:	e79e      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 80025aa:	2501      	movs	r5, #1
 80025ac:	e79c      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80025ae:	2700      	movs	r7, #0
 80025b0:	e7ab      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b2:	f7fe fcf5 	bl	8000fa0 <HAL_GetTick>
 80025b6:	eba0 0009 	sub.w	r0, r0, r9
 80025ba:	2802      	cmp	r0, #2
 80025bc:	d9b0      	bls.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 80025be:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80025c0:	b11f      	cbz	r7, 80025ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c2:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80025c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c8:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	07d9      	lsls	r1, r3, #31
 80025ce:	d508      	bpl.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025d0:	4964      	ldr	r1, [pc, #400]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80025d2:	6a20      	ldr	r0, [r4, #32]
 80025d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025d8:	f022 0203 	bic.w	r2, r2, #3
 80025dc:	4302      	orrs	r2, r0
 80025de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025e2:	079a      	lsls	r2, r3, #30
 80025e4:	d508      	bpl.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025e6:	495f      	ldr	r1, [pc, #380]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80025e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80025ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025ee:	f022 020c 	bic.w	r2, r2, #12
 80025f2:	4302      	orrs	r2, r0
 80025f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025f8:	075f      	lsls	r7, r3, #29
 80025fa:	d508      	bpl.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025fc:	4959      	ldr	r1, [pc, #356]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80025fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002600:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002604:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002608:	4302      	orrs	r2, r0
 800260a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800260e:	069e      	lsls	r6, r3, #26
 8002610:	d508      	bpl.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002612:	4954      	ldr	r1, [pc, #336]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002614:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002616:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800261a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800261e:	4302      	orrs	r2, r0
 8002620:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002624:	0598      	lsls	r0, r3, #22
 8002626:	d508      	bpl.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002628:	494e      	ldr	r1, [pc, #312]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800262a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800262c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002630:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002634:	4302      	orrs	r2, r0
 8002636:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800263a:	0559      	lsls	r1, r3, #21
 800263c:	d508      	bpl.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800263e:	4949      	ldr	r1, [pc, #292]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002640:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002642:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002646:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800264a:	4302      	orrs	r2, r0
 800264c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002650:	065a      	lsls	r2, r3, #25
 8002652:	d508      	bpl.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002654:	4943      	ldr	r1, [pc, #268]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002656:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002658:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800265c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002660:	4302      	orrs	r2, r0
 8002662:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002666:	061f      	lsls	r7, r3, #24
 8002668:	d508      	bpl.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800266a:	493e      	ldr	r1, [pc, #248]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800266c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800266e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002672:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002676:	4302      	orrs	r2, r0
 8002678:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800267c:	05de      	lsls	r6, r3, #23
 800267e:	d508      	bpl.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002680:	4938      	ldr	r1, [pc, #224]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002682:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002684:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002688:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800268c:	4302      	orrs	r2, r0
 800268e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002692:	0318      	lsls	r0, r3, #12
 8002694:	d50f      	bpl.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002696:	4a33      	ldr	r2, [pc, #204]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002698:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800269a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800269e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80026a2:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026a4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026ac:	d144      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ae:	68d3      	ldr	r3, [r2, #12]
 80026b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026b4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	0359      	lsls	r1, r3, #13
 80026ba:	d50f      	bpl.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026bc:	4a29      	ldr	r2, [pc, #164]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80026be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80026c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026c4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80026c8:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ca:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026d2:	d13c      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x292>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d4:	68d3      	ldr	r3, [r2, #12]
 80026d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026da:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	045a      	lsls	r2, r3, #17
 80026e0:	d512      	bpl.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026e2:	4920      	ldr	r1, [pc, #128]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80026e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80026e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80026ea:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80026ee:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026f0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026f8:	d106      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026fa:	2102      	movs	r1, #2
 80026fc:	1d20      	adds	r0, r4, #4
 80026fe:	f7ff fe51 	bl	80023a4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002702:	2800      	cmp	r0, #0
 8002704:	bf18      	it	ne
 8002706:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	d508      	bpl.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800270e:	4a15      	ldr	r2, [pc, #84]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002710:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002712:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002716:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800271a:	430b      	orrs	r3, r1
 800271c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002720:	4628      	mov	r0, r5
 8002722:	b003      	add	sp, #12
 8002724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7fe fc3a 	bl	8000fa0 <HAL_GetTick>
 800272c:	eba0 0008 	sub.w	r0, r0, r8
 8002730:	4548      	cmp	r0, r9
 8002732:	f67f af1c 	bls.w	800256e <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8002736:	e742      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x102>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002738:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800273c:	d1bb      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273e:	2101      	movs	r1, #1
 8002740:	1d20      	adds	r0, r4, #4
 8002742:	f7ff fe2f 	bl	80023a4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002746:	2800      	cmp	r0, #0
 8002748:	bf18      	it	ne
 800274a:	4605      	movne	r5, r0
 800274c:	e7b3      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800274e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002752:	d1c3      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002754:	2101      	movs	r1, #1
 8002756:	1d20      	adds	r0, r4, #4
 8002758:	f7ff fe24 	bl	80023a4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800275c:	2800      	cmp	r0, #0
 800275e:	bf18      	it	ne
 8002760:	4605      	movne	r5, r0
 8002762:	e7bb      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002764:	40021000 	.word	0x40021000
 8002768:	40007000 	.word	0x40007000

0800276c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800276c:	6802      	ldr	r2, [r0, #0]
{
 800276e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002770:	68d3      	ldr	r3, [r2, #12]
 8002772:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002776:	60d3      	str	r3, [r2, #12]
{
 8002778:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 800277a:	f7fe fc11 	bl	8000fa0 <HAL_GetTick>
 800277e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	069b      	lsls	r3, r3, #26
 8002786:	d501      	bpl.n	800278c <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002788:	2000      	movs	r0, #0
 800278a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800278c:	f7fe fc08 	bl	8000fa0 <HAL_GetTick>
 8002790:	1b40      	subs	r0, r0, r5
 8002792:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002796:	d9f3      	bls.n	8002780 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8002798:	2003      	movs	r0, #3
}
 800279a:	bd38      	pop	{r3, r4, r5, pc}

0800279c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800279c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800279e:	6803      	ldr	r3, [r0, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	0652      	lsls	r2, r2, #25
{
 80027a4:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80027a6:	d501      	bpl.n	80027ac <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80027a8:	2000      	movs	r0, #0
 80027aa:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80027ac:	f04f 32ff 	mov.w	r2, #4294967295
 80027b0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80027b2:	f7fe fbf5 	bl	8000fa0 <HAL_GetTick>
 80027b6:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	065b      	lsls	r3, r3, #25
 80027be:	d4f3      	bmi.n	80027a8 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80027c0:	f7fe fbee 	bl	8000fa0 <HAL_GetTick>
 80027c4:	1b40      	subs	r0, r0, r5
 80027c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80027ca:	d9f5      	bls.n	80027b8 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80027cc:	2003      	movs	r0, #3
}
 80027ce:	bd38      	pop	{r3, r4, r5, pc}

080027d0 <HAL_RTC_Init>:
{
 80027d0:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80027d2:	4604      	mov	r4, r0
 80027d4:	b1d8      	cbz	r0, 800280e <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80027d6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80027da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027de:	b91b      	cbnz	r3, 80027e8 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 80027e0:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 80027e4:	f000 ffb8 	bl	8003758 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027e8:	2302      	movs	r3, #2
 80027ea:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	22ca      	movs	r2, #202	; 0xca
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
 80027f4:	2253      	movs	r2, #83	; 0x53
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7ff ffcf 	bl	800279c <RTC_EnterInitMode>
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	4605      	mov	r5, r0
 8002802:	b130      	cbz	r0, 8002812 <HAL_RTC_Init+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002804:	22ff      	movs	r2, #255	; 0xff
 8002806:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002808:	2304      	movs	r3, #4
 800280a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 800280e:	2501      	movs	r5, #1
 8002810:	e031      	b.n	8002876 <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002812:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002814:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002816:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800281a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800281e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002820:	6862      	ldr	r2, [r4, #4]
 8002822:	6899      	ldr	r1, [r3, #8]
 8002824:	4302      	orrs	r2, r0
 8002826:	69a0      	ldr	r0, [r4, #24]
 8002828:	4302      	orrs	r2, r0
 800282a:	430a      	orrs	r2, r1
 800282c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800282e:	68e2      	ldr	r2, [r4, #12]
 8002830:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	68a1      	ldr	r1, [r4, #8]
 8002836:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800283a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002842:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	069b      	lsls	r3, r3, #26
 8002848:	d405      	bmi.n	8002856 <HAL_RTC_Init+0x86>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800284a:	4620      	mov	r0, r4
 800284c:	f7ff ff8e 	bl	800276c <HAL_RTC_WaitForSynchro>
 8002850:	b108      	cbz	r0, 8002856 <HAL_RTC_Init+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	e7d6      	b.n	8002804 <HAL_RTC_Init+0x34>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002856:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002858:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800285a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800285c:	f022 0203 	bic.w	r2, r2, #3
 8002860:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002862:	69e2      	ldr	r2, [r4, #28]
 8002864:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002866:	4302      	orrs	r2, r0
 8002868:	430a      	orrs	r2, r1
 800286a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800286c:	22ff      	movs	r2, #255	; 0xff
 800286e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002870:	2301      	movs	r3, #1
 8002872:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8002876:	4628      	mov	r0, r5
 8002878:	bd38      	pop	{r3, r4, r5, pc}

0800287a <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 800287a:	2300      	movs	r3, #0

  while(Value >= 10)
 800287c:	2809      	cmp	r0, #9
 800287e:	d803      	bhi.n	8002888 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8002880:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8002884:	b2c0      	uxtb	r0, r0
 8002886:	4770      	bx	lr
    Value -= 10;
 8002888:	380a      	subs	r0, #10
    bcdhigh++;
 800288a:	3301      	adds	r3, #1
    Value -= 10;
 800288c:	b2c0      	uxtb	r0, r0
 800288e:	e7f5      	b.n	800287c <RTC_ByteToBcd2+0x2>

08002890 <HAL_RTC_SetTime>:
{
 8002890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002892:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002896:	2b01      	cmp	r3, #1
{
 8002898:	4606      	mov	r6, r0
 800289a:	460f      	mov	r7, r1
 800289c:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 80028a0:	d033      	beq.n	800290a <HAL_RTC_SetTime+0x7a>
 80028a2:	2301      	movs	r3, #1
 80028a4:	f880 3020 	strb.w	r3, [r0, #32]
 80028a8:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028aa:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
 80028ae:	7808      	ldrb	r0, [r1, #0]
 80028b0:	784d      	ldrb	r5, [r1, #1]
 80028b2:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80028b4:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 80028b6:	bb52      	cbnz	r2, 800290e <HAL_RTC_SetTime+0x7e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80028b8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 80028bc:	bf08      	it	eq
 80028be:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80028c0:	f7ff ffdb 	bl	800287a <RTC_ByteToBcd2>
 80028c4:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80028c6:	4628      	mov	r0, r5
 80028c8:	f7ff ffd7 	bl	800287a <RTC_ByteToBcd2>
 80028cc:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7ff ffd3 	bl	800287a <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 80028d4:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80028d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80028da:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80028de:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028e2:	6833      	ldr	r3, [r6, #0]
 80028e4:	22ca      	movs	r2, #202	; 0xca
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24
 80028e8:	2253      	movs	r2, #83	; 0x53
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80028ec:	4630      	mov	r0, r6
 80028ee:	f7ff ff55 	bl	800279c <RTC_EnterInitMode>
 80028f2:	6833      	ldr	r3, [r6, #0]
 80028f4:	4605      	mov	r5, r0
 80028f6:	b1b8      	cbz	r0, 8002928 <HAL_RTC_SetTime+0x98>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028f8:	22ff      	movs	r2, #255	; 0xff
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80028fc:	2304      	movs	r3, #4
 80028fe:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002902:	2300      	movs	r3, #0
 8002904:	f886 3020 	strb.w	r3, [r6, #32]
        return HAL_ERROR;
 8002908:	2501      	movs	r5, #1
}
 800290a:	4628      	mov	r0, r5
 800290c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800290e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002912:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00;
 8002916:	bf08      	it	eq
 8002918:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800291a:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800291e:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));
 8002920:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002922:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8002926:	e7dc      	b.n	80028e2 <HAL_RTC_SetTime+0x52>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002928:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 800292c:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8002930:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002932:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002934:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002936:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800293a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	6899      	ldr	r1, [r3, #8]
 8002940:	4302      	orrs	r2, r0
 8002942:	430a      	orrs	r2, r1
 8002944:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294c:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	069b      	lsls	r3, r3, #26
 8002952:	d40c      	bmi.n	800296e <HAL_RTC_SetTime+0xde>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002954:	4630      	mov	r0, r6
 8002956:	f7ff ff09 	bl	800276c <HAL_RTC_WaitForSynchro>
 800295a:	b140      	cbz	r0, 800296e <HAL_RTC_SetTime+0xde>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800295c:	6833      	ldr	r3, [r6, #0]
 800295e:	22ff      	movs	r2, #255	; 0xff
 8002960:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002962:	2304      	movs	r3, #4
 8002964:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002968:	f886 5020 	strb.w	r5, [r6, #32]
 800296c:	e7cc      	b.n	8002908 <HAL_RTC_SetTime+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800296e:	6833      	ldr	r3, [r6, #0]
 8002970:	22ff      	movs	r2, #255	; 0xff
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002974:	2301      	movs	r3, #1
 8002976:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 800297a:	2300      	movs	r3, #0
 800297c:	f886 3020 	strb.w	r3, [r6, #32]
   return HAL_OK;
 8002980:	e7c3      	b.n	800290a <HAL_RTC_SetTime+0x7a>

08002982 <HAL_RTC_SetDate>:
{
 8002982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8002984:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002988:	2b01      	cmp	r3, #1
{
 800298a:	4605      	mov	r5, r0
 800298c:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 8002990:	d034      	beq.n	80029fc <HAL_RTC_SetDate+0x7a>
 8002992:	2301      	movs	r3, #1
 8002994:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002998:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
 800299c:	784b      	ldrb	r3, [r1, #1]
 800299e:	78c8      	ldrb	r0, [r1, #3]
 80029a0:	788e      	ldrb	r6, [r1, #2]
 80029a2:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80029a4:	2a00      	cmp	r2, #0
 80029a6:	d14e      	bne.n	8002a46 <HAL_RTC_SetDate+0xc4>
 80029a8:	06da      	lsls	r2, r3, #27
 80029aa:	d503      	bpl.n	80029b4 <HAL_RTC_SetDate+0x32>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80029ac:	f023 0310 	bic.w	r3, r3, #16
 80029b0:	330a      	adds	r3, #10
 80029b2:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80029b4:	f7ff ff61 	bl	800287a <RTC_ByteToBcd2>
 80029b8:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80029ba:	7848      	ldrb	r0, [r1, #1]
 80029bc:	f7ff ff5d 	bl	800287a <RTC_ByteToBcd2>
 80029c0:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80029c2:	4630      	mov	r0, r6
 80029c4:	f7ff ff59 	bl	800287a <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80029c8:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 80029cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80029d0:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029d4:	682b      	ldr	r3, [r5, #0]
 80029d6:	22ca      	movs	r2, #202	; 0xca
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24
 80029da:	2253      	movs	r2, #83	; 0x53
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80029de:	4628      	mov	r0, r5
 80029e0:	f7ff fedc 	bl	800279c <RTC_EnterInitMode>
 80029e4:	682b      	ldr	r3, [r5, #0]
 80029e6:	4606      	mov	r6, r0
 80029e8:	b150      	cbz	r0, 8002a00 <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029ea:	22ff      	movs	r2, #255	; 0xff
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80029ee:	2304      	movs	r3, #4
 80029f0:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 80029f4:	2300      	movs	r3, #0
 80029f6:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 80029fa:	2601      	movs	r6, #1
}
 80029fc:	4630      	mov	r0, r6
 80029fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002a00:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8002a04:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8002a08:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a10:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	069b      	lsls	r3, r3, #26
 8002a16:	d40c      	bmi.n	8002a32 <HAL_RTC_SetDate+0xb0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a18:	4628      	mov	r0, r5
 8002a1a:	f7ff fea7 	bl	800276c <HAL_RTC_WaitForSynchro>
 8002a1e:	b140      	cbz	r0, 8002a32 <HAL_RTC_SetDate+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	22ff      	movs	r2, #255	; 0xff
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a26:	2304      	movs	r3, #4
 8002a28:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002a2c:	f885 6020 	strb.w	r6, [r5, #32]
 8002a30:	e7e3      	b.n	80029fa <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a32:	682b      	ldr	r3, [r5, #0]
 8002a34:	22ff      	movs	r2, #255	; 0xff
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f885 3020 	strb.w	r3, [r5, #32]
    return HAL_OK;
 8002a44:	e7da      	b.n	80029fc <HAL_RTC_SetDate+0x7a>
                  (((uint32_t)sDate->Month) << 8) | \
 8002a46:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002a48:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8002a4c:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002a4e:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8002a52:	e7bf      	b.n	80029d4 <HAL_RTC_SetDate+0x52>

08002a54 <HAL_RTCEx_SetWakeUpTimer_IT>:
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8002a54:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002a58:	2b01      	cmp	r3, #1
{
 8002a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a5e:	4604      	mov	r4, r0
 8002a60:	460e      	mov	r6, r1
 8002a62:	4615      	mov	r5, r2
 8002a64:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8002a68:	d03f      	beq.n	8002aea <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f884 3020 	strb.w	r3, [r4, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a70:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a72:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a76:	22ca      	movs	r2, #202	; 0xca
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24
 8002a7a:	2253      	movs	r2, #83	; 0x53
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	055a      	lsls	r2, r3, #21
 8002a82:	d434      	bmi.n	8002aee <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002a84:	6822      	ldr	r2, [r4, #0]
 8002a86:	6893      	ldr	r3, [r2, #8]
 8002a88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a8c:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002a8e:	68d3      	ldr	r3, [r2, #12]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002a96:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002a98:	f7fe fa82 	bl	8000fa0 <HAL_GetTick>
 8002a9c:	4680      	mov	r8, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	68df      	ldr	r7, [r3, #12]
 8002aa2:	f017 0704 	ands.w	r7, r7, #4
 8002aa6:	d03a      	beq.n	8002b1e <HAL_RTCEx_SetWakeUpTimer_IT+0xca>
      return HAL_TIMEOUT;
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002aa8:	615e      	str	r6, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	f022 0207 	bic.w	r2, r2, #7
 8002ab0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	4315      	orrs	r5, r2

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002ab6:	4a22      	ldr	r2, [pc, #136]	; (8002b40 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002ab8:	609d      	str	r5, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002aba:	6811      	ldr	r1, [r2, #0]
 8002abc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002ac0:	6011      	str	r1, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002ac2:	6891      	ldr	r1, [r2, #8]
 8002ac4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002ac8:	6091      	str	r1, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad0:	609a      	str	r2, [r3, #8]
  
  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ad8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ada:	22ff      	movs	r2, #255	; 0xff
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ade:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY; 
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8002ae6:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 8002aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8002aee:	f7fe fa57 	bl	8000fa0 <HAL_GetTick>
 8002af2:	4607      	mov	r7, r0
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	075b      	lsls	r3, r3, #29
 8002afa:	d5c3      	bpl.n	8002a84 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002afc:	f7fe fa50 	bl	8000fa0 <HAL_GetTick>
 8002b00:	1bc0      	subs	r0, r0, r7
 8002b02:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b06:	d9f5      	bls.n	8002af4 <HAL_RTCEx_SetWakeUpTimer_IT+0xa0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	22ff      	movs	r2, #255	; 0xff
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b0e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hrtc);
 8002b10:	2300      	movs	r3, #0
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b12:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002b16:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 8002b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b1e:	f7fe fa3f 	bl	8000fa0 <HAL_GetTick>
 8002b22:	eba0 0008 	sub.w	r0, r0, r8
 8002b26:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b2a:	d9b8      	bls.n	8002a9e <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8002b30:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8002b34:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      __HAL_UNLOCK(hrtc);
 8002b38:	f884 7020 	strb.w	r7, [r4, #32]
      return HAL_TIMEOUT;
 8002b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b40:	40010400 	.word	0x40010400

08002b44 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8002b46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
{
 8002b4a:	b510      	push	{r4, lr}
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002b4c:	615a      	str	r2, [r3, #20]
  
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8002b4e:	6802      	ldr	r2, [r0, #0]
 8002b50:	68d3      	ldr	r3, [r2, #12]
 8002b52:	055b      	lsls	r3, r3, #21
{
 8002b54:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8002b56:	d506      	bpl.n	8002b66 <HAL_RTCEx_WakeUpTimerIRQHandler+0x22>
  {   
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002b58:	68d3      	ldr	r3, [r2, #12]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002b60:	60d3      	str	r3, [r2, #12]

    /* WAKEUPTIMER callback */ 
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002b62:	f000 fb89 	bl	8003278 <HAL_RTCEx_WakeUpTimerEventCallback>
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8002b6c:	bd10      	pop	{r4, pc}
 8002b6e:	bf00      	nop
 8002b70:	40010400 	.word	0x40010400

08002b74 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002b74:	6803      	ldr	r3, [r0, #0]
 8002b76:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002b78:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002b7c:	4770      	bx	lr

08002b7e <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002b7e:	6803      	ldr	r3, [r0, #0]
 8002b80:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002b82:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8002b86:	4770      	bx	lr

08002b88 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8002b88:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b8a:	69c1      	ldr	r1, [r0, #28]
{
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b90:	6883      	ldr	r3, [r0, #8]
 8002b92:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b94:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b96:	4303      	orrs	r3, r0
 8002b98:	6960      	ldr	r0, [r4, #20]
 8002b9a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b9c:	489e      	ldr	r0, [pc, #632]	; (8002e18 <UART_SetConfig+0x290>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b9e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ba0:	4028      	ands	r0, r5
 8002ba2:	4303      	orrs	r3, r0
 8002ba4:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba6:	6853      	ldr	r3, [r2, #4]
 8002ba8:	68e0      	ldr	r0, [r4, #12]
 8002baa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bae:	4303      	orrs	r3, r0
 8002bb0:	6053      	str	r3, [r2, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bb2:	4b9a      	ldr	r3, [pc, #616]	; (8002e1c <UART_SetConfig+0x294>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bb4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bb6:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bb8:	bf1c      	itt	ne
 8002bba:	6a23      	ldrne	r3, [r4, #32]
 8002bbc:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bbe:	6893      	ldr	r3, [r2, #8]
 8002bc0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002bc4:	4303      	orrs	r3, r0
 8002bc6:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bc8:	4b95      	ldr	r3, [pc, #596]	; (8002e20 <UART_SetConfig+0x298>)
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d119      	bne.n	8002c02 <UART_SetConfig+0x7a>
 8002bce:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002bd2:	4a94      	ldr	r2, [pc, #592]	; (8002e24 <UART_SetConfig+0x29c>)
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd8:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bdc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	f040 8102 	bne.w	8002dea <UART_SetConfig+0x262>
  {
    switch (clocksource)
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	f200 80c8 	bhi.w	8002d7c <UART_SetConfig+0x1f4>
 8002bec:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002bf0:	008f00d3 	.word	0x008f00d3
 8002bf4:	00c600ee 	.word	0x00c600ee
 8002bf8:	00c600fa 	.word	0x00c600fa
 8002bfc:	00c600c6 	.word	0x00c600c6
 8002c00:	0035      	.short	0x0035
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c02:	4b89      	ldr	r3, [pc, #548]	; (8002e28 <UART_SetConfig+0x2a0>)
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d107      	bne.n	8002c18 <UART_SetConfig+0x90>
 8002c08:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002c0c:	4a87      	ldr	r2, [pc, #540]	; (8002e2c <UART_SetConfig+0x2a4>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	e7e1      	b.n	8002bdc <UART_SetConfig+0x54>
 8002c18:	4b85      	ldr	r3, [pc, #532]	; (8002e30 <UART_SetConfig+0x2a8>)
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d122      	bne.n	8002c64 <UART_SetConfig+0xdc>
 8002c1e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	f000 80d7 	beq.w	8002dde <UART_SetConfig+0x256>
 8002c30:	d80b      	bhi.n	8002c4a <UART_SetConfig+0xc2>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80ac 	beq.w	8002d90 <UART_SetConfig+0x208>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c38:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 8002c3c:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002c40:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c44:	f000 80b1 	beq.w	8002daa <UART_SetConfig+0x222>
 8002c48:	e06d      	b.n	8002d26 <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	f000 80bb 	beq.w	8002dc6 <UART_SetConfig+0x23e>
 8002c50:	2b30      	cmp	r3, #48	; 0x30
 8002c52:	d1f1      	bne.n	8002c38 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c54:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002c58:	d17d      	bne.n	8002d56 <UART_SetConfig+0x1ce>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c5a:	6860      	ldr	r0, [r4, #4]
 8002c5c:	0843      	lsrs	r3, r0, #1
 8002c5e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002c62:	e0b9      	b.n	8002dd8 <UART_SetConfig+0x250>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c64:	4b6d      	ldr	r3, [pc, #436]	; (8002e1c <UART_SetConfig+0x294>)
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d1e6      	bne.n	8002c38 <UART_SetConfig+0xb0>
 8002c6a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002c6e:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002c72:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8002c76:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002c7a:	f000 8085 	beq.w	8002d88 <UART_SetConfig+0x200>
 8002c7e:	d805      	bhi.n	8002c8c <UART_SetConfig+0x104>
 8002c80:	2d00      	cmp	r5, #0
 8002c82:	d072      	beq.n	8002d6a <UART_SetConfig+0x1e2>
  if(UART_INSTANCE_LOWPOWER(huart))
 8002c84:	4b65      	ldr	r3, [pc, #404]	; (8002e1c <UART_SetConfig+0x294>)
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d1d6      	bne.n	8002c38 <UART_SetConfig+0xb0>
 8002c8a:	e077      	b.n	8002d7c <UART_SetConfig+0x1f4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c8c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002c90:	d068      	beq.n	8002d64 <UART_SetConfig+0x1dc>
 8002c92:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8002c96:	d1f5      	bne.n	8002c84 <UART_SetConfig+0xfc>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002c98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if(UART_INSTANCE_LOWPOWER(huart))
 8002c9c:	2508      	movs	r5, #8
 8002c9e:	e068      	b.n	8002d72 <UART_SetConfig+0x1ea>
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8002ca0:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002ca4:	d86a      	bhi.n	8002d7c <UART_SetConfig+0x1f4>
        switch (clocksource)
 8002ca6:	2d08      	cmp	r5, #8
 8002ca8:	d82e      	bhi.n	8002d08 <UART_SetConfig+0x180>
 8002caa:	e8df f005 	tbb	[pc, r5]
 8002cae:	2d05      	.short	0x2d05
 8002cb0:	2d242d1c 	.word	0x2d242d1c
 8002cb4:	2d2d      	.short	0x2d2d
 8002cb6:	27          	.byte	0x27
 8002cb7:	00          	.byte	0x00
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002cb8:	f7ff fb54 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002cbc:	6862      	ldr	r2, [r4, #4]
 8002cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cc2:	0856      	lsrs	r6, r2, #1
 8002cc4:	2700      	movs	r7, #0
 8002cc6:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002cca:	2300      	movs	r3, #0
 8002ccc:	4630      	mov	r0, r6
 8002cce:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002cd0:	f7fd ffb6 	bl	8000c40 <__aeabi_uldivmod>
          break;
 8002cd4:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cd6:	4b57      	ldr	r3, [pc, #348]	; (8002e34 <UART_SetConfig+0x2ac>)
 8002cd8:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002cdc:	4299      	cmp	r1, r3
 8002cde:	d84d      	bhi.n	8002d7c <UART_SetConfig+0x1f4>
          huart->Instance->BRR = usartdiv;
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	60d8      	str	r0, [r3, #12]
 8002ce4:	e04b      	b.n	8002d7e <UART_SetConfig+0x1f6>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002ce6:	4854      	ldr	r0, [pc, #336]	; (8002e38 <UART_SetConfig+0x2b0>)
 8002ce8:	0855      	lsrs	r5, r2, #1
 8002cea:	2300      	movs	r3, #0
 8002cec:	2100      	movs	r1, #0
 8002cee:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002cf0:	f141 0100 	adc.w	r1, r1, #0
 8002cf4:	e7ec      	b.n	8002cd0 <UART_SetConfig+0x148>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002cf6:	f7fe ffb5 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8002cfa:	e7df      	b.n	8002cbc <UART_SetConfig+0x134>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002cfc:	0850      	lsrs	r0, r2, #1
 8002cfe:	2100      	movs	r1, #0
 8002d00:	2300      	movs	r3, #0
 8002d02:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002d06:	e7f3      	b.n	8002cf0 <UART_SetConfig+0x168>
          ret = HAL_ERROR;
 8002d08:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	e7e3      	b.n	8002cd6 <UART_SetConfig+0x14e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d0e:	f7ff fb39 	bl	8002384 <HAL_RCC_GetPCLK2Freq>
 8002d12:	e042      	b.n	8002d9a <UART_SetConfig+0x212>
    {
    case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d14:	f7ff fb26 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d18:	6862      	ldr	r2, [r4, #4]
 8002d1a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002d1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d22:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d24:	2200      	movs	r2, #0
      ret = HAL_ERROR;
      break;
    }
    
    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d26:	f1a3 0010 	sub.w	r0, r3, #16
 8002d2a:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002d2e:	4288      	cmp	r0, r1
 8002d30:	d824      	bhi.n	8002d7c <UART_SetConfig+0x1f4>
    {
      huart->Instance->BRR = usartdiv;
 8002d32:	6821      	ldr	r1, [r4, #0]
 8002d34:	60cb      	str	r3, [r1, #12]
 8002d36:	e022      	b.n	8002d7e <UART_SetConfig+0x1f6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d38:	f7ff fb24 	bl	8002384 <HAL_RCC_GetPCLK2Freq>
 8002d3c:	e7ec      	b.n	8002d18 <UART_SetConfig+0x190>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d3e:	6860      	ldr	r0, [r4, #4]
 8002d40:	0843      	lsrs	r3, r0, #1
 8002d42:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002d46:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d4a:	fbb3 f3f0 	udiv	r3, r3, r0
 8002d4e:	e7e8      	b.n	8002d22 <UART_SetConfig+0x19a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d50:	f7fe ff88 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8002d54:	e7e0      	b.n	8002d18 <UART_SetConfig+0x190>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d56:	6860      	ldr	r0, [r4, #4]
 8002d58:	0843      	lsrs	r3, r0, #1
 8002d5a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002d5e:	e7f4      	b.n	8002d4a <UART_SetConfig+0x1c2>
 8002d60:	4602      	mov	r2, r0
 8002d62:	e00c      	b.n	8002d7e <UART_SetConfig+0x1f6>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002d64:	4835      	ldr	r0, [pc, #212]	; (8002e3c <UART_SetConfig+0x2b4>)
  if(UART_INSTANCE_LOWPOWER(huart))
 8002d66:	2502      	movs	r5, #2
 8002d68:	e003      	b.n	8002d72 <UART_SetConfig+0x1ea>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002d6a:	f7ff fafb 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	d0f6      	beq.n	8002d60 <UART_SetConfig+0x1d8>
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8002d72:	6862      	ldr	r2, [r4, #4]
 8002d74:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002d78:	4283      	cmp	r3, r0
 8002d7a:	d991      	bls.n	8002ca0 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8002d7c:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002d82:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 8002d84:	4610      	mov	r0, r2
 8002d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002d88:	f7fe ff6c 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
      break;
 8002d8c:	2504      	movs	r5, #4
 8002d8e:	e7ee      	b.n	8002d6e <UART_SetConfig+0x1e6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d90:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002d94:	d1be      	bne.n	8002d14 <UART_SetConfig+0x18c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d96:	f7ff fae5 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d9a:	6861      	ldr	r1, [r4, #4]
 8002d9c:	084a      	lsrs	r2, r1, #1
 8002d9e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002da6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002da8:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002daa:	f1a3 0010 	sub.w	r0, r3, #16
 8002dae:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002db2:	4288      	cmp	r0, r1
 8002db4:	d8e2      	bhi.n	8002d7c <UART_SetConfig+0x1f4>
      brrtemp = usartdiv & 0xFFF0U;
 8002db6:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002dba:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dbc:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	60c3      	str	r3, [r0, #12]
 8002dc4:	e7db      	b.n	8002d7e <UART_SetConfig+0x1f6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dc6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002dca:	d1b8      	bne.n	8002d3e <UART_SetConfig+0x1b6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002dcc:	6860      	ldr	r0, [r4, #4]
 8002dce:	0843      	lsrs	r3, r0, #1
 8002dd0:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002dd4:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002dd8:	fbb3 f3f0 	udiv	r3, r3, r0
 8002ddc:	e7e3      	b.n	8002da6 <UART_SetConfig+0x21e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dde:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002de2:	d1b5      	bne.n	8002d50 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002de4:	f7fe ff3e 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8002de8:	e7d7      	b.n	8002d9a <UART_SetConfig+0x212>
    switch (clocksource)
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d8c6      	bhi.n	8002d7c <UART_SetConfig+0x1f4>
 8002dee:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <UART_SetConfig+0x26c>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002d15 	.word	0x08002d15
 8002df8:	08002d39 	.word	0x08002d39
 8002dfc:	08002d3f 	.word	0x08002d3f
 8002e00:	08002d7d 	.word	0x08002d7d
 8002e04:	08002d51 	.word	0x08002d51
 8002e08:	08002d7d 	.word	0x08002d7d
 8002e0c:	08002d7d 	.word	0x08002d7d
 8002e10:	08002d7d 	.word	0x08002d7d
 8002e14:	08002d57 	.word	0x08002d57
 8002e18:	efff69f3 	.word	0xefff69f3
 8002e1c:	40008000 	.word	0x40008000
 8002e20:	40013800 	.word	0x40013800
 8002e24:	080067e0 	.word	0x080067e0
 8002e28:	40004400 	.word	0x40004400
 8002e2c:	080067e4 	.word	0x080067e4
 8002e30:	40004800 	.word	0x40004800
 8002e34:	000ffcff 	.word	0x000ffcff
 8002e38:	f4240000 	.word	0xf4240000
 8002e3c:	00f42400 	.word	0x00f42400

08002e40 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002e42:	07da      	lsls	r2, r3, #31
{
 8002e44:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e46:	d506      	bpl.n	8002e56 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e48:	6801      	ldr	r1, [r0, #0]
 8002e4a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002e4c:	684a      	ldr	r2, [r1, #4]
 8002e4e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002e52:	4322      	orrs	r2, r4
 8002e54:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e56:	079c      	lsls	r4, r3, #30
 8002e58:	d506      	bpl.n	8002e68 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e5a:	6801      	ldr	r1, [r0, #0]
 8002e5c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002e5e:	684a      	ldr	r2, [r1, #4]
 8002e60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e64:	4322      	orrs	r2, r4
 8002e66:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e68:	0759      	lsls	r1, r3, #29
 8002e6a:	d506      	bpl.n	8002e7a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e6c:	6801      	ldr	r1, [r0, #0]
 8002e6e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002e70:	684a      	ldr	r2, [r1, #4]
 8002e72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e76:	4322      	orrs	r2, r4
 8002e78:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e7a:	071a      	lsls	r2, r3, #28
 8002e7c:	d506      	bpl.n	8002e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e7e:	6801      	ldr	r1, [r0, #0]
 8002e80:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002e82:	684a      	ldr	r2, [r1, #4]
 8002e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e88:	4322      	orrs	r2, r4
 8002e8a:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e8c:	06dc      	lsls	r4, r3, #27
 8002e8e:	d506      	bpl.n	8002e9e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e90:	6801      	ldr	r1, [r0, #0]
 8002e92:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002e94:	688a      	ldr	r2, [r1, #8]
 8002e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e9a:	4322      	orrs	r2, r4
 8002e9c:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e9e:	0699      	lsls	r1, r3, #26
 8002ea0:	d506      	bpl.n	8002eb0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ea2:	6801      	ldr	r1, [r0, #0]
 8002ea4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002ea6:	688a      	ldr	r2, [r1, #8]
 8002ea8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eac:	4322      	orrs	r2, r4
 8002eae:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002eb0:	065a      	lsls	r2, r3, #25
 8002eb2:	d50f      	bpl.n	8002ed4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002eb4:	6801      	ldr	r1, [r0, #0]
 8002eb6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002eb8:	684a      	ldr	r2, [r1, #4]
 8002eba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002ebe:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ec0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ec4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ec6:	d105      	bne.n	8002ed4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ec8:	684a      	ldr	r2, [r1, #4]
 8002eca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ecc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002ed0:	4322      	orrs	r2, r4
 8002ed2:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	d506      	bpl.n	8002ee6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ed8:	6802      	ldr	r2, [r0, #0]
 8002eda:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002edc:	6853      	ldr	r3, [r2, #4]
 8002ede:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	6053      	str	r3, [r2, #4]
 8002ee6:	bd10      	pop	{r4, pc}

08002ee8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eec:	9d06      	ldr	r5, [sp, #24]
 8002eee:	4604      	mov	r4, r0
 8002ef0:	460f      	mov	r7, r1
 8002ef2:	4616      	mov	r6, r2
 8002ef4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef6:	6821      	ldr	r1, [r4, #0]
 8002ef8:	69ca      	ldr	r2, [r1, #28]
 8002efa:	ea37 0302 	bics.w	r3, r7, r2
 8002efe:	bf0c      	ite	eq
 8002f00:	2201      	moveq	r2, #1
 8002f02:	2200      	movne	r2, #0
 8002f04:	42b2      	cmp	r2, r6
 8002f06:	d002      	beq.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002f08:	2000      	movs	r0, #0
}
 8002f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002f0e:	1c6b      	adds	r3, r5, #1
 8002f10:	d0f2      	beq.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002f12:	b99d      	cbnz	r5, 8002f3c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002f26:	2320      	movs	r3, #32
 8002f28:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002f2c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002f30:	2300      	movs	r3, #0
 8002f32:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002f36:	2003      	movs	r0, #3
 8002f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002f3c:	f7fe f830 	bl	8000fa0 <HAL_GetTick>
 8002f40:	eba0 0008 	sub.w	r0, r0, r8
 8002f44:	4285      	cmp	r5, r0
 8002f46:	d2d6      	bcs.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xe>
 8002f48:	e7e4      	b.n	8002f14 <UART_WaitOnFlagUntilTimeout+0x2c>

08002f4a <HAL_UART_Transmit>:
{
 8002f4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002f4e:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002f50:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002f54:	2b20      	cmp	r3, #32
{
 8002f56:	4604      	mov	r4, r0
 8002f58:	460d      	mov	r5, r1
 8002f5a:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002f5c:	d14a      	bne.n	8002ff4 <HAL_UART_Transmit+0xaa>
    if((pData == NULL ) || (Size == 0U))
 8002f5e:	2900      	cmp	r1, #0
 8002f60:	d046      	beq.n	8002ff0 <HAL_UART_Transmit+0xa6>
 8002f62:	2a00      	cmp	r2, #0
 8002f64:	d044      	beq.n	8002ff0 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002f66:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d042      	beq.n	8002ff4 <HAL_UART_Transmit+0xaa>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f78:	2321      	movs	r3, #33	; 0x21
 8002f7a:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8002f7e:	f7fe f80f 	bl	8000fa0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002f82:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002f86:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002f88:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002f8c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f90:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 8002f92:	b292      	uxth	r2, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f94:	4633      	mov	r3, r6
    while(huart->TxXferCount > 0U)
 8002f96:	b952      	cbnz	r2, 8002fae <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f98:	2140      	movs	r1, #64	; 0x40
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f7ff ffa4 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8002fa0:	b958      	cbnz	r0, 8002fba <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8002fa8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002fac:	e006      	b.n	8002fbc <HAL_UART_Transmit+0x72>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f7ff ff98 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8002fb8:	b118      	cbz	r0, 8002fc2 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8002fba:	2003      	movs	r0, #3
}
 8002fbc:	b002      	add	sp, #8
 8002fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc2:	68a3      	ldr	r3, [r4, #8]
 8002fc4:	6822      	ldr	r2, [r4, #0]
 8002fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fca:	d10d      	bne.n	8002fe8 <HAL_UART_Transmit+0x9e>
 8002fcc:	6923      	ldr	r3, [r4, #16]
 8002fce:	b95b      	cbnz	r3, 8002fe8 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002fd0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd8:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002fda:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002fe6:	e7d1      	b.n	8002f8c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002fe8:	782b      	ldrb	r3, [r5, #0]
 8002fea:	8513      	strh	r3, [r2, #40]	; 0x28
 8002fec:	3501      	adds	r5, #1
 8002fee:	e7f4      	b.n	8002fda <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	e7e3      	b.n	8002fbc <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8002ff4:	2002      	movs	r0, #2
 8002ff6:	e7e1      	b.n	8002fbc <HAL_UART_Transmit+0x72>

08002ff8 <UART_CheckIdleState>:
{
 8002ff8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ffa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffc:	2600      	movs	r6, #0
 8002ffe:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8003000:	f7fd ffce 	bl	8000fa0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800300a:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800300c:	d417      	bmi.n	800303e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	075b      	lsls	r3, r3, #29
 8003014:	d50a      	bpl.n	800302c <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003016:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2200      	movs	r2, #0
 800301e:	462b      	mov	r3, r5
 8003020:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003024:	4620      	mov	r0, r4
 8003026:	f7ff ff5f 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 800302a:	b9a0      	cbnz	r0, 8003056 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 800302c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800302e:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8003030:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8003034:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 8003038:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800303c:	e00c      	b.n	8003058 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800303e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	4632      	mov	r2, r6
 8003046:	4603      	mov	r3, r0
 8003048:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800304c:	4620      	mov	r0, r4
 800304e:	f7ff ff4b 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8003052:	2800      	cmp	r0, #0
 8003054:	d0db      	beq.n	800300e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003056:	2003      	movs	r0, #3
}
 8003058:	b002      	add	sp, #8
 800305a:	bd70      	pop	{r4, r5, r6, pc}

0800305c <HAL_UART_Init>:
{
 800305c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800305e:	4604      	mov	r4, r0
 8003060:	b360      	cbz	r0, 80030bc <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003062:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003066:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800306a:	b91b      	cbnz	r3, 8003074 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800306c:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003070:	f000 fc30 	bl	80038d4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003074:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003076:	2324      	movs	r3, #36	; 0x24
 8003078:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800307c:	6813      	ldr	r3, [r2, #0]
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003084:	4620      	mov	r0, r4
 8003086:	f7ff fd7f 	bl	8002b88 <UART_SetConfig>
 800308a:	2801      	cmp	r0, #1
 800308c:	d016      	beq.n	80030bc <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800308e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003090:	b113      	cbz	r3, 8003098 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003092:	4620      	mov	r0, r4
 8003094:	f7ff fed4 	bl	8002e40 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030a8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80030b0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80030b2:	601a      	str	r2, [r3, #0]
}
 80030b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80030b8:	f7ff bf9e 	b.w	8002ff8 <UART_CheckIdleState>
}
 80030bc:	2001      	movs	r0, #1
 80030be:	bd10      	pop	{r4, pc}

080030c0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80030c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80030c2:	4819      	ldr	r0, [pc, #100]	; (8003128 <MX_ADC1_Init+0x68>)
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <MX_ADC1_Init+0x6c>)
 80030c6:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80030c8:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80030ca:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80030cc:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 80030ce:	2201      	movs	r2, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80030d0:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80030d2:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030d4:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80030d6:	6103      	str	r3, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80030d8:	6183      	str	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80030da:	61c3      	str	r3, [r0, #28]
  hadc1.Init.NbrOfConversion = 1;
 80030dc:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030de:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 80030e0:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030e4:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80030e6:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030e8:	6383      	str	r3, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80030ea:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80030ec:	f7fd ff94 	bl	8001018 <HAL_ADC_Init>
 80030f0:	b118      	cbz	r0, 80030fa <MX_ADC1_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030f2:	214c      	movs	r1, #76	; 0x4c
 80030f4:	480e      	ldr	r0, [pc, #56]	; (8003130 <MX_ADC1_Init+0x70>)
 80030f6:	f000 fad1 	bl	800369c <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030fa:	4a0e      	ldr	r2, [pc, #56]	; (8003134 <MX_ADC1_Init+0x74>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030fc:	480a      	ldr	r0, [pc, #40]	; (8003128 <MX_ADC1_Init+0x68>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030fe:	2306      	movs	r3, #6
 8003100:	e88d 000c 	stmia.w	sp, {r2, r3}
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003104:	227f      	movs	r2, #127	; 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003106:	2300      	movs	r3, #0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003108:	9203      	str	r2, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800310a:	4669      	mov	r1, sp
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800310c:	2204      	movs	r2, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800310e:	9302      	str	r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003110:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 8003112:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003114:	f7fe f89e 	bl	8001254 <HAL_ADC_ConfigChannel>
 8003118:	b118      	cbz	r0, 8003122 <MX_ADC1_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 800311a:	2159      	movs	r1, #89	; 0x59
 800311c:	4804      	ldr	r0, [pc, #16]	; (8003130 <MX_ADC1_Init+0x70>)
 800311e:	f000 fabd 	bl	800369c <_Error_Handler>
  }

}
 8003122:	b007      	add	sp, #28
 8003124:	f85d fb04 	ldr.w	pc, [sp], #4
 8003128:	200006cc 	.word	0x200006cc
 800312c:	50040000 	.word	0x50040000
 8003130:	080067f1 	.word	0x080067f1
 8003134:	14f00020 	.word	0x14f00020

08003138 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003138:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 800313a:	6802      	ldr	r2, [r0, #0]
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HAL_ADC_MspInit+0x40>)
 800313e:	429a      	cmp	r2, r3
 8003140:	d117      	bne.n	8003172 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003142:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003146:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PA1     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314a:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 800314c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800314e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003152:	64da      	str	r2, [r3, #76]	; 0x4c
 8003154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800315e:	2303      	movs	r3, #3
 8003160:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003162:	230b      	movs	r3, #11
 8003164:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316a:	2300      	movs	r3, #0
 800316c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316e:	f7fe fc2f 	bl	80019d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003172:	b007      	add	sp, #28
 8003174:	f85d fb04 	ldr.w	pc, [sp], #4
 8003178:	50040000 	.word	0x50040000

0800317c <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800317c:	4b13      	ldr	r3, [pc, #76]	; (80031cc <MX_GPIO_Init+0x50>)
{
 800317e:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003180:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Trigger_Pin, GPIO_PIN_RESET);
 8003182:	4c13      	ldr	r4, [pc, #76]	; (80031d0 <MX_GPIO_Init+0x54>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	64da      	str	r2, [r3, #76]	; 0x4c
 800318a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 800318c:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800318e:	f002 0201 	and.w	r2, r2, #1
 8003192:	9201      	str	r2, [sp, #4]
 8003194:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003196:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003198:	f042 0202 	orr.w	r2, r2, #2
 800319c:	64da      	str	r2, [r3, #76]	; 0x4c
 800319e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Trigger_Pin, GPIO_PIN_RESET);
 80031a6:	2200      	movs	r2, #0
 80031a8:	4620      	mov	r0, r4
 80031aa:	2103      	movs	r1, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ac:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Trigger_Pin, GPIO_PIN_RESET);
 80031ae:	f7fe fcd1 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Trigger_Pin;
 80031b2:	2303      	movs	r3, #3
 80031b4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b6:	2301      	movs	r3, #1
 80031b8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ba:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031bc:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c0:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c4:	f7fe fc04 	bl	80019d0 <HAL_GPIO_Init>

}
 80031c8:	b008      	add	sp, #32
 80031ca:	bd10      	pop	{r4, pc}
 80031cc:	40021000 	.word	0x40021000
 80031d0:	48000400 	.word	0x48000400

080031d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d4:	b530      	push	{r4, r5, lr}
 80031d6:	b0af      	sub	sp, #188	; 0xbc
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80031d8:	2318      	movs	r3, #24
 80031da:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80031dc:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80031de:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80031e0:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031e2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80031e4:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80031e6:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80031e8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80031ea:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80031ec:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ee:	f7fe fda1 	bl	8001d34 <HAL_RCC_OscConfig>
 80031f2:	4601      	mov	r1, r0
 80031f4:	b100      	cbz	r0, 80031f8 <SystemClock_Config+0x24>
 80031f6:	e7fe      	b.n	80031f6 <SystemClock_Config+0x22>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031f8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80031fa:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031fc:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031fe:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003200:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003202:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003204:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003206:	f7fe fff1 	bl	80021ec <HAL_RCC_ClockConfig>
 800320a:	b100      	cbz	r0, 800320e <SystemClock_Config+0x3a>
 800320c:	e7fe      	b.n	800320c <SystemClock_Config+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 800320e:	4b19      	ldr	r3, [pc, #100]	; (8003274 <SystemClock_Config+0xa0>)
 8003210:	9317      	str	r3, [sp, #92]	; 0x5c
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003212:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003216:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003218:	2310      	movs	r3, #16
 800321a:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800321c:	2307      	movs	r3, #7
 800321e:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003220:	2302      	movs	r3, #2
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003222:	901f      	str	r0, [sp, #124]	; 0x7c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003224:	f44f 7500 	mov.w	r5, #512	; 0x200
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003228:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800322a:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800322c:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800322e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003232:	952d      	str	r5, [sp, #180]	; 0xb4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003234:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003236:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003238:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800323a:	f7ff f93f 	bl	80024bc <HAL_RCCEx_PeriphCLKConfig>
 800323e:	b100      	cbz	r0, 8003242 <SystemClock_Config+0x6e>
 8003240:	e7fe      	b.n	8003240 <SystemClock_Config+0x6c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003242:	4628      	mov	r0, r5
 8003244:	f7fe fc98 	bl	8001b78 <HAL_PWREx_ControlVoltageScaling>
 8003248:	4604      	mov	r4, r0
 800324a:	b100      	cbz	r0, 800324e <SystemClock_Config+0x7a>
 800324c:	e7fe      	b.n	800324c <SystemClock_Config+0x78>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800324e:	f7ff f883 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 8003252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003256:	fbb0 f0f3 	udiv	r0, r0, r3
 800325a:	f7fe fb91 	bl	8001980 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800325e:	2004      	movs	r0, #4
 8003260:	f7fe fba4 	bl	80019ac <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003264:	4622      	mov	r2, r4
 8003266:	4621      	mov	r1, r4
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	f7fe fb48 	bl	8001900 <HAL_NVIC_SetPriority>
}
 8003270:	b02f      	add	sp, #188	; 0xbc
 8003272:	bd30      	pop	{r4, r5, pc}
 8003274:	00024001 	.word	0x00024001

08003278 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
	HAL_GPIO_TogglePin(GPIOB, Trigger_Pin);
 8003278:	2102      	movs	r1, #2
 800327a:	4801      	ldr	r0, [pc, #4]	; (8003280 <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 800327c:	f7fe bc6f 	b.w	8001b5e <HAL_GPIO_TogglePin>
 8003280:	48000400 	.word	0x48000400

08003284 <Mensa_debug_Usart1>:
	return;
}

void Mensa_debug_Usart1(char texto[32])
{
 8003284:	b510      	push	{r4, lr}
 8003286:	4604      	mov	r4, r0
	if(HAL_UART_Transmit(&huart1, (uint8_t*) texto, strlen(texto), 1000)!= HAL_OK)
 8003288:	f7fc ffa2 	bl	80001d0 <strlen>
 800328c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003290:	b282      	uxth	r2, r0
 8003292:	4621      	mov	r1, r4
 8003294:	4804      	ldr	r0, [pc, #16]	; (80032a8 <Mensa_debug_Usart1+0x24>)
 8003296:	f7ff fe58 	bl	8002f4a <HAL_UART_Transmit>
 800329a:	b100      	cbz	r0, 800329e <Mensa_debug_Usart1+0x1a>
 800329c:	e7fe      	b.n	800329c <Mensa_debug_Usart1+0x18>
	{
		Error_Handler2();
	}
	HAL_Delay (50); // si se usa en CALLBACK el Delay cuelga el micro.
 800329e:	2032      	movs	r0, #50	; 0x32
	//if used in CALLBACK the Delay hangs the microphone
	return;
}
 80032a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay (50); // si se usa en CALLBACK el Delay cuelga el micro.
 80032a4:	f7fd be82 	b.w	8000fac <HAL_Delay>
 80032a8:	20000758 	.word	0x20000758

080032ac <Read_Analog_Value>:
  { }
}

//*** FOR READING IN ANALOG VALUES *** //
uint16_t Read_Analog_Value(void)
{
 80032ac:	b538      	push	{r3, r4, r5, lr}
	uint16_t valor_analog;

	HAL_ADC_Start(&hadc1);
 80032ae:	4c08      	ldr	r4, [pc, #32]	; (80032d0 <Read_Analog_Value+0x24>)
 80032b0:	4620      	mov	r0, r4
 80032b2:	f7fe fa75 	bl	80017a0 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK)
 80032b6:	210a      	movs	r1, #10
 80032b8:	4620      	mov	r0, r4
 80032ba:	f7fd ff79 	bl	80011b0 <HAL_ADC_PollForConversion>
	{}
	valor_analog = HAL_ADC_GetValue(&hadc1);
 80032be:	4620      	mov	r0, r4
 80032c0:	f7fd ffc4 	bl	800124c <HAL_ADC_GetValue>
 80032c4:	4605      	mov	r5, r0
	//HAL_Delay(100);
	HAL_ADC_Stop(&hadc1);
 80032c6:	4620      	mov	r0, r4
 80032c8:	f7fe fae9 	bl	800189e <HAL_ADC_Stop>
	return valor_analog ;
}
 80032cc:	b2a8      	uxth	r0, r5
 80032ce:	bd38      	pop	{r3, r4, r5, pc}
 80032d0:	200006cc 	.word	0x200006cc
 80032d4:	00000000 	.word	0x00000000

080032d8 <main>:
{
 80032d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032dc:	ed2d 8b02 	vpush	{d8}
 80032e0:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80032e2:	f7fd fe49 	bl	8000f78 <HAL_Init>
  SystemClock_Config();
 80032e6:	f7ff ff75 	bl	80031d4 <SystemClock_Config>
  MX_GPIO_Init();
 80032ea:	f7ff ff47 	bl	800317c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80032ee:	f000 facf 	bl	8003890 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80032f2:	f7ff fee5 	bl	80030c0 <MX_ADC1_Init>
  MX_RTC_Init();
 80032f6:	f000 f9d3 	bl	80036a0 <MX_RTC_Init>
  Mensa_debug_Usart1("----------Start ---------- \n ");
 80032fa:	48cb      	ldr	r0, [pc, #812]	; (8003628 <main+0x350>)
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80032fc:	4fcb      	ldr	r7, [pc, #812]	; (800362c <main+0x354>)
  Mensa_debug_Usart1("----------Start ---------- \n ");
 80032fe:	f7ff ffc1 	bl	8003284 <Mensa_debug_Usart1>
		  VADC = (VDU + 57.225)/(1212.3); // DU to VADC, from Excel plot
 8003302:	f20f 2b54 	addw	fp, pc, #596	; 0x254
 8003306:	e9db ab00 	ldrd	sl, fp, [fp]
		  HAL_Delay (100); // Time taken to reach ADC
 800330a:	2064      	movs	r0, #100	; 0x64
 800330c:	f7fd fe4e 	bl	8000fac <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8003310:	2201      	movs	r2, #1
 8003312:	4611      	mov	r1, r2
 8003314:	4638      	mov	r0, r7
 8003316:	f7fe fc1d 	bl	8001b54 <HAL_GPIO_WritePin>
		  HAL_Delay (50);
 800331a:	2032      	movs	r0, #50	; 0x32
 800331c:	f7fd fe46 	bl	8000fac <HAL_Delay>
 8003320:	ed9f 8ac3 	vldr	s16, [pc, #780]	; 8003630 <main+0x358>
 8003324:	240f      	movs	r4, #15
			  ADC_SamplesV [N] = Read_Analog_Value();
 8003326:	f7ff ffc1 	bl	80032ac <Read_Analog_Value>
			  V_Avg += ADC_SamplesV [N]; // adds DU to array
 800332a:	ee07 0a90 	vmov	s15, r0
 800332e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			  HAL_Delay(1);
 8003332:	2001      	movs	r0, #1
			  V_Avg += ADC_SamplesV [N]; // adds DU to array
 8003334:	ee38 8a27 	vadd.f32	s16, s16, s15
			  HAL_Delay(1);
 8003338:	f7fd fe38 	bl	8000fac <HAL_Delay>
		  for(N = 0; N < 15; N++){
 800333c:	3c01      	subs	r4, #1
 800333e:	d1f2      	bne.n	8003326 <main+0x4e>
		  VADC = (VDU + 57.225)/(1212.3); // DU to VADC, from Excel plot
 8003340:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8003344:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003348:	ee17 0a10 	vmov	r0, s14
 800334c:	f7fd f8fc 	bl	8000548 <__aeabi_f2d>
 8003350:	a383      	add	r3, pc, #524	; (adr r3, 8003560 <main+0x288>)
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	4680      	mov	r8, r0
 8003358:	4689      	mov	r9, r1
 800335a:	f7fc ff97 	bl	800028c <__adddf3>
 800335e:	4652      	mov	r2, sl
 8003360:	465b      	mov	r3, fp
 8003362:	f7fd fa6f 	bl	8000844 <__aeabi_ddiv>
 8003366:	f7fd fc1b 	bl	8000ba0 <__aeabi_d2f>
 800336a:	ee08 0a10 	vmov	s16, r0
		  if (VADC < 3.263 && VADC >=  3.067){ // 4-6V
 800336e:	f7fd f8eb 	bl	8000548 <__aeabi_f2d>
 8003372:	a37d      	add	r3, pc, #500	; (adr r3, 8003568 <main+0x290>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	4604      	mov	r4, r0
 800337a:	460d      	mov	r5, r1
 800337c:	f7fd fbaa 	bl	8000ad4 <__aeabi_dcmplt>
 8003380:	2800      	cmp	r0, #0
 8003382:	d04a      	beq.n	800341a <main+0x142>
 8003384:	a37a      	add	r3, pc, #488	; (adr r3, 8003570 <main+0x298>)
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	4620      	mov	r0, r4
 800338c:	4629      	mov	r1, r5
 800338e:	f7fd fbb5 	bl	8000afc <__aeabi_dcmpge>
 8003392:	2800      	cmp	r0, #0
 8003394:	d041      	beq.n	800341a <main+0x142>
			  Vdd = ((VADC - 3.5862)/(-0.0935))+ 0.55;
 8003396:	a378      	add	r3, pc, #480	; (adr r3, 8003578 <main+0x2a0>)
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	4620      	mov	r0, r4
 800339e:	4629      	mov	r1, r5
 80033a0:	f7fc ff72 	bl	8000288 <__aeabi_dsub>
 80033a4:	a376      	add	r3, pc, #472	; (adr r3, 8003580 <main+0x2a8>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fd fa4b 	bl	8000844 <__aeabi_ddiv>
 80033ae:	a376      	add	r3, pc, #472	; (adr r3, 8003588 <main+0x2b0>)
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
			  Vdd = ((VADC - 3.6587)/(-0.1079)) + 0.47;
 80033b4:	f7fc ff6a 	bl	800028c <__adddf3>
			  Vdd = ((VADC - 3.999)/(-0.146));
 80033b8:	f7fd fbf2 	bl	8000ba0 <__aeabi_d2f>
 80033bc:	4606      	mov	r6, r0
		  if (Vdd < 3.8 || Vdd > 24.2){
 80033be:	4630      	mov	r0, r6
 80033c0:	f7fd f8c2 	bl	8000548 <__aeabi_f2d>
 80033c4:	a372      	add	r3, pc, #456	; (adr r3, 8003590 <main+0x2b8>)
 80033c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ca:	4604      	mov	r4, r0
 80033cc:	460d      	mov	r5, r1
 80033ce:	f7fd fb81 	bl	8000ad4 <__aeabi_dcmplt>
 80033d2:	b948      	cbnz	r0, 80033e8 <main+0x110>
 80033d4:	a370      	add	r3, pc, #448	; (adr r3, 8003598 <main+0x2c0>)
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	4620      	mov	r0, r4
 80033dc:	4629      	mov	r1, r5
 80033de:	f7fd fb97 	bl	8000b10 <__aeabi_dcmpgt>
 80033e2:	2800      	cmp	r0, #0
 80033e4:	f000 8142 	beq.w	800366c <main+0x394>
			  sprintf(aTxBuffer, "Out of range: value is inaccurate \n  ");
 80033e8:	4992      	ldr	r1, [pc, #584]	; (8003634 <main+0x35c>)
 80033ea:	4668      	mov	r0, sp
 80033ec:	f000 fb0a 	bl	8003a04 <strcpy>
	  		  Mensa_debug_Usart1(aTxBuffer);
 80033f0:	4668      	mov	r0, sp
 80033f2:	f7ff ff47 	bl	8003284 <Mensa_debug_Usart1>
		  sprintf(aTxBuffer, "VDU = %4.0f \n", VDU);
 80033f6:	4642      	mov	r2, r8
 80033f8:	464b      	mov	r3, r9
 80033fa:	498f      	ldr	r1, [pc, #572]	; (8003638 <main+0x360>)
 80033fc:	4668      	mov	r0, sp
 80033fe:	f000 fadd 	bl	80039bc <sprintf>
		  Mensa_debug_Usart1(aTxBuffer);
 8003402:	4668      	mov	r0, sp
 8003404:	f7ff ff3e 	bl	8003284 <Mensa_debug_Usart1>
		  HAL_Delay(100);
 8003408:	2064      	movs	r0, #100	; 0x64
 800340a:	f7fd fdcf 	bl	8000fac <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Trigger off transistor
 800340e:	2201      	movs	r2, #1
 8003410:	2102      	movs	r1, #2
 8003412:	4638      	mov	r0, r7
 8003414:	f7fe fb9e 	bl	8001b54 <HAL_GPIO_WritePin>
		  HAL_Delay (100); // Time taken to reach ADC
 8003418:	e777      	b.n	800330a <main+0x32>
		  else if (VADC < 3.067 && VADC >= 2.843 ){ // 6-8V
 800341a:	a355      	add	r3, pc, #340	; (adr r3, 8003570 <main+0x298>)
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	4620      	mov	r0, r4
 8003422:	4629      	mov	r1, r5
 8003424:	f7fd fb56 	bl	8000ad4 <__aeabi_dcmplt>
 8003428:	b1b8      	cbz	r0, 800345a <main+0x182>
 800342a:	a35d      	add	r3, pc, #372	; (adr r3, 80035a0 <main+0x2c8>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	4620      	mov	r0, r4
 8003432:	4629      	mov	r1, r5
 8003434:	f7fd fb62 	bl	8000afc <__aeabi_dcmpge>
 8003438:	b178      	cbz	r0, 800345a <main+0x182>
			  Vdd = ((VADC - 3.6587)/(-0.1079)) + 0.47;
 800343a:	a35b      	add	r3, pc, #364	; (adr r3, 80035a8 <main+0x2d0>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	4620      	mov	r0, r4
 8003442:	4629      	mov	r1, r5
 8003444:	f7fc ff20 	bl	8000288 <__aeabi_dsub>
 8003448:	a359      	add	r3, pc, #356	; (adr r3, 80035b0 <main+0x2d8>)
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f7fd f9f9 	bl	8000844 <__aeabi_ddiv>
 8003452:	a359      	add	r3, pc, #356	; (adr r3, 80035b8 <main+0x2e0>)
 8003454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003458:	e7ac      	b.n	80033b4 <main+0xdc>
		  else if (VADC < 2.843 && VADC >= 2.588){ // 8-10V
 800345a:	a351      	add	r3, pc, #324	; (adr r3, 80035a0 <main+0x2c8>)
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	4620      	mov	r0, r4
 8003462:	4629      	mov	r1, r5
 8003464:	f7fd fb36 	bl	8000ad4 <__aeabi_dcmplt>
 8003468:	b1b8      	cbz	r0, 800349a <main+0x1c2>
 800346a:	a355      	add	r3, pc, #340	; (adr r3, 80035c0 <main+0x2e8>)
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	4620      	mov	r0, r4
 8003472:	4629      	mov	r1, r5
 8003474:	f7fd fb42 	bl	8000afc <__aeabi_dcmpge>
 8003478:	b178      	cbz	r0, 800349a <main+0x1c2>
			  Vdd = ((VADC - 3.8133)/(-0.127)) + 0.45;
 800347a:	a353      	add	r3, pc, #332	; (adr r3, 80035c8 <main+0x2f0>)
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	4620      	mov	r0, r4
 8003482:	4629      	mov	r1, r5
 8003484:	f7fc ff00 	bl	8000288 <__aeabi_dsub>
 8003488:	a351      	add	r3, pc, #324	; (adr r3, 80035d0 <main+0x2f8>)
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	f7fd f9d9 	bl	8000844 <__aeabi_ddiv>
 8003492:	a351      	add	r3, pc, #324	; (adr r3, 80035d8 <main+0x300>)
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	e78c      	b.n	80033b4 <main+0xdc>
		  else if (VADC < 2.588 && VADC >= 1.716){ // 10-16V
 800349a:	a349      	add	r3, pc, #292	; (adr r3, 80035c0 <main+0x2e8>)
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	4620      	mov	r0, r4
 80034a2:	4629      	mov	r1, r5
 80034a4:	f7fd fb16 	bl	8000ad4 <__aeabi_dcmplt>
 80034a8:	b1c0      	cbz	r0, 80034dc <main+0x204>
 80034aa:	a34d      	add	r3, pc, #308	; (adr r3, 80035e0 <main+0x308>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	4620      	mov	r0, r4
 80034b2:	4629      	mov	r1, r5
 80034b4:	f7fd fb22 	bl	8000afc <__aeabi_dcmpge>
 80034b8:	b180      	cbz	r0, 80034dc <main+0x204>
			  Vdd = ((VADC - 4)/(-0.1444)) + 0.3;
 80034ba:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80034be:	ee78 7a67 	vsub.f32	s15, s16, s15
 80034c2:	ee17 0a90 	vmov	r0, s15
 80034c6:	f7fd f83f 	bl	8000548 <__aeabi_f2d>
 80034ca:	a347      	add	r3, pc, #284	; (adr r3, 80035e8 <main+0x310>)
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	f7fd f9b8 	bl	8000844 <__aeabi_ddiv>
 80034d4:	a346      	add	r3, pc, #280	; (adr r3, 80035f0 <main+0x318>)
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	e76b      	b.n	80033b4 <main+0xdc>
		  else if (VADC <  1.716 && VADC >= 1.262){ // 16-19V
 80034dc:	a340      	add	r3, pc, #256	; (adr r3, 80035e0 <main+0x308>)
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	4620      	mov	r0, r4
 80034e4:	4629      	mov	r1, r5
 80034e6:	f7fd faf5 	bl	8000ad4 <__aeabi_dcmplt>
 80034ea:	b190      	cbz	r0, 8003512 <main+0x23a>
 80034ec:	a342      	add	r3, pc, #264	; (adr r3, 80035f8 <main+0x320>)
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	4620      	mov	r0, r4
 80034f4:	4629      	mov	r1, r5
 80034f6:	f7fd fb01 	bl	8000afc <__aeabi_dcmpge>
 80034fa:	b150      	cbz	r0, 8003512 <main+0x23a>
			  Vdd = ((VADC - 4.0367)/(-0.146));
 80034fc:	a340      	add	r3, pc, #256	; (adr r3, 8003600 <main+0x328>)
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
			  Vdd = ((VADC - 3.999)/(-0.146));
 8003502:	4620      	mov	r0, r4
 8003504:	4629      	mov	r1, r5
 8003506:	f7fc febf 	bl	8000288 <__aeabi_dsub>
 800350a:	a33f      	add	r3, pc, #252	; (adr r3, 8003608 <main+0x330>)
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	e01d      	b.n	800354e <main+0x276>
		  else if (VADC <= 1.262 && VADC >= 0.806){ // 19-22V
 8003512:	a339      	add	r3, pc, #228	; (adr r3, 80035f8 <main+0x320>)
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	4620      	mov	r0, r4
 800351a:	4629      	mov	r1, r5
 800351c:	f7fd fae4 	bl	8000ae8 <__aeabi_dcmple>
 8003520:	2800      	cmp	r0, #0
 8003522:	f000 808b 	beq.w	800363c <main+0x364>
 8003526:	a33a      	add	r3, pc, #232	; (adr r3, 8003610 <main+0x338>)
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	4620      	mov	r0, r4
 800352e:	4629      	mov	r1, r5
 8003530:	f7fd fae4 	bl	8000afc <__aeabi_dcmpge>
 8003534:	2800      	cmp	r0, #0
 8003536:	f000 8081 	beq.w	800363c <main+0x364>
			  Vdd = ((VADC - 4.0466)/(-0.1475));
 800353a:	a337      	add	r3, pc, #220	; (adr r3, 8003618 <main+0x340>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	4620      	mov	r0, r4
 8003542:	4629      	mov	r1, r5
 8003544:	f7fc fea0 	bl	8000288 <__aeabi_dsub>
 8003548:	a335      	add	r3, pc, #212	; (adr r3, 8003620 <main+0x348>)
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
			  Vdd = ((VADC - 3.999)/(-0.146));
 800354e:	f7fd f979 	bl	8000844 <__aeabi_ddiv>
 8003552:	e731      	b.n	80033b8 <main+0xe0>
 8003554:	f3af 8000 	nop.w
 8003558:	33333333 	.word	0x33333333
 800355c:	4092f133 	.word	0x4092f133
 8003560:	cccccccd 	.word	0xcccccccd
 8003564:	404c9ccc 	.word	0x404c9ccc
 8003568:	be76c8b4 	.word	0xbe76c8b4
 800356c:	400a1a9f 	.word	0x400a1a9f
 8003570:	4bc6a7f0 	.word	0x4bc6a7f0
 8003574:	40088937 	.word	0x40088937
 8003578:	a0275254 	.word	0xa0275254
 800357c:	400cb089 	.word	0x400cb089
 8003580:	b22d0e56 	.word	0xb22d0e56
 8003584:	bfb7ef9d 	.word	0xbfb7ef9d
 8003588:	9999999a 	.word	0x9999999a
 800358c:	3fe19999 	.word	0x3fe19999
 8003590:	66666666 	.word	0x66666666
 8003594:	400e6666 	.word	0x400e6666
 8003598:	33333333 	.word	0x33333333
 800359c:	40383333 	.word	0x40383333
 80035a0:	c8b43958 	.word	0xc8b43958
 80035a4:	4006be76 	.word	0x4006be76
 80035a8:	816f0069 	.word	0x816f0069
 80035ac:	400d4504 	.word	0x400d4504
 80035b0:	9b3d07c8 	.word	0x9b3d07c8
 80035b4:	bfbb9f55 	.word	0xbfbb9f55
 80035b8:	e147ae14 	.word	0xe147ae14
 80035bc:	3fde147a 	.word	0x3fde147a
 80035c0:	5810624e 	.word	0x5810624e
 80035c4:	4004b439 	.word	0x4004b439
 80035c8:	6e2eb1c4 	.word	0x6e2eb1c4
 80035cc:	400e81a3 	.word	0x400e81a3
 80035d0:	374bc6a8 	.word	0x374bc6a8
 80035d4:	bfc04189 	.word	0xbfc04189
 80035d8:	cccccccd 	.word	0xcccccccd
 80035dc:	3fdccccc 	.word	0x3fdccccc
 80035e0:	6a7ef9db 	.word	0x6a7ef9db
 80035e4:	3ffb74bc 	.word	0x3ffb74bc
 80035e8:	fec56d5d 	.word	0xfec56d5d
 80035ec:	bfc27bb2 	.word	0xbfc27bb2
 80035f0:	33333333 	.word	0x33333333
 80035f4:	3fd33333 	.word	0x3fd33333
 80035f8:	e978d4fe 	.word	0xe978d4fe
 80035fc:	3ff43126 	.word	0x3ff43126
 8003600:	af4f0d84 	.word	0xaf4f0d84
 8003604:	40102594 	.word	0x40102594
 8003608:	c49ba5e3 	.word	0xc49ba5e3
 800360c:	bfc2b020 	.word	0xbfc2b020
 8003610:	83126e98 	.word	0x83126e98
 8003614:	3fe9cac0 	.word	0x3fe9cac0
 8003618:	e90ff972 	.word	0xe90ff972
 800361c:	40102fb7 	.word	0x40102fb7
 8003620:	ae147ae1 	.word	0xae147ae1
 8003624:	bfc2e147 	.word	0xbfc2e147
 8003628:	080067fe 	.word	0x080067fe
 800362c:	48000400 	.word	0x48000400
 8003630:	00000000 	.word	0x00000000
 8003634:	0800681c 	.word	0x0800681c
 8003638:	08006852 	.word	0x08006852
		  else if (VADC <= 0.806 && VADC > 0.460){ // 22-24V
 800363c:	a311      	add	r3, pc, #68	; (adr r3, 8003684 <main+0x3ac>)
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	4620      	mov	r0, r4
 8003644:	4629      	mov	r1, r5
 8003646:	f7fd fa4f 	bl	8000ae8 <__aeabi_dcmple>
 800364a:	2800      	cmp	r0, #0
 800364c:	f43f aeb7 	beq.w	80033be <main+0xe6>
 8003650:	a30e      	add	r3, pc, #56	; (adr r3, 800368c <main+0x3b4>)
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	4620      	mov	r0, r4
 8003658:	4629      	mov	r1, r5
 800365a:	f7fd fa59 	bl	8000b10 <__aeabi_dcmpgt>
 800365e:	2800      	cmp	r0, #0
 8003660:	f43f aead 	beq.w	80033be <main+0xe6>
			  Vdd = ((VADC - 3.999)/(-0.146));
 8003664:	a30b      	add	r3, pc, #44	; (adr r3, 8003694 <main+0x3bc>)
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	e74a      	b.n	8003502 <main+0x22a>
	  		  sprintf(aTxBuffer, "Vdd: %4.3fV  \n ", Vdd);
 800366c:	4622      	mov	r2, r4
 800366e:	462b      	mov	r3, r5
 8003670:	4903      	ldr	r1, [pc, #12]	; (8003680 <main+0x3a8>)
 8003672:	4668      	mov	r0, sp
 8003674:	f000 f9a2 	bl	80039bc <sprintf>
 8003678:	e6ba      	b.n	80033f0 <main+0x118>
 800367a:	bf00      	nop
 800367c:	f3af 8000 	nop.w
 8003680:	08006842 	.word	0x08006842
 8003684:	83126e98 	.word	0x83126e98
 8003688:	3fe9cac0 	.word	0x3fe9cac0
 800368c:	d70a3d71 	.word	0xd70a3d71
 8003690:	3fdd70a3 	.word	0x3fdd70a3
 8003694:	b645a1cb 	.word	0xb645a1cb
 8003698:	400ffdf3 	.word	0x400ffdf3

0800369c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800369c:	e7fe      	b.n	800369c <_Error_Handler>
	...

080036a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80036a0:	b530      	push	{r4, r5, lr}
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 80036a2:	4d2a      	ldr	r5, [pc, #168]	; (800374c <MX_RTC_Init+0xac>)
 80036a4:	4b2a      	ldr	r3, [pc, #168]	; (8003750 <MX_RTC_Init+0xb0>)
 80036a6:	602b      	str	r3, [r5, #0]
{
 80036a8:	b087      	sub	sp, #28
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 80036aa:	2100      	movs	r1, #0
 80036ac:	4628      	mov	r0, r5
 80036ae:	f7ff fa66 	bl	8002b7e <HAL_RTCEx_BKUPRead>
 80036b2:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80036b6:	4298      	cmp	r0, r3
 80036b8:	d046      	beq.n	8003748 <MX_RTC_Init+0xa8>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 80036ba:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036bc:	2400      	movs	r4, #0
  hrtc.Init.AsynchPrediv = 127;
 80036be:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036c0:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 80036c2:	23ff      	movs	r3, #255	; 0xff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036c4:	606c      	str	r4, [r5, #4]
  hrtc.Init.SynchPrediv = 255;
 80036c6:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036c8:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036ca:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036cc:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036ce:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036d0:	f7ff f87e 	bl	80027d0 <HAL_RTC_Init>
 80036d4:	b118      	cbz	r0, 80036de <MX_RTC_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036d6:	2144      	movs	r1, #68	; 0x44
 80036d8:	481e      	ldr	r0, [pc, #120]	; (8003754 <MX_RTC_Init+0xb4>)
 80036da:	f7ff ffdf 	bl	800369c <_Error_Handler>
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80036de:	2201      	movs	r2, #1
 80036e0:	a901      	add	r1, sp, #4
 80036e2:	481a      	ldr	r0, [pc, #104]	; (800374c <MX_RTC_Init+0xac>)
  sTime.Hours = 0x0;
 80036e4:	f88d 4004 	strb.w	r4, [sp, #4]
  sTime.Minutes = 0x0;
 80036e8:	f88d 4005 	strb.w	r4, [sp, #5]
  sTime.Seconds = 0x0;
 80036ec:	f88d 4006 	strb.w	r4, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036f0:	9404      	str	r4, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036f2:	9405      	str	r4, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80036f4:	f7ff f8cc 	bl	8002890 <HAL_RTC_SetTime>
 80036f8:	b118      	cbz	r0, 8003702 <MX_RTC_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036fa:	2150      	movs	r1, #80	; 0x50
 80036fc:	4815      	ldr	r0, [pc, #84]	; (8003754 <MX_RTC_Init+0xb4>)
 80036fe:	f7ff ffcd 	bl	800369c <_Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003702:	2201      	movs	r2, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;
 8003704:	2300      	movs	r3, #0

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003706:	4669      	mov	r1, sp
 8003708:	4810      	ldr	r0, [pc, #64]	; (800374c <MX_RTC_Init+0xac>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800370a:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 800370e:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8003712:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8003716:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800371a:	f7ff f932 	bl	8002982 <HAL_RTC_SetDate>
 800371e:	b118      	cbz	r0, 8003728 <MX_RTC_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003720:	215a      	movs	r1, #90	; 0x5a
 8003722:	480c      	ldr	r0, [pc, #48]	; (8003754 <MX_RTC_Init+0xb4>)
 8003724:	f7ff ffba 	bl	800369c <_Error_Handler>
  }

    /**Enable the WakeUp 
    */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 5, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003728:	2204      	movs	r2, #4
 800372a:	2105      	movs	r1, #5
 800372c:	4807      	ldr	r0, [pc, #28]	; (800374c <MX_RTC_Init+0xac>)
 800372e:	f7ff f991 	bl	8002a54 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003732:	b118      	cbz	r0, 800373c <MX_RTC_Init+0x9c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003734:	2161      	movs	r1, #97	; 0x61
 8003736:	4807      	ldr	r0, [pc, #28]	; (8003754 <MX_RTC_Init+0xb4>)
 8003738:	f7ff ffb0 	bl	800369c <_Error_Handler>
  }

    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 800373c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003740:	2100      	movs	r1, #0
 8003742:	4802      	ldr	r0, [pc, #8]	; (800374c <MX_RTC_Init+0xac>)
 8003744:	f7ff fa16 	bl	8002b74 <HAL_RTCEx_BKUPWrite>
  }

}
 8003748:	b007      	add	sp, #28
 800374a:	bd30      	pop	{r4, r5, pc}
 800374c:	20000734 	.word	0x20000734
 8003750:	40002800 	.word	0x40002800
 8003754:	08006860 	.word	0x08006860

08003758 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003758:	b508      	push	{r3, lr}

  if(rtcHandle->Instance==RTC)
 800375a:	6802      	ldr	r2, [r0, #0]
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <HAL_RTC_MspInit+0x30>)
 800375e:	429a      	cmp	r2, r3
 8003760:	d110      	bne.n	8003784 <HAL_RTC_MspInit+0x2c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003762:	4a0a      	ldr	r2, [pc, #40]	; (800378c <HAL_RTC_MspInit+0x34>)
 8003764:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003770:	2200      	movs	r2, #0
 8003772:	2003      	movs	r0, #3
 8003774:	4611      	mov	r1, r2
 8003776:	f7fe f8c3 	bl	8001900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800377a:	2003      	movs	r0, #3
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800377c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003780:	f7fe b8f2 	b.w	8001968 <HAL_NVIC_EnableIRQ>
 8003784:	bd08      	pop	{r3, pc}
 8003786:	bf00      	nop
 8003788:	40002800 	.word	0x40002800
 800378c:	40021000 	.word	0x40021000

08003790 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003790:	4b21      	ldr	r3, [pc, #132]	; (8003818 <HAL_MspInit+0x88>)
{
 8003792:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003794:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	661a      	str	r2, [r3, #96]	; 0x60
 800379c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800379e:	f002 0201 	and.w	r2, r2, #1
 80037a2:	9200      	str	r2, [sp, #0]
 80037a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037ac:	659a      	str	r2, [r3, #88]	; 0x58
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b4:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b6:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80037b8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037ba:	f7fe f88f 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80037be:	2200      	movs	r2, #0
 80037c0:	4611      	mov	r1, r2
 80037c2:	f06f 000b 	mvn.w	r0, #11
 80037c6:	f7fe f89b 	bl	8001900 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80037ca:	2200      	movs	r2, #0
 80037cc:	4611      	mov	r1, r2
 80037ce:	f06f 000a 	mvn.w	r0, #10
 80037d2:	f7fe f895 	bl	8001900 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80037d6:	2200      	movs	r2, #0
 80037d8:	4611      	mov	r1, r2
 80037da:	f06f 0009 	mvn.w	r0, #9
 80037de:	f7fe f88f 	bl	8001900 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80037e2:	2200      	movs	r2, #0
 80037e4:	4611      	mov	r1, r2
 80037e6:	f06f 0004 	mvn.w	r0, #4
 80037ea:	f7fe f889 	bl	8001900 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80037ee:	2200      	movs	r2, #0
 80037f0:	4611      	mov	r1, r2
 80037f2:	f06f 0003 	mvn.w	r0, #3
 80037f6:	f7fe f883 	bl	8001900 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	4611      	mov	r1, r2
 80037fe:	f06f 0001 	mvn.w	r0, #1
 8003802:	f7fe f87d 	bl	8001900 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003806:	2200      	movs	r2, #0
 8003808:	4611      	mov	r1, r2
 800380a:	f04f 30ff 	mov.w	r0, #4294967295
 800380e:	f7fe f877 	bl	8001900 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003812:	b003      	add	sp, #12
 8003814:	f85d fb04 	ldr.w	pc, [sp], #4
 8003818:	40021000 	.word	0x40021000

0800381c <NMI_Handler>:
 800381c:	4770      	bx	lr

0800381e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800381e:	e7fe      	b.n	800381e <HardFault_Handler>

08003820 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003820:	e7fe      	b.n	8003820 <MemManage_Handler>

08003822 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003822:	e7fe      	b.n	8003822 <BusFault_Handler>

08003824 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003824:	e7fe      	b.n	8003824 <UsageFault_Handler>

08003826 <SVC_Handler>:
 8003826:	4770      	bx	lr

08003828 <DebugMon_Handler>:
 8003828:	4770      	bx	lr

0800382a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800382a:	4770      	bx	lr

0800382c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800382c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800382e:	f7fd fbaf 	bl	8000f90 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003836:	f7fe b8c6 	b.w	80019c6 <HAL_SYSTICK_IRQHandler>
	...

0800383c <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800383c:	4801      	ldr	r0, [pc, #4]	; (8003844 <RTC_WKUP_IRQHandler+0x8>)
 800383e:	f7ff b981 	b.w	8002b44 <HAL_RTCEx_WakeUpTimerIRQHandler>
 8003842:	bf00      	nop
 8003844:	20000734 	.word	0x20000734

08003848 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003848:	490f      	ldr	r1, [pc, #60]	; (8003888 <SystemInit+0x40>)
 800384a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800384e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <SystemInit+0x44>)
 8003858:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800385a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003862:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800386a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800386e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003874:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800387c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800387e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003880:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003884:	608b      	str	r3, [r1, #8]
 8003886:	4770      	bx	lr
 8003888:	e000ed00 	.word	0xe000ed00
 800388c:	40021000 	.word	0x40021000

08003890 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003890:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8003892:	480d      	ldr	r0, [pc, #52]	; (80038c8 <MX_USART1_UART_Init+0x38>)
  huart1.Init.BaudRate = 115200;
 8003894:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <MX_USART1_UART_Init+0x3c>)
 8003896:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800389a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800389e:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038a0:	2300      	movs	r3, #0
 80038a2:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038a4:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038a6:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038a8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038aa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038ac:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038ae:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038b0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038b2:	f7ff fbd3 	bl	800305c <HAL_UART_Init>
 80038b6:	b128      	cbz	r0, 80038c4 <MX_USART1_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038b8:	2144      	movs	r1, #68	; 0x44
 80038ba:	4805      	ldr	r0, [pc, #20]	; (80038d0 <MX_USART1_UART_Init+0x40>)
  }

}
 80038bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80038c0:	f7ff beec 	b.w	800369c <_Error_Handler>
 80038c4:	bd08      	pop	{r3, pc}
 80038c6:	bf00      	nop
 80038c8:	20000758 	.word	0x20000758
 80038cc:	40013800 	.word	0x40013800
 80038d0:	080068b8 	.word	0x080068b8

080038d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 80038d6:	6802      	ldr	r2, [r0, #0]
 80038d8:	4b10      	ldr	r3, [pc, #64]	; (800391c <HAL_UART_MspInit+0x48>)
 80038da:	429a      	cmp	r2, r3
 80038dc:	d11a      	bne.n	8003914 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038de:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e2:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80038e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ea:	661a      	str	r2, [r3, #96]	; 0x60
 80038ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80038f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fc:	2302      	movs	r3, #2
 80038fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003904:	2303      	movs	r3, #3
 8003906:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800390c:	2307      	movs	r3, #7
 800390e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003910:	f7fe f85e 	bl	80019d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003914:	b007      	add	sp, #28
 8003916:	f85d fb04 	ldr.w	pc, [sp], #4
 800391a:	bf00      	nop
 800391c:	40013800 	.word	0x40013800

08003920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003958 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003924:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003926:	e003      	b.n	8003930 <LoopCopyDataInit>

08003928 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003928:	4b0c      	ldr	r3, [pc, #48]	; (800395c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800392a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800392c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800392e:	3104      	adds	r1, #4

08003930 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003930:	480b      	ldr	r0, [pc, #44]	; (8003960 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003932:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003934:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003936:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003938:	d3f6      	bcc.n	8003928 <CopyDataInit>
	ldr	r2, =_sbss
 800393a:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <LoopForever+0x12>)
	b	LoopFillZerobss
 800393c:	e002      	b.n	8003944 <LoopFillZerobss>

0800393e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800393e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003940:	f842 3b04 	str.w	r3, [r2], #4

08003944 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003944:	4b09      	ldr	r3, [pc, #36]	; (800396c <LoopForever+0x16>)
	cmp	r2, r3
 8003946:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003948:	d3f9      	bcc.n	800393e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800394a:	f7ff ff7d 	bl	8003848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800394e:	f000 f811 	bl	8003974 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003952:	f7ff fcc1 	bl	80032d8 <main>

08003956 <LoopForever>:

LoopForever:
    b LoopForever
 8003956:	e7fe      	b.n	8003956 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003958:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800395c:	08006b40 	.word	0x08006b40
	ldr	r0, =_sdata
 8003960:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003964:	20000674 	.word	0x20000674
	ldr	r2, =_sbss
 8003968:	20000674 	.word	0x20000674
	ldr	r3, = _ebss
 800396c:	200007e0 	.word	0x200007e0

08003970 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003970:	e7fe      	b.n	8003970 <ADC1_IRQHandler>
	...

08003974 <__libc_init_array>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	4e0d      	ldr	r6, [pc, #52]	; (80039ac <__libc_init_array+0x38>)
 8003978:	4c0d      	ldr	r4, [pc, #52]	; (80039b0 <__libc_init_array+0x3c>)
 800397a:	1ba4      	subs	r4, r4, r6
 800397c:	10a4      	asrs	r4, r4, #2
 800397e:	2500      	movs	r5, #0
 8003980:	42a5      	cmp	r5, r4
 8003982:	d109      	bne.n	8003998 <__libc_init_array+0x24>
 8003984:	4e0b      	ldr	r6, [pc, #44]	; (80039b4 <__libc_init_array+0x40>)
 8003986:	4c0c      	ldr	r4, [pc, #48]	; (80039b8 <__libc_init_array+0x44>)
 8003988:	f002 ff1c 	bl	80067c4 <_init>
 800398c:	1ba4      	subs	r4, r4, r6
 800398e:	10a4      	asrs	r4, r4, #2
 8003990:	2500      	movs	r5, #0
 8003992:	42a5      	cmp	r5, r4
 8003994:	d105      	bne.n	80039a2 <__libc_init_array+0x2e>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800399c:	4798      	blx	r3
 800399e:	3501      	adds	r5, #1
 80039a0:	e7ee      	b.n	8003980 <__libc_init_array+0xc>
 80039a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039a6:	4798      	blx	r3
 80039a8:	3501      	adds	r5, #1
 80039aa:	e7f2      	b.n	8003992 <__libc_init_array+0x1e>
 80039ac:	08006b38 	.word	0x08006b38
 80039b0:	08006b38 	.word	0x08006b38
 80039b4:	08006b38 	.word	0x08006b38
 80039b8:	08006b3c 	.word	0x08006b3c

080039bc <sprintf>:
 80039bc:	b40e      	push	{r1, r2, r3}
 80039be:	b500      	push	{lr}
 80039c0:	b09c      	sub	sp, #112	; 0x70
 80039c2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80039c6:	ab1d      	add	r3, sp, #116	; 0x74
 80039c8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80039cc:	9002      	str	r0, [sp, #8]
 80039ce:	9006      	str	r0, [sp, #24]
 80039d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039d4:	480a      	ldr	r0, [pc, #40]	; (8003a00 <sprintf+0x44>)
 80039d6:	9104      	str	r1, [sp, #16]
 80039d8:	9107      	str	r1, [sp, #28]
 80039da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039de:	f853 2b04 	ldr.w	r2, [r3], #4
 80039e2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80039e6:	6800      	ldr	r0, [r0, #0]
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	a902      	add	r1, sp, #8
 80039ec:	f000 f814 	bl	8003a18 <_svfprintf_r>
 80039f0:	9b02      	ldr	r3, [sp, #8]
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	b01c      	add	sp, #112	; 0x70
 80039f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039fc:	b003      	add	sp, #12
 80039fe:	4770      	bx	lr
 8003a00:	20000004 	.word	0x20000004

08003a04 <strcpy>:
 8003a04:	4603      	mov	r3, r0
 8003a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a0a:	f803 2b01 	strb.w	r2, [r3], #1
 8003a0e:	2a00      	cmp	r2, #0
 8003a10:	d1f9      	bne.n	8003a06 <strcpy+0x2>
 8003a12:	4770      	bx	lr
 8003a14:	0000      	movs	r0, r0
	...

08003a18 <_svfprintf_r>:
 8003a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a1c:	b0bd      	sub	sp, #244	; 0xf4
 8003a1e:	468a      	mov	sl, r1
 8003a20:	4615      	mov	r5, r2
 8003a22:	461f      	mov	r7, r3
 8003a24:	4683      	mov	fp, r0
 8003a26:	f001 fe25 	bl	8005674 <_localeconv_r>
 8003a2a:	6803      	ldr	r3, [r0, #0]
 8003a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fc fbce 	bl	80001d0 <strlen>
 8003a34:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003a38:	9008      	str	r0, [sp, #32]
 8003a3a:	061b      	lsls	r3, r3, #24
 8003a3c:	d518      	bpl.n	8003a70 <_svfprintf_r+0x58>
 8003a3e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003a42:	b9ab      	cbnz	r3, 8003a70 <_svfprintf_r+0x58>
 8003a44:	2140      	movs	r1, #64	; 0x40
 8003a46:	4658      	mov	r0, fp
 8003a48:	f001 fe2a 	bl	80056a0 <_malloc_r>
 8003a4c:	f8ca 0000 	str.w	r0, [sl]
 8003a50:	f8ca 0010 	str.w	r0, [sl, #16]
 8003a54:	b948      	cbnz	r0, 8003a6a <_svfprintf_r+0x52>
 8003a56:	230c      	movs	r3, #12
 8003a58:	f8cb 3000 	str.w	r3, [fp]
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a60:	9309      	str	r3, [sp, #36]	; 0x24
 8003a62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a64:	b03d      	add	sp, #244	; 0xf4
 8003a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a6a:	2340      	movs	r3, #64	; 0x40
 8003a6c:	f8ca 3014 	str.w	r3, [sl, #20]
 8003a70:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8003cd8 <_svfprintf_r+0x2c0>
 8003a74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a7c:	941f      	str	r4, [sp, #124]	; 0x7c
 8003a7e:	9321      	str	r3, [sp, #132]	; 0x84
 8003a80:	9320      	str	r3, [sp, #128]	; 0x80
 8003a82:	9505      	str	r5, [sp, #20]
 8003a84:	9303      	str	r3, [sp, #12]
 8003a86:	9311      	str	r3, [sp, #68]	; 0x44
 8003a88:	9310      	str	r3, [sp, #64]	; 0x40
 8003a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8c:	9d05      	ldr	r5, [sp, #20]
 8003a8e:	462b      	mov	r3, r5
 8003a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a94:	b112      	cbz	r2, 8003a9c <_svfprintf_r+0x84>
 8003a96:	2a25      	cmp	r2, #37	; 0x25
 8003a98:	f040 8083 	bne.w	8003ba2 <_svfprintf_r+0x18a>
 8003a9c:	9b05      	ldr	r3, [sp, #20]
 8003a9e:	1aee      	subs	r6, r5, r3
 8003aa0:	d00d      	beq.n	8003abe <_svfprintf_r+0xa6>
 8003aa2:	e884 0048 	stmia.w	r4, {r3, r6}
 8003aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003aa8:	4433      	add	r3, r6
 8003aaa:	9321      	str	r3, [sp, #132]	; 0x84
 8003aac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003aae:	3301      	adds	r3, #1
 8003ab0:	2b07      	cmp	r3, #7
 8003ab2:	9320      	str	r3, [sp, #128]	; 0x80
 8003ab4:	dc77      	bgt.n	8003ba6 <_svfprintf_r+0x18e>
 8003ab6:	3408      	adds	r4, #8
 8003ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aba:	4433      	add	r3, r6
 8003abc:	9309      	str	r3, [sp, #36]	; 0x24
 8003abe:	782b      	ldrb	r3, [r5, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8729 	beq.w	8004918 <_svfprintf_r+0xf00>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	1c69      	adds	r1, r5, #1
 8003aca:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f04f 39ff 	mov.w	r9, #4294967295
 8003ad4:	930a      	str	r3, [sp, #40]	; 0x28
 8003ad6:	461d      	mov	r5, r3
 8003ad8:	200a      	movs	r0, #10
 8003ada:	1c4e      	adds	r6, r1, #1
 8003adc:	7809      	ldrb	r1, [r1, #0]
 8003ade:	9605      	str	r6, [sp, #20]
 8003ae0:	9102      	str	r1, [sp, #8]
 8003ae2:	9902      	ldr	r1, [sp, #8]
 8003ae4:	3920      	subs	r1, #32
 8003ae6:	2958      	cmp	r1, #88	; 0x58
 8003ae8:	f200 8418 	bhi.w	800431c <_svfprintf_r+0x904>
 8003aec:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003af0:	041600a6 	.word	0x041600a6
 8003af4:	00ab0416 	.word	0x00ab0416
 8003af8:	04160416 	.word	0x04160416
 8003afc:	04160416 	.word	0x04160416
 8003b00:	04160416 	.word	0x04160416
 8003b04:	006500ae 	.word	0x006500ae
 8003b08:	00b70416 	.word	0x00b70416
 8003b0c:	041600ba 	.word	0x041600ba
 8003b10:	00da00d7 	.word	0x00da00d7
 8003b14:	00da00da 	.word	0x00da00da
 8003b18:	00da00da 	.word	0x00da00da
 8003b1c:	00da00da 	.word	0x00da00da
 8003b20:	00da00da 	.word	0x00da00da
 8003b24:	04160416 	.word	0x04160416
 8003b28:	04160416 	.word	0x04160416
 8003b2c:	04160416 	.word	0x04160416
 8003b30:	04160416 	.word	0x04160416
 8003b34:	04160416 	.word	0x04160416
 8003b38:	012b0115 	.word	0x012b0115
 8003b3c:	012b0416 	.word	0x012b0416
 8003b40:	04160416 	.word	0x04160416
 8003b44:	04160416 	.word	0x04160416
 8003b48:	041600ed 	.word	0x041600ed
 8003b4c:	03400416 	.word	0x03400416
 8003b50:	04160416 	.word	0x04160416
 8003b54:	04160416 	.word	0x04160416
 8003b58:	03a80416 	.word	0x03a80416
 8003b5c:	04160416 	.word	0x04160416
 8003b60:	04160086 	.word	0x04160086
 8003b64:	04160416 	.word	0x04160416
 8003b68:	04160416 	.word	0x04160416
 8003b6c:	04160416 	.word	0x04160416
 8003b70:	04160416 	.word	0x04160416
 8003b74:	01070416 	.word	0x01070416
 8003b78:	012b006b 	.word	0x012b006b
 8003b7c:	012b012b 	.word	0x012b012b
 8003b80:	006b00f0 	.word	0x006b00f0
 8003b84:	04160416 	.word	0x04160416
 8003b88:	041600fa 	.word	0x041600fa
 8003b8c:	03420322 	.word	0x03420322
 8003b90:	01010376 	.word	0x01010376
 8003b94:	03870416 	.word	0x03870416
 8003b98:	03aa0416 	.word	0x03aa0416
 8003b9c:	04160416 	.word	0x04160416
 8003ba0:	03c2      	.short	0x03c2
 8003ba2:	461d      	mov	r5, r3
 8003ba4:	e773      	b.n	8003a8e <_svfprintf_r+0x76>
 8003ba6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ba8:	4651      	mov	r1, sl
 8003baa:	4658      	mov	r0, fp
 8003bac:	f002 fa7e 	bl	80060ac <__ssprint_r>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	f040 8692 	bne.w	80048da <_svfprintf_r+0xec2>
 8003bb6:	ac2c      	add	r4, sp, #176	; 0xb0
 8003bb8:	e77e      	b.n	8003ab8 <_svfprintf_r+0xa0>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	222b      	movs	r2, #43	; 0x2b
 8003bbe:	9905      	ldr	r1, [sp, #20]
 8003bc0:	e78b      	b.n	8003ada <_svfprintf_r+0xc2>
 8003bc2:	460f      	mov	r7, r1
 8003bc4:	e7fb      	b.n	8003bbe <_svfprintf_r+0x1a6>
 8003bc6:	b10b      	cbz	r3, 8003bcc <_svfprintf_r+0x1b4>
 8003bc8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003bcc:	06ae      	lsls	r6, r5, #26
 8003bce:	f140 80aa 	bpl.w	8003d26 <_svfprintf_r+0x30e>
 8003bd2:	3707      	adds	r7, #7
 8003bd4:	f027 0707 	bic.w	r7, r7, #7
 8003bd8:	f107 0308 	add.w	r3, r7, #8
 8003bdc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003be0:	9304      	str	r3, [sp, #16]
 8003be2:	2e00      	cmp	r6, #0
 8003be4:	f177 0300 	sbcs.w	r3, r7, #0
 8003be8:	da06      	bge.n	8003bf8 <_svfprintf_r+0x1e0>
 8003bea:	4276      	negs	r6, r6
 8003bec:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8003bf0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8003bf4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e2ca      	b.n	8004192 <_svfprintf_r+0x77a>
 8003bfc:	b10b      	cbz	r3, 8003c02 <_svfprintf_r+0x1ea>
 8003bfe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003c02:	4b37      	ldr	r3, [pc, #220]	; (8003ce0 <_svfprintf_r+0x2c8>)
 8003c04:	9311      	str	r3, [sp, #68]	; 0x44
 8003c06:	06ab      	lsls	r3, r5, #26
 8003c08:	f140 8339 	bpl.w	800427e <_svfprintf_r+0x866>
 8003c0c:	3707      	adds	r7, #7
 8003c0e:	f027 0707 	bic.w	r7, r7, #7
 8003c12:	f107 0308 	add.w	r3, r7, #8
 8003c16:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003c1a:	9304      	str	r3, [sp, #16]
 8003c1c:	07e8      	lsls	r0, r5, #31
 8003c1e:	d50b      	bpl.n	8003c38 <_svfprintf_r+0x220>
 8003c20:	ea56 0307 	orrs.w	r3, r6, r7
 8003c24:	d008      	beq.n	8003c38 <_svfprintf_r+0x220>
 8003c26:	2330      	movs	r3, #48	; 0x30
 8003c28:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003c2c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003c30:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8003c34:	f045 0502 	orr.w	r5, r5, #2
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e2a7      	b.n	800418c <_svfprintf_r+0x774>
 8003c3c:	2a00      	cmp	r2, #0
 8003c3e:	d1be      	bne.n	8003bbe <_svfprintf_r+0x1a6>
 8003c40:	2301      	movs	r3, #1
 8003c42:	2220      	movs	r2, #32
 8003c44:	e7bb      	b.n	8003bbe <_svfprintf_r+0x1a6>
 8003c46:	f045 0501 	orr.w	r5, r5, #1
 8003c4a:	e7b8      	b.n	8003bbe <_svfprintf_r+0x1a6>
 8003c4c:	683e      	ldr	r6, [r7, #0]
 8003c4e:	960a      	str	r6, [sp, #40]	; 0x28
 8003c50:	2e00      	cmp	r6, #0
 8003c52:	f107 0104 	add.w	r1, r7, #4
 8003c56:	dab4      	bge.n	8003bc2 <_svfprintf_r+0x1aa>
 8003c58:	4276      	negs	r6, r6
 8003c5a:	960a      	str	r6, [sp, #40]	; 0x28
 8003c5c:	460f      	mov	r7, r1
 8003c5e:	f045 0504 	orr.w	r5, r5, #4
 8003c62:	e7ac      	b.n	8003bbe <_svfprintf_r+0x1a6>
 8003c64:	9905      	ldr	r1, [sp, #20]
 8003c66:	1c4e      	adds	r6, r1, #1
 8003c68:	7809      	ldrb	r1, [r1, #0]
 8003c6a:	9102      	str	r1, [sp, #8]
 8003c6c:	292a      	cmp	r1, #42	; 0x2a
 8003c6e:	d010      	beq.n	8003c92 <_svfprintf_r+0x27a>
 8003c70:	f04f 0900 	mov.w	r9, #0
 8003c74:	9605      	str	r6, [sp, #20]
 8003c76:	9902      	ldr	r1, [sp, #8]
 8003c78:	3930      	subs	r1, #48	; 0x30
 8003c7a:	2909      	cmp	r1, #9
 8003c7c:	f63f af31 	bhi.w	8003ae2 <_svfprintf_r+0xca>
 8003c80:	fb00 1909 	mla	r9, r0, r9, r1
 8003c84:	9905      	ldr	r1, [sp, #20]
 8003c86:	460e      	mov	r6, r1
 8003c88:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003c8c:	9102      	str	r1, [sp, #8]
 8003c8e:	9605      	str	r6, [sp, #20]
 8003c90:	e7f1      	b.n	8003c76 <_svfprintf_r+0x25e>
 8003c92:	6839      	ldr	r1, [r7, #0]
 8003c94:	9605      	str	r6, [sp, #20]
 8003c96:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8003c9a:	3704      	adds	r7, #4
 8003c9c:	e78f      	b.n	8003bbe <_svfprintf_r+0x1a6>
 8003c9e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003ca2:	e78c      	b.n	8003bbe <_svfprintf_r+0x1a6>
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	910a      	str	r1, [sp, #40]	; 0x28
 8003ca8:	9902      	ldr	r1, [sp, #8]
 8003caa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003cac:	3930      	subs	r1, #48	; 0x30
 8003cae:	fb00 1106 	mla	r1, r0, r6, r1
 8003cb2:	910a      	str	r1, [sp, #40]	; 0x28
 8003cb4:	9905      	ldr	r1, [sp, #20]
 8003cb6:	460e      	mov	r6, r1
 8003cb8:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003cbc:	9102      	str	r1, [sp, #8]
 8003cbe:	9902      	ldr	r1, [sp, #8]
 8003cc0:	9605      	str	r6, [sp, #20]
 8003cc2:	3930      	subs	r1, #48	; 0x30
 8003cc4:	2909      	cmp	r1, #9
 8003cc6:	d9ef      	bls.n	8003ca8 <_svfprintf_r+0x290>
 8003cc8:	e70b      	b.n	8003ae2 <_svfprintf_r+0xca>
 8003cca:	f045 0508 	orr.w	r5, r5, #8
 8003cce:	e776      	b.n	8003bbe <_svfprintf_r+0x1a6>
 8003cd0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8003cd4:	e773      	b.n	8003bbe <_svfprintf_r+0x1a6>
 8003cd6:	bf00      	nop
	...
 8003ce0:	080068d7 	.word	0x080068d7
 8003ce4:	9905      	ldr	r1, [sp, #20]
 8003ce6:	7809      	ldrb	r1, [r1, #0]
 8003ce8:	296c      	cmp	r1, #108	; 0x6c
 8003cea:	d105      	bne.n	8003cf8 <_svfprintf_r+0x2e0>
 8003cec:	9905      	ldr	r1, [sp, #20]
 8003cee:	3101      	adds	r1, #1
 8003cf0:	9105      	str	r1, [sp, #20]
 8003cf2:	f045 0520 	orr.w	r5, r5, #32
 8003cf6:	e762      	b.n	8003bbe <_svfprintf_r+0x1a6>
 8003cf8:	f045 0510 	orr.w	r5, r5, #16
 8003cfc:	e75f      	b.n	8003bbe <_svfprintf_r+0x1a6>
 8003cfe:	1d3b      	adds	r3, r7, #4
 8003d00:	9304      	str	r3, [sp, #16]
 8003d02:	2600      	movs	r6, #0
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003d0a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003d0e:	f04f 0901 	mov.w	r9, #1
 8003d12:	4637      	mov	r7, r6
 8003d14:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8003d18:	e11b      	b.n	8003f52 <_svfprintf_r+0x53a>
 8003d1a:	b10b      	cbz	r3, 8003d20 <_svfprintf_r+0x308>
 8003d1c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003d20:	f045 0510 	orr.w	r5, r5, #16
 8003d24:	e752      	b.n	8003bcc <_svfprintf_r+0x1b4>
 8003d26:	f015 0f10 	tst.w	r5, #16
 8003d2a:	f107 0304 	add.w	r3, r7, #4
 8003d2e:	d003      	beq.n	8003d38 <_svfprintf_r+0x320>
 8003d30:	683e      	ldr	r6, [r7, #0]
 8003d32:	9304      	str	r3, [sp, #16]
 8003d34:	17f7      	asrs	r7, r6, #31
 8003d36:	e754      	b.n	8003be2 <_svfprintf_r+0x1ca>
 8003d38:	683e      	ldr	r6, [r7, #0]
 8003d3a:	9304      	str	r3, [sp, #16]
 8003d3c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d40:	bf18      	it	ne
 8003d42:	b236      	sxthne	r6, r6
 8003d44:	e7f6      	b.n	8003d34 <_svfprintf_r+0x31c>
 8003d46:	b10b      	cbz	r3, 8003d4c <_svfprintf_r+0x334>
 8003d48:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003d4c:	3707      	adds	r7, #7
 8003d4e:	f027 0707 	bic.w	r7, r7, #7
 8003d52:	f107 0308 	add.w	r3, r7, #8
 8003d56:	9304      	str	r3, [sp, #16]
 8003d58:	ed97 7b00 	vldr	d7, [r7]
 8003d5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003d60:	9b06      	ldr	r3, [sp, #24]
 8003d62:	9312      	str	r3, [sp, #72]	; 0x48
 8003d64:	9b07      	ldr	r3, [sp, #28]
 8003d66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8003d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d70:	4b4a      	ldr	r3, [pc, #296]	; (8003e9c <_svfprintf_r+0x484>)
 8003d72:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003d76:	f7fc fed5 	bl	8000b24 <__aeabi_dcmpun>
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	f040 85d5 	bne.w	800492a <_svfprintf_r+0xf12>
 8003d80:	f04f 32ff 	mov.w	r2, #4294967295
 8003d84:	4b45      	ldr	r3, [pc, #276]	; (8003e9c <_svfprintf_r+0x484>)
 8003d86:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003d8a:	f7fc fead 	bl	8000ae8 <__aeabi_dcmple>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	f040 85cb 	bne.w	800492a <_svfprintf_r+0xf12>
 8003d94:	2200      	movs	r2, #0
 8003d96:	2300      	movs	r3, #0
 8003d98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d9c:	f7fc fe9a 	bl	8000ad4 <__aeabi_dcmplt>
 8003da0:	b110      	cbz	r0, 8003da8 <_svfprintf_r+0x390>
 8003da2:	232d      	movs	r3, #45	; 0x2d
 8003da4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003da8:	4b3d      	ldr	r3, [pc, #244]	; (8003ea0 <_svfprintf_r+0x488>)
 8003daa:	4a3e      	ldr	r2, [pc, #248]	; (8003ea4 <_svfprintf_r+0x48c>)
 8003dac:	9902      	ldr	r1, [sp, #8]
 8003dae:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8003db2:	2947      	cmp	r1, #71	; 0x47
 8003db4:	bfcc      	ite	gt
 8003db6:	4690      	movgt	r8, r2
 8003db8:	4698      	movle	r8, r3
 8003dba:	f04f 0903 	mov.w	r9, #3
 8003dbe:	2600      	movs	r6, #0
 8003dc0:	4637      	mov	r7, r6
 8003dc2:	e0c6      	b.n	8003f52 <_svfprintf_r+0x53a>
 8003dc4:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003dc8:	d022      	beq.n	8003e10 <_svfprintf_r+0x3f8>
 8003dca:	9b02      	ldr	r3, [sp, #8]
 8003dcc:	f023 0320 	bic.w	r3, r3, #32
 8003dd0:	2b47      	cmp	r3, #71	; 0x47
 8003dd2:	d104      	bne.n	8003dde <_svfprintf_r+0x3c6>
 8003dd4:	f1b9 0f00 	cmp.w	r9, #0
 8003dd8:	bf08      	it	eq
 8003dda:	f04f 0901 	moveq.w	r9, #1
 8003dde:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8003de2:	930c      	str	r3, [sp, #48]	; 0x30
 8003de4:	9b07      	ldr	r3, [sp, #28]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	da15      	bge.n	8003e16 <_svfprintf_r+0x3fe>
 8003dea:	9b06      	ldr	r3, [sp, #24]
 8003dec:	930e      	str	r3, [sp, #56]	; 0x38
 8003dee:	9b07      	ldr	r3, [sp, #28]
 8003df0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003df4:	930f      	str	r3, [sp, #60]	; 0x3c
 8003df6:	232d      	movs	r3, #45	; 0x2d
 8003df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003dfa:	9b02      	ldr	r3, [sp, #8]
 8003dfc:	f023 0720 	bic.w	r7, r3, #32
 8003e00:	2f46      	cmp	r7, #70	; 0x46
 8003e02:	d00e      	beq.n	8003e22 <_svfprintf_r+0x40a>
 8003e04:	2f45      	cmp	r7, #69	; 0x45
 8003e06:	d146      	bne.n	8003e96 <_svfprintf_r+0x47e>
 8003e08:	f109 0601 	add.w	r6, r9, #1
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	e00a      	b.n	8003e26 <_svfprintf_r+0x40e>
 8003e10:	f04f 0906 	mov.w	r9, #6
 8003e14:	e7e3      	b.n	8003dde <_svfprintf_r+0x3c6>
 8003e16:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003e20:	e7ea      	b.n	8003df8 <_svfprintf_r+0x3e0>
 8003e22:	464e      	mov	r6, r9
 8003e24:	2103      	movs	r1, #3
 8003e26:	ab1d      	add	r3, sp, #116	; 0x74
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	ab1a      	add	r3, sp, #104	; 0x68
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	4632      	mov	r2, r6
 8003e30:	ab19      	add	r3, sp, #100	; 0x64
 8003e32:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8003e36:	4658      	mov	r0, fp
 8003e38:	f000 fe4e 	bl	8004ad8 <_dtoa_r>
 8003e3c:	2f47      	cmp	r7, #71	; 0x47
 8003e3e:	4680      	mov	r8, r0
 8003e40:	d102      	bne.n	8003e48 <_svfprintf_r+0x430>
 8003e42:	07e8      	lsls	r0, r5, #31
 8003e44:	f140 857e 	bpl.w	8004944 <_svfprintf_r+0xf2c>
 8003e48:	eb08 0306 	add.w	r3, r8, r6
 8003e4c:	2f46      	cmp	r7, #70	; 0x46
 8003e4e:	9303      	str	r3, [sp, #12]
 8003e50:	d111      	bne.n	8003e76 <_svfprintf_r+0x45e>
 8003e52:	f898 3000 	ldrb.w	r3, [r8]
 8003e56:	2b30      	cmp	r3, #48	; 0x30
 8003e58:	d109      	bne.n	8003e6e <_svfprintf_r+0x456>
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003e62:	f7fc fe2d 	bl	8000ac0 <__aeabi_dcmpeq>
 8003e66:	b910      	cbnz	r0, 8003e6e <_svfprintf_r+0x456>
 8003e68:	f1c6 0601 	rsb	r6, r6, #1
 8003e6c:	9619      	str	r6, [sp, #100]	; 0x64
 8003e6e:	9a03      	ldr	r2, [sp, #12]
 8003e70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e72:	441a      	add	r2, r3
 8003e74:	9203      	str	r2, [sp, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003e7e:	f7fc fe1f 	bl	8000ac0 <__aeabi_dcmpeq>
 8003e82:	b988      	cbnz	r0, 8003ea8 <_svfprintf_r+0x490>
 8003e84:	2230      	movs	r2, #48	; 0x30
 8003e86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003e88:	9903      	ldr	r1, [sp, #12]
 8003e8a:	4299      	cmp	r1, r3
 8003e8c:	d90e      	bls.n	8003eac <_svfprintf_r+0x494>
 8003e8e:	1c59      	adds	r1, r3, #1
 8003e90:	911d      	str	r1, [sp, #116]	; 0x74
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e7f7      	b.n	8003e86 <_svfprintf_r+0x46e>
 8003e96:	464e      	mov	r6, r9
 8003e98:	e7b8      	b.n	8003e0c <_svfprintf_r+0x3f4>
 8003e9a:	bf00      	nop
 8003e9c:	7fefffff 	.word	0x7fefffff
 8003ea0:	080068c7 	.word	0x080068c7
 8003ea4:	080068cb 	.word	0x080068cb
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	931d      	str	r3, [sp, #116]	; 0x74
 8003eac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003eae:	2f47      	cmp	r7, #71	; 0x47
 8003eb0:	eba3 0308 	sub.w	r3, r3, r8
 8003eb4:	9303      	str	r3, [sp, #12]
 8003eb6:	f040 80fa 	bne.w	80040ae <_svfprintf_r+0x696>
 8003eba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ebc:	1cd9      	adds	r1, r3, #3
 8003ebe:	db02      	blt.n	8003ec6 <_svfprintf_r+0x4ae>
 8003ec0:	4599      	cmp	r9, r3
 8003ec2:	f280 8120 	bge.w	8004106 <_svfprintf_r+0x6ee>
 8003ec6:	9b02      	ldr	r3, [sp, #8]
 8003ec8:	3b02      	subs	r3, #2
 8003eca:	9302      	str	r3, [sp, #8]
 8003ecc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003ece:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8003ed2:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8003ed6:	1e53      	subs	r3, r2, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	9319      	str	r3, [sp, #100]	; 0x64
 8003edc:	bfb6      	itet	lt
 8003ede:	f1c2 0301 	rsblt	r3, r2, #1
 8003ee2:	222b      	movge	r2, #43	; 0x2b
 8003ee4:	222d      	movlt	r2, #45	; 0x2d
 8003ee6:	2b09      	cmp	r3, #9
 8003ee8:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8003eec:	f340 80fb 	ble.w	80040e6 <_svfprintf_r+0x6ce>
 8003ef0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8003ef4:	260a      	movs	r6, #10
 8003ef6:	fb93 f0f6 	sdiv	r0, r3, r6
 8003efa:	fb06 3310 	mls	r3, r6, r0, r3
 8003efe:	3330      	adds	r3, #48	; 0x30
 8003f00:	2809      	cmp	r0, #9
 8003f02:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003f06:	f102 31ff 	add.w	r1, r2, #4294967295
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f300 80e4 	bgt.w	80040d8 <_svfprintf_r+0x6c0>
 8003f10:	3330      	adds	r3, #48	; 0x30
 8003f12:	f801 3c01 	strb.w	r3, [r1, #-1]
 8003f16:	3a02      	subs	r2, #2
 8003f18:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8003f1c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8003f20:	4282      	cmp	r2, r0
 8003f22:	4619      	mov	r1, r3
 8003f24:	f0c0 80da 	bcc.w	80040dc <_svfprintf_r+0x6c4>
 8003f28:	9a03      	ldr	r2, [sp, #12]
 8003f2a:	ab1b      	add	r3, sp, #108	; 0x6c
 8003f2c:	1acb      	subs	r3, r1, r3
 8003f2e:	2a01      	cmp	r2, #1
 8003f30:	9310      	str	r3, [sp, #64]	; 0x40
 8003f32:	eb03 0902 	add.w	r9, r3, r2
 8003f36:	dc02      	bgt.n	8003f3e <_svfprintf_r+0x526>
 8003f38:	f015 0701 	ands.w	r7, r5, #1
 8003f3c:	d002      	beq.n	8003f44 <_svfprintf_r+0x52c>
 8003f3e:	9b08      	ldr	r3, [sp, #32]
 8003f40:	2700      	movs	r7, #0
 8003f42:	4499      	add	r9, r3
 8003f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f46:	b113      	cbz	r3, 8003f4e <_svfprintf_r+0x536>
 8003f48:	232d      	movs	r3, #45	; 0x2d
 8003f4a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003f4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f50:	2600      	movs	r6, #0
 8003f52:	454e      	cmp	r6, r9
 8003f54:	4633      	mov	r3, r6
 8003f56:	bfb8      	it	lt
 8003f58:	464b      	movlt	r3, r9
 8003f5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f5c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003f60:	b113      	cbz	r3, 8003f68 <_svfprintf_r+0x550>
 8003f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f64:	3301      	adds	r3, #1
 8003f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f68:	f015 0302 	ands.w	r3, r5, #2
 8003f6c:	9314      	str	r3, [sp, #80]	; 0x50
 8003f6e:	bf1e      	ittt	ne
 8003f70:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8003f72:	3302      	addne	r3, #2
 8003f74:	930b      	strne	r3, [sp, #44]	; 0x2c
 8003f76:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8003f7a:	9315      	str	r3, [sp, #84]	; 0x54
 8003f7c:	d118      	bne.n	8003fb0 <_svfprintf_r+0x598>
 8003f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	930c      	str	r3, [sp, #48]	; 0x30
 8003f88:	dd12      	ble.n	8003fb0 <_svfprintf_r+0x598>
 8003f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	4ba9      	ldr	r3, [pc, #676]	; (8004234 <_svfprintf_r+0x81c>)
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	f300 81d5 	bgt.w	8004340 <_svfprintf_r+0x928>
 8003f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f98:	6063      	str	r3, [r4, #4]
 8003f9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f9e:	4413      	add	r3, r2
 8003fa0:	9321      	str	r3, [sp, #132]	; 0x84
 8003fa2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	2b07      	cmp	r3, #7
 8003fa8:	9320      	str	r3, [sp, #128]	; 0x80
 8003faa:	f300 81e2 	bgt.w	8004372 <_svfprintf_r+0x95a>
 8003fae:	3408      	adds	r4, #8
 8003fb0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003fb4:	b173      	cbz	r3, 8003fd4 <_svfprintf_r+0x5bc>
 8003fb6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8003fba:	6023      	str	r3, [r4, #0]
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	6063      	str	r3, [r4, #4]
 8003fc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	9321      	str	r3, [sp, #132]	; 0x84
 8003fc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fc8:	3301      	adds	r3, #1
 8003fca:	2b07      	cmp	r3, #7
 8003fcc:	9320      	str	r3, [sp, #128]	; 0x80
 8003fce:	f300 81da 	bgt.w	8004386 <_svfprintf_r+0x96e>
 8003fd2:	3408      	adds	r4, #8
 8003fd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003fd6:	b16b      	cbz	r3, 8003ff4 <_svfprintf_r+0x5dc>
 8003fd8:	ab18      	add	r3, sp, #96	; 0x60
 8003fda:	6023      	str	r3, [r4, #0]
 8003fdc:	2302      	movs	r3, #2
 8003fde:	6063      	str	r3, [r4, #4]
 8003fe0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fe2:	3302      	adds	r3, #2
 8003fe4:	9321      	str	r3, [sp, #132]	; 0x84
 8003fe6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fe8:	3301      	adds	r3, #1
 8003fea:	2b07      	cmp	r3, #7
 8003fec:	9320      	str	r3, [sp, #128]	; 0x80
 8003fee:	f300 81d4 	bgt.w	800439a <_svfprintf_r+0x982>
 8003ff2:	3408      	adds	r4, #8
 8003ff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ff6:	2b80      	cmp	r3, #128	; 0x80
 8003ff8:	d114      	bne.n	8004024 <_svfprintf_r+0x60c>
 8003ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ffc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	dd0f      	ble.n	8004024 <_svfprintf_r+0x60c>
 8004004:	4a8c      	ldr	r2, [pc, #560]	; (8004238 <_svfprintf_r+0x820>)
 8004006:	6022      	str	r2, [r4, #0]
 8004008:	2b10      	cmp	r3, #16
 800400a:	f300 81d0 	bgt.w	80043ae <_svfprintf_r+0x996>
 800400e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004010:	6063      	str	r3, [r4, #4]
 8004012:	4413      	add	r3, r2
 8004014:	9321      	str	r3, [sp, #132]	; 0x84
 8004016:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004018:	3301      	adds	r3, #1
 800401a:	2b07      	cmp	r3, #7
 800401c:	9320      	str	r3, [sp, #128]	; 0x80
 800401e:	f300 81df 	bgt.w	80043e0 <_svfprintf_r+0x9c8>
 8004022:	3408      	adds	r4, #8
 8004024:	eba6 0609 	sub.w	r6, r6, r9
 8004028:	2e00      	cmp	r6, #0
 800402a:	dd0f      	ble.n	800404c <_svfprintf_r+0x634>
 800402c:	4b82      	ldr	r3, [pc, #520]	; (8004238 <_svfprintf_r+0x820>)
 800402e:	6023      	str	r3, [r4, #0]
 8004030:	2e10      	cmp	r6, #16
 8004032:	f300 81df 	bgt.w	80043f4 <_svfprintf_r+0x9dc>
 8004036:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004038:	9821      	ldr	r0, [sp, #132]	; 0x84
 800403a:	6066      	str	r6, [r4, #4]
 800403c:	3301      	adds	r3, #1
 800403e:	4406      	add	r6, r0
 8004040:	2b07      	cmp	r3, #7
 8004042:	9621      	str	r6, [sp, #132]	; 0x84
 8004044:	9320      	str	r3, [sp, #128]	; 0x80
 8004046:	f300 81ec 	bgt.w	8004422 <_svfprintf_r+0xa0a>
 800404a:	3408      	adds	r4, #8
 800404c:	05eb      	lsls	r3, r5, #23
 800404e:	f100 81f2 	bmi.w	8004436 <_svfprintf_r+0xa1e>
 8004052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004054:	e884 0300 	stmia.w	r4, {r8, r9}
 8004058:	444b      	add	r3, r9
 800405a:	9321      	str	r3, [sp, #132]	; 0x84
 800405c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800405e:	3301      	adds	r3, #1
 8004060:	2b07      	cmp	r3, #7
 8004062:	9320      	str	r3, [sp, #128]	; 0x80
 8004064:	f340 8419 	ble.w	800489a <_svfprintf_r+0xe82>
 8004068:	aa1f      	add	r2, sp, #124	; 0x7c
 800406a:	4651      	mov	r1, sl
 800406c:	4658      	mov	r0, fp
 800406e:	f002 f81d 	bl	80060ac <__ssprint_r>
 8004072:	2800      	cmp	r0, #0
 8004074:	f040 8431 	bne.w	80048da <_svfprintf_r+0xec2>
 8004078:	ac2c      	add	r4, sp, #176	; 0xb0
 800407a:	076b      	lsls	r3, r5, #29
 800407c:	f100 8410 	bmi.w	80048a0 <_svfprintf_r+0xe88>
 8004080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004084:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004086:	428a      	cmp	r2, r1
 8004088:	bfac      	ite	ge
 800408a:	189b      	addge	r3, r3, r2
 800408c:	185b      	addlt	r3, r3, r1
 800408e:	9309      	str	r3, [sp, #36]	; 0x24
 8004090:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004092:	b13b      	cbz	r3, 80040a4 <_svfprintf_r+0x68c>
 8004094:	aa1f      	add	r2, sp, #124	; 0x7c
 8004096:	4651      	mov	r1, sl
 8004098:	4658      	mov	r0, fp
 800409a:	f002 f807 	bl	80060ac <__ssprint_r>
 800409e:	2800      	cmp	r0, #0
 80040a0:	f040 841b 	bne.w	80048da <_svfprintf_r+0xec2>
 80040a4:	2300      	movs	r3, #0
 80040a6:	9320      	str	r3, [sp, #128]	; 0x80
 80040a8:	9f04      	ldr	r7, [sp, #16]
 80040aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80040ac:	e4ee      	b.n	8003a8c <_svfprintf_r+0x74>
 80040ae:	9b02      	ldr	r3, [sp, #8]
 80040b0:	2b65      	cmp	r3, #101	; 0x65
 80040b2:	f77f af0b 	ble.w	8003ecc <_svfprintf_r+0x4b4>
 80040b6:	9b02      	ldr	r3, [sp, #8]
 80040b8:	2b66      	cmp	r3, #102	; 0x66
 80040ba:	d124      	bne.n	8004106 <_svfprintf_r+0x6ee>
 80040bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040be:	2b00      	cmp	r3, #0
 80040c0:	dd19      	ble.n	80040f6 <_svfprintf_r+0x6de>
 80040c2:	f1b9 0f00 	cmp.w	r9, #0
 80040c6:	d101      	bne.n	80040cc <_svfprintf_r+0x6b4>
 80040c8:	07ea      	lsls	r2, r5, #31
 80040ca:	d502      	bpl.n	80040d2 <_svfprintf_r+0x6ba>
 80040cc:	9a08      	ldr	r2, [sp, #32]
 80040ce:	4413      	add	r3, r2
 80040d0:	444b      	add	r3, r9
 80040d2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80040d4:	4699      	mov	r9, r3
 80040d6:	e735      	b.n	8003f44 <_svfprintf_r+0x52c>
 80040d8:	460a      	mov	r2, r1
 80040da:	e70c      	b.n	8003ef6 <_svfprintf_r+0x4de>
 80040dc:	f812 1b01 	ldrb.w	r1, [r2], #1
 80040e0:	f803 1b01 	strb.w	r1, [r3], #1
 80040e4:	e71c      	b.n	8003f20 <_svfprintf_r+0x508>
 80040e6:	2230      	movs	r2, #48	; 0x30
 80040e8:	4413      	add	r3, r2
 80040ea:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80040ee:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80040f2:	a91c      	add	r1, sp, #112	; 0x70
 80040f4:	e718      	b.n	8003f28 <_svfprintf_r+0x510>
 80040f6:	f1b9 0f00 	cmp.w	r9, #0
 80040fa:	d101      	bne.n	8004100 <_svfprintf_r+0x6e8>
 80040fc:	07eb      	lsls	r3, r5, #31
 80040fe:	d515      	bpl.n	800412c <_svfprintf_r+0x714>
 8004100:	9b08      	ldr	r3, [sp, #32]
 8004102:	3301      	adds	r3, #1
 8004104:	e7e4      	b.n	80040d0 <_svfprintf_r+0x6b8>
 8004106:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004108:	9b03      	ldr	r3, [sp, #12]
 800410a:	429a      	cmp	r2, r3
 800410c:	db06      	blt.n	800411c <_svfprintf_r+0x704>
 800410e:	07ef      	lsls	r7, r5, #31
 8004110:	d50e      	bpl.n	8004130 <_svfprintf_r+0x718>
 8004112:	9b08      	ldr	r3, [sp, #32]
 8004114:	4413      	add	r3, r2
 8004116:	2267      	movs	r2, #103	; 0x67
 8004118:	9202      	str	r2, [sp, #8]
 800411a:	e7da      	b.n	80040d2 <_svfprintf_r+0x6ba>
 800411c:	9b03      	ldr	r3, [sp, #12]
 800411e:	9908      	ldr	r1, [sp, #32]
 8004120:	2a00      	cmp	r2, #0
 8004122:	440b      	add	r3, r1
 8004124:	dcf7      	bgt.n	8004116 <_svfprintf_r+0x6fe>
 8004126:	f1c2 0201 	rsb	r2, r2, #1
 800412a:	e7f3      	b.n	8004114 <_svfprintf_r+0x6fc>
 800412c:	2301      	movs	r3, #1
 800412e:	e7d0      	b.n	80040d2 <_svfprintf_r+0x6ba>
 8004130:	4613      	mov	r3, r2
 8004132:	e7f0      	b.n	8004116 <_svfprintf_r+0x6fe>
 8004134:	b10b      	cbz	r3, 800413a <_svfprintf_r+0x722>
 8004136:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800413a:	f015 0f20 	tst.w	r5, #32
 800413e:	f107 0304 	add.w	r3, r7, #4
 8004142:	d008      	beq.n	8004156 <_svfprintf_r+0x73e>
 8004144:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	17ce      	asrs	r6, r1, #31
 800414a:	4608      	mov	r0, r1
 800414c:	4631      	mov	r1, r6
 800414e:	e9c2 0100 	strd	r0, r1, [r2]
 8004152:	461f      	mov	r7, r3
 8004154:	e49a      	b.n	8003a8c <_svfprintf_r+0x74>
 8004156:	06ee      	lsls	r6, r5, #27
 8004158:	d503      	bpl.n	8004162 <_svfprintf_r+0x74a>
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800415e:	6011      	str	r1, [r2, #0]
 8004160:	e7f7      	b.n	8004152 <_svfprintf_r+0x73a>
 8004162:	0668      	lsls	r0, r5, #25
 8004164:	d5f9      	bpl.n	800415a <_svfprintf_r+0x742>
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800416c:	8011      	strh	r1, [r2, #0]
 800416e:	e7f0      	b.n	8004152 <_svfprintf_r+0x73a>
 8004170:	f045 0510 	orr.w	r5, r5, #16
 8004174:	f015 0320 	ands.w	r3, r5, #32
 8004178:	d022      	beq.n	80041c0 <_svfprintf_r+0x7a8>
 800417a:	3707      	adds	r7, #7
 800417c:	f027 0707 	bic.w	r7, r7, #7
 8004180:	f107 0308 	add.w	r3, r7, #8
 8004184:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004188:	9304      	str	r3, [sp, #16]
 800418a:	2300      	movs	r3, #0
 800418c:	2200      	movs	r2, #0
 800418e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004192:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004196:	f000 83db 	beq.w	8004950 <_svfprintf_r+0xf38>
 800419a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800419e:	920b      	str	r2, [sp, #44]	; 0x2c
 80041a0:	ea56 0207 	orrs.w	r2, r6, r7
 80041a4:	f040 83d9 	bne.w	800495a <_svfprintf_r+0xf42>
 80041a8:	f1b9 0f00 	cmp.w	r9, #0
 80041ac:	f000 80aa 	beq.w	8004304 <_svfprintf_r+0x8ec>
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d076      	beq.n	80042a2 <_svfprintf_r+0x88a>
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	f000 8091 	beq.w	80042dc <_svfprintf_r+0x8c4>
 80041ba:	2600      	movs	r6, #0
 80041bc:	2700      	movs	r7, #0
 80041be:	e3d2      	b.n	8004966 <_svfprintf_r+0xf4e>
 80041c0:	1d3a      	adds	r2, r7, #4
 80041c2:	f015 0110 	ands.w	r1, r5, #16
 80041c6:	9204      	str	r2, [sp, #16]
 80041c8:	d002      	beq.n	80041d0 <_svfprintf_r+0x7b8>
 80041ca:	683e      	ldr	r6, [r7, #0]
 80041cc:	2700      	movs	r7, #0
 80041ce:	e7dd      	b.n	800418c <_svfprintf_r+0x774>
 80041d0:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80041d4:	d0f9      	beq.n	80041ca <_svfprintf_r+0x7b2>
 80041d6:	883e      	ldrh	r6, [r7, #0]
 80041d8:	2700      	movs	r7, #0
 80041da:	e7d6      	b.n	800418a <_svfprintf_r+0x772>
 80041dc:	1d3b      	adds	r3, r7, #4
 80041de:	9304      	str	r3, [sp, #16]
 80041e0:	2330      	movs	r3, #48	; 0x30
 80041e2:	2278      	movs	r2, #120	; 0x78
 80041e4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80041e8:	4b14      	ldr	r3, [pc, #80]	; (800423c <_svfprintf_r+0x824>)
 80041ea:	683e      	ldr	r6, [r7, #0]
 80041ec:	9311      	str	r3, [sp, #68]	; 0x44
 80041ee:	2700      	movs	r7, #0
 80041f0:	f045 0502 	orr.w	r5, r5, #2
 80041f4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80041f8:	2302      	movs	r3, #2
 80041fa:	9202      	str	r2, [sp, #8]
 80041fc:	e7c6      	b.n	800418c <_svfprintf_r+0x774>
 80041fe:	1d3b      	adds	r3, r7, #4
 8004200:	2600      	movs	r6, #0
 8004202:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004206:	9304      	str	r3, [sp, #16]
 8004208:	f8d7 8000 	ldr.w	r8, [r7]
 800420c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004210:	d00a      	beq.n	8004228 <_svfprintf_r+0x810>
 8004212:	464a      	mov	r2, r9
 8004214:	4631      	mov	r1, r6
 8004216:	4640      	mov	r0, r8
 8004218:	f7fb ffe2 	bl	80001e0 <memchr>
 800421c:	2800      	cmp	r0, #0
 800421e:	f000 808d 	beq.w	800433c <_svfprintf_r+0x924>
 8004222:	eba0 0908 	sub.w	r9, r0, r8
 8004226:	e5cb      	b.n	8003dc0 <_svfprintf_r+0x3a8>
 8004228:	4640      	mov	r0, r8
 800422a:	f7fb ffd1 	bl	80001d0 <strlen>
 800422e:	4681      	mov	r9, r0
 8004230:	e5c6      	b.n	8003dc0 <_svfprintf_r+0x3a8>
 8004232:	bf00      	nop
 8004234:	080068fb 	.word	0x080068fb
 8004238:	0800690b 	.word	0x0800690b
 800423c:	080068e8 	.word	0x080068e8
 8004240:	f045 0510 	orr.w	r5, r5, #16
 8004244:	06a9      	lsls	r1, r5, #26
 8004246:	d509      	bpl.n	800425c <_svfprintf_r+0x844>
 8004248:	3707      	adds	r7, #7
 800424a:	f027 0707 	bic.w	r7, r7, #7
 800424e:	f107 0308 	add.w	r3, r7, #8
 8004252:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004256:	9304      	str	r3, [sp, #16]
 8004258:	2301      	movs	r3, #1
 800425a:	e797      	b.n	800418c <_svfprintf_r+0x774>
 800425c:	1d3b      	adds	r3, r7, #4
 800425e:	f015 0f10 	tst.w	r5, #16
 8004262:	9304      	str	r3, [sp, #16]
 8004264:	d001      	beq.n	800426a <_svfprintf_r+0x852>
 8004266:	683e      	ldr	r6, [r7, #0]
 8004268:	e002      	b.n	8004270 <_svfprintf_r+0x858>
 800426a:	066a      	lsls	r2, r5, #25
 800426c:	d5fb      	bpl.n	8004266 <_svfprintf_r+0x84e>
 800426e:	883e      	ldrh	r6, [r7, #0]
 8004270:	2700      	movs	r7, #0
 8004272:	e7f1      	b.n	8004258 <_svfprintf_r+0x840>
 8004274:	b10b      	cbz	r3, 800427a <_svfprintf_r+0x862>
 8004276:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800427a:	4ba3      	ldr	r3, [pc, #652]	; (8004508 <_svfprintf_r+0xaf0>)
 800427c:	e4c2      	b.n	8003c04 <_svfprintf_r+0x1ec>
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	f015 0f10 	tst.w	r5, #16
 8004284:	9304      	str	r3, [sp, #16]
 8004286:	d001      	beq.n	800428c <_svfprintf_r+0x874>
 8004288:	683e      	ldr	r6, [r7, #0]
 800428a:	e002      	b.n	8004292 <_svfprintf_r+0x87a>
 800428c:	066e      	lsls	r6, r5, #25
 800428e:	d5fb      	bpl.n	8004288 <_svfprintf_r+0x870>
 8004290:	883e      	ldrh	r6, [r7, #0]
 8004292:	2700      	movs	r7, #0
 8004294:	e4c2      	b.n	8003c1c <_svfprintf_r+0x204>
 8004296:	4643      	mov	r3, r8
 8004298:	e366      	b.n	8004968 <_svfprintf_r+0xf50>
 800429a:	2f00      	cmp	r7, #0
 800429c:	bf08      	it	eq
 800429e:	2e0a      	cmpeq	r6, #10
 80042a0:	d205      	bcs.n	80042ae <_svfprintf_r+0x896>
 80042a2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80042a6:	3630      	adds	r6, #48	; 0x30
 80042a8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80042ac:	e377      	b.n	800499e <_svfprintf_r+0xf86>
 80042ae:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80042b2:	4630      	mov	r0, r6
 80042b4:	4639      	mov	r1, r7
 80042b6:	220a      	movs	r2, #10
 80042b8:	2300      	movs	r3, #0
 80042ba:	f7fc fcc1 	bl	8000c40 <__aeabi_uldivmod>
 80042be:	3230      	adds	r2, #48	; 0x30
 80042c0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80042c4:	2300      	movs	r3, #0
 80042c6:	4630      	mov	r0, r6
 80042c8:	4639      	mov	r1, r7
 80042ca:	220a      	movs	r2, #10
 80042cc:	f7fc fcb8 	bl	8000c40 <__aeabi_uldivmod>
 80042d0:	4606      	mov	r6, r0
 80042d2:	460f      	mov	r7, r1
 80042d4:	ea56 0307 	orrs.w	r3, r6, r7
 80042d8:	d1eb      	bne.n	80042b2 <_svfprintf_r+0x89a>
 80042da:	e360      	b.n	800499e <_svfprintf_r+0xf86>
 80042dc:	2600      	movs	r6, #0
 80042de:	2700      	movs	r7, #0
 80042e0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80042e4:	f006 030f 	and.w	r3, r6, #15
 80042e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80042ea:	5cd3      	ldrb	r3, [r2, r3]
 80042ec:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80042f0:	0933      	lsrs	r3, r6, #4
 80042f2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80042f6:	093a      	lsrs	r2, r7, #4
 80042f8:	461e      	mov	r6, r3
 80042fa:	4617      	mov	r7, r2
 80042fc:	ea56 0307 	orrs.w	r3, r6, r7
 8004300:	d1f0      	bne.n	80042e4 <_svfprintf_r+0x8cc>
 8004302:	e34c      	b.n	800499e <_svfprintf_r+0xf86>
 8004304:	b93b      	cbnz	r3, 8004316 <_svfprintf_r+0x8fe>
 8004306:	07ea      	lsls	r2, r5, #31
 8004308:	d505      	bpl.n	8004316 <_svfprintf_r+0x8fe>
 800430a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800430e:	2330      	movs	r3, #48	; 0x30
 8004310:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8004314:	e343      	b.n	800499e <_svfprintf_r+0xf86>
 8004316:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800431a:	e340      	b.n	800499e <_svfprintf_r+0xf86>
 800431c:	b10b      	cbz	r3, 8004322 <_svfprintf_r+0x90a>
 800431e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004322:	9b02      	ldr	r3, [sp, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 82f7 	beq.w	8004918 <_svfprintf_r+0xf00>
 800432a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800432e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004332:	2600      	movs	r6, #0
 8004334:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004338:	9704      	str	r7, [sp, #16]
 800433a:	e4e8      	b.n	8003d0e <_svfprintf_r+0x2f6>
 800433c:	4606      	mov	r6, r0
 800433e:	e53f      	b.n	8003dc0 <_svfprintf_r+0x3a8>
 8004340:	2310      	movs	r3, #16
 8004342:	6063      	str	r3, [r4, #4]
 8004344:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004346:	3310      	adds	r3, #16
 8004348:	9321      	str	r3, [sp, #132]	; 0x84
 800434a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800434c:	3301      	adds	r3, #1
 800434e:	2b07      	cmp	r3, #7
 8004350:	9320      	str	r3, [sp, #128]	; 0x80
 8004352:	dc04      	bgt.n	800435e <_svfprintf_r+0x946>
 8004354:	3408      	adds	r4, #8
 8004356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004358:	3b10      	subs	r3, #16
 800435a:	930c      	str	r3, [sp, #48]	; 0x30
 800435c:	e615      	b.n	8003f8a <_svfprintf_r+0x572>
 800435e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004360:	4651      	mov	r1, sl
 8004362:	4658      	mov	r0, fp
 8004364:	f001 fea2 	bl	80060ac <__ssprint_r>
 8004368:	2800      	cmp	r0, #0
 800436a:	f040 82b6 	bne.w	80048da <_svfprintf_r+0xec2>
 800436e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004370:	e7f1      	b.n	8004356 <_svfprintf_r+0x93e>
 8004372:	aa1f      	add	r2, sp, #124	; 0x7c
 8004374:	4651      	mov	r1, sl
 8004376:	4658      	mov	r0, fp
 8004378:	f001 fe98 	bl	80060ac <__ssprint_r>
 800437c:	2800      	cmp	r0, #0
 800437e:	f040 82ac 	bne.w	80048da <_svfprintf_r+0xec2>
 8004382:	ac2c      	add	r4, sp, #176	; 0xb0
 8004384:	e614      	b.n	8003fb0 <_svfprintf_r+0x598>
 8004386:	aa1f      	add	r2, sp, #124	; 0x7c
 8004388:	4651      	mov	r1, sl
 800438a:	4658      	mov	r0, fp
 800438c:	f001 fe8e 	bl	80060ac <__ssprint_r>
 8004390:	2800      	cmp	r0, #0
 8004392:	f040 82a2 	bne.w	80048da <_svfprintf_r+0xec2>
 8004396:	ac2c      	add	r4, sp, #176	; 0xb0
 8004398:	e61c      	b.n	8003fd4 <_svfprintf_r+0x5bc>
 800439a:	aa1f      	add	r2, sp, #124	; 0x7c
 800439c:	4651      	mov	r1, sl
 800439e:	4658      	mov	r0, fp
 80043a0:	f001 fe84 	bl	80060ac <__ssprint_r>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	f040 8298 	bne.w	80048da <_svfprintf_r+0xec2>
 80043aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80043ac:	e622      	b.n	8003ff4 <_svfprintf_r+0x5dc>
 80043ae:	2210      	movs	r2, #16
 80043b0:	6062      	str	r2, [r4, #4]
 80043b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80043b4:	3210      	adds	r2, #16
 80043b6:	9221      	str	r2, [sp, #132]	; 0x84
 80043b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80043ba:	3201      	adds	r2, #1
 80043bc:	2a07      	cmp	r2, #7
 80043be:	9220      	str	r2, [sp, #128]	; 0x80
 80043c0:	dc02      	bgt.n	80043c8 <_svfprintf_r+0x9b0>
 80043c2:	3408      	adds	r4, #8
 80043c4:	3b10      	subs	r3, #16
 80043c6:	e61d      	b.n	8004004 <_svfprintf_r+0x5ec>
 80043c8:	aa1f      	add	r2, sp, #124	; 0x7c
 80043ca:	4651      	mov	r1, sl
 80043cc:	4658      	mov	r0, fp
 80043ce:	930c      	str	r3, [sp, #48]	; 0x30
 80043d0:	f001 fe6c 	bl	80060ac <__ssprint_r>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	f040 8280 	bne.w	80048da <_svfprintf_r+0xec2>
 80043da:	ac2c      	add	r4, sp, #176	; 0xb0
 80043dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043de:	e7f1      	b.n	80043c4 <_svfprintf_r+0x9ac>
 80043e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80043e2:	4651      	mov	r1, sl
 80043e4:	4658      	mov	r0, fp
 80043e6:	f001 fe61 	bl	80060ac <__ssprint_r>
 80043ea:	2800      	cmp	r0, #0
 80043ec:	f040 8275 	bne.w	80048da <_svfprintf_r+0xec2>
 80043f0:	ac2c      	add	r4, sp, #176	; 0xb0
 80043f2:	e617      	b.n	8004024 <_svfprintf_r+0x60c>
 80043f4:	2310      	movs	r3, #16
 80043f6:	6063      	str	r3, [r4, #4]
 80043f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043fa:	3310      	adds	r3, #16
 80043fc:	9321      	str	r3, [sp, #132]	; 0x84
 80043fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004400:	3301      	adds	r3, #1
 8004402:	2b07      	cmp	r3, #7
 8004404:	9320      	str	r3, [sp, #128]	; 0x80
 8004406:	dc02      	bgt.n	800440e <_svfprintf_r+0x9f6>
 8004408:	3408      	adds	r4, #8
 800440a:	3e10      	subs	r6, #16
 800440c:	e60e      	b.n	800402c <_svfprintf_r+0x614>
 800440e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004410:	4651      	mov	r1, sl
 8004412:	4658      	mov	r0, fp
 8004414:	f001 fe4a 	bl	80060ac <__ssprint_r>
 8004418:	2800      	cmp	r0, #0
 800441a:	f040 825e 	bne.w	80048da <_svfprintf_r+0xec2>
 800441e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004420:	e7f3      	b.n	800440a <_svfprintf_r+0x9f2>
 8004422:	aa1f      	add	r2, sp, #124	; 0x7c
 8004424:	4651      	mov	r1, sl
 8004426:	4658      	mov	r0, fp
 8004428:	f001 fe40 	bl	80060ac <__ssprint_r>
 800442c:	2800      	cmp	r0, #0
 800442e:	f040 8254 	bne.w	80048da <_svfprintf_r+0xec2>
 8004432:	ac2c      	add	r4, sp, #176	; 0xb0
 8004434:	e60a      	b.n	800404c <_svfprintf_r+0x634>
 8004436:	9b02      	ldr	r3, [sp, #8]
 8004438:	2b65      	cmp	r3, #101	; 0x65
 800443a:	f340 81a9 	ble.w	8004790 <_svfprintf_r+0xd78>
 800443e:	2200      	movs	r2, #0
 8004440:	2300      	movs	r3, #0
 8004442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004446:	f7fc fb3b 	bl	8000ac0 <__aeabi_dcmpeq>
 800444a:	2800      	cmp	r0, #0
 800444c:	d062      	beq.n	8004514 <_svfprintf_r+0xafc>
 800444e:	4b2f      	ldr	r3, [pc, #188]	; (800450c <_svfprintf_r+0xaf4>)
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	2301      	movs	r3, #1
 8004454:	6063      	str	r3, [r4, #4]
 8004456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004458:	3301      	adds	r3, #1
 800445a:	9321      	str	r3, [sp, #132]	; 0x84
 800445c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800445e:	3301      	adds	r3, #1
 8004460:	2b07      	cmp	r3, #7
 8004462:	9320      	str	r3, [sp, #128]	; 0x80
 8004464:	dc25      	bgt.n	80044b2 <_svfprintf_r+0xa9a>
 8004466:	3408      	adds	r4, #8
 8004468:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800446a:	9a03      	ldr	r2, [sp, #12]
 800446c:	4293      	cmp	r3, r2
 800446e:	db02      	blt.n	8004476 <_svfprintf_r+0xa5e>
 8004470:	07ee      	lsls	r6, r5, #31
 8004472:	f57f ae02 	bpl.w	800407a <_svfprintf_r+0x662>
 8004476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	9b08      	ldr	r3, [sp, #32]
 800447c:	6063      	str	r3, [r4, #4]
 800447e:	9a08      	ldr	r2, [sp, #32]
 8004480:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004482:	4413      	add	r3, r2
 8004484:	9321      	str	r3, [sp, #132]	; 0x84
 8004486:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004488:	3301      	adds	r3, #1
 800448a:	2b07      	cmp	r3, #7
 800448c:	9320      	str	r3, [sp, #128]	; 0x80
 800448e:	dc1a      	bgt.n	80044c6 <_svfprintf_r+0xaae>
 8004490:	3408      	adds	r4, #8
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	1e5e      	subs	r6, r3, #1
 8004496:	2e00      	cmp	r6, #0
 8004498:	f77f adef 	ble.w	800407a <_svfprintf_r+0x662>
 800449c:	4f1c      	ldr	r7, [pc, #112]	; (8004510 <_svfprintf_r+0xaf8>)
 800449e:	f04f 0810 	mov.w	r8, #16
 80044a2:	2e10      	cmp	r6, #16
 80044a4:	6027      	str	r7, [r4, #0]
 80044a6:	dc18      	bgt.n	80044da <_svfprintf_r+0xac2>
 80044a8:	6066      	str	r6, [r4, #4]
 80044aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044ac:	441e      	add	r6, r3
 80044ae:	9621      	str	r6, [sp, #132]	; 0x84
 80044b0:	e5d4      	b.n	800405c <_svfprintf_r+0x644>
 80044b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80044b4:	4651      	mov	r1, sl
 80044b6:	4658      	mov	r0, fp
 80044b8:	f001 fdf8 	bl	80060ac <__ssprint_r>
 80044bc:	2800      	cmp	r0, #0
 80044be:	f040 820c 	bne.w	80048da <_svfprintf_r+0xec2>
 80044c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80044c4:	e7d0      	b.n	8004468 <_svfprintf_r+0xa50>
 80044c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80044c8:	4651      	mov	r1, sl
 80044ca:	4658      	mov	r0, fp
 80044cc:	f001 fdee 	bl	80060ac <__ssprint_r>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	f040 8202 	bne.w	80048da <_svfprintf_r+0xec2>
 80044d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80044d8:	e7db      	b.n	8004492 <_svfprintf_r+0xa7a>
 80044da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044dc:	f8c4 8004 	str.w	r8, [r4, #4]
 80044e0:	3310      	adds	r3, #16
 80044e2:	9321      	str	r3, [sp, #132]	; 0x84
 80044e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044e6:	3301      	adds	r3, #1
 80044e8:	2b07      	cmp	r3, #7
 80044ea:	9320      	str	r3, [sp, #128]	; 0x80
 80044ec:	dc02      	bgt.n	80044f4 <_svfprintf_r+0xadc>
 80044ee:	3408      	adds	r4, #8
 80044f0:	3e10      	subs	r6, #16
 80044f2:	e7d6      	b.n	80044a2 <_svfprintf_r+0xa8a>
 80044f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80044f6:	4651      	mov	r1, sl
 80044f8:	4658      	mov	r0, fp
 80044fa:	f001 fdd7 	bl	80060ac <__ssprint_r>
 80044fe:	2800      	cmp	r0, #0
 8004500:	f040 81eb 	bne.w	80048da <_svfprintf_r+0xec2>
 8004504:	ac2c      	add	r4, sp, #176	; 0xb0
 8004506:	e7f3      	b.n	80044f0 <_svfprintf_r+0xad8>
 8004508:	080068e8 	.word	0x080068e8
 800450c:	080068f9 	.word	0x080068f9
 8004510:	0800690b 	.word	0x0800690b
 8004514:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004516:	2b00      	cmp	r3, #0
 8004518:	dc7a      	bgt.n	8004610 <_svfprintf_r+0xbf8>
 800451a:	4b9b      	ldr	r3, [pc, #620]	; (8004788 <_svfprintf_r+0xd70>)
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	2301      	movs	r3, #1
 8004520:	6063      	str	r3, [r4, #4]
 8004522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004524:	3301      	adds	r3, #1
 8004526:	9321      	str	r3, [sp, #132]	; 0x84
 8004528:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800452a:	3301      	adds	r3, #1
 800452c:	2b07      	cmp	r3, #7
 800452e:	9320      	str	r3, [sp, #128]	; 0x80
 8004530:	dc44      	bgt.n	80045bc <_svfprintf_r+0xba4>
 8004532:	3408      	adds	r4, #8
 8004534:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004536:	b923      	cbnz	r3, 8004542 <_svfprintf_r+0xb2a>
 8004538:	9b03      	ldr	r3, [sp, #12]
 800453a:	b913      	cbnz	r3, 8004542 <_svfprintf_r+0xb2a>
 800453c:	07e8      	lsls	r0, r5, #31
 800453e:	f57f ad9c 	bpl.w	800407a <_svfprintf_r+0x662>
 8004542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	9b08      	ldr	r3, [sp, #32]
 8004548:	6063      	str	r3, [r4, #4]
 800454a:	9a08      	ldr	r2, [sp, #32]
 800454c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800454e:	4413      	add	r3, r2
 8004550:	9321      	str	r3, [sp, #132]	; 0x84
 8004552:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004554:	3301      	adds	r3, #1
 8004556:	2b07      	cmp	r3, #7
 8004558:	9320      	str	r3, [sp, #128]	; 0x80
 800455a:	dc39      	bgt.n	80045d0 <_svfprintf_r+0xbb8>
 800455c:	f104 0308 	add.w	r3, r4, #8
 8004560:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004562:	2e00      	cmp	r6, #0
 8004564:	da19      	bge.n	800459a <_svfprintf_r+0xb82>
 8004566:	4f89      	ldr	r7, [pc, #548]	; (800478c <_svfprintf_r+0xd74>)
 8004568:	4276      	negs	r6, r6
 800456a:	2410      	movs	r4, #16
 800456c:	2e10      	cmp	r6, #16
 800456e:	601f      	str	r7, [r3, #0]
 8004570:	dc38      	bgt.n	80045e4 <_svfprintf_r+0xbcc>
 8004572:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004574:	605e      	str	r6, [r3, #4]
 8004576:	4416      	add	r6, r2
 8004578:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800457a:	9621      	str	r6, [sp, #132]	; 0x84
 800457c:	3201      	adds	r2, #1
 800457e:	2a07      	cmp	r2, #7
 8004580:	f103 0308 	add.w	r3, r3, #8
 8004584:	9220      	str	r2, [sp, #128]	; 0x80
 8004586:	dd08      	ble.n	800459a <_svfprintf_r+0xb82>
 8004588:	aa1f      	add	r2, sp, #124	; 0x7c
 800458a:	4651      	mov	r1, sl
 800458c:	4658      	mov	r0, fp
 800458e:	f001 fd8d 	bl	80060ac <__ssprint_r>
 8004592:	2800      	cmp	r0, #0
 8004594:	f040 81a1 	bne.w	80048da <_svfprintf_r+0xec2>
 8004598:	ab2c      	add	r3, sp, #176	; 0xb0
 800459a:	9a03      	ldr	r2, [sp, #12]
 800459c:	605a      	str	r2, [r3, #4]
 800459e:	9903      	ldr	r1, [sp, #12]
 80045a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80045a2:	f8c3 8000 	str.w	r8, [r3]
 80045a6:	440a      	add	r2, r1
 80045a8:	9221      	str	r2, [sp, #132]	; 0x84
 80045aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80045ac:	3201      	adds	r2, #1
 80045ae:	2a07      	cmp	r2, #7
 80045b0:	9220      	str	r2, [sp, #128]	; 0x80
 80045b2:	f73f ad59 	bgt.w	8004068 <_svfprintf_r+0x650>
 80045b6:	f103 0408 	add.w	r4, r3, #8
 80045ba:	e55e      	b.n	800407a <_svfprintf_r+0x662>
 80045bc:	aa1f      	add	r2, sp, #124	; 0x7c
 80045be:	4651      	mov	r1, sl
 80045c0:	4658      	mov	r0, fp
 80045c2:	f001 fd73 	bl	80060ac <__ssprint_r>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	f040 8187 	bne.w	80048da <_svfprintf_r+0xec2>
 80045cc:	ac2c      	add	r4, sp, #176	; 0xb0
 80045ce:	e7b1      	b.n	8004534 <_svfprintf_r+0xb1c>
 80045d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80045d2:	4651      	mov	r1, sl
 80045d4:	4658      	mov	r0, fp
 80045d6:	f001 fd69 	bl	80060ac <__ssprint_r>
 80045da:	2800      	cmp	r0, #0
 80045dc:	f040 817d 	bne.w	80048da <_svfprintf_r+0xec2>
 80045e0:	ab2c      	add	r3, sp, #176	; 0xb0
 80045e2:	e7bd      	b.n	8004560 <_svfprintf_r+0xb48>
 80045e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80045e6:	605c      	str	r4, [r3, #4]
 80045e8:	3210      	adds	r2, #16
 80045ea:	9221      	str	r2, [sp, #132]	; 0x84
 80045ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80045ee:	3201      	adds	r2, #1
 80045f0:	2a07      	cmp	r2, #7
 80045f2:	9220      	str	r2, [sp, #128]	; 0x80
 80045f4:	dc02      	bgt.n	80045fc <_svfprintf_r+0xbe4>
 80045f6:	3308      	adds	r3, #8
 80045f8:	3e10      	subs	r6, #16
 80045fa:	e7b7      	b.n	800456c <_svfprintf_r+0xb54>
 80045fc:	aa1f      	add	r2, sp, #124	; 0x7c
 80045fe:	4651      	mov	r1, sl
 8004600:	4658      	mov	r0, fp
 8004602:	f001 fd53 	bl	80060ac <__ssprint_r>
 8004606:	2800      	cmp	r0, #0
 8004608:	f040 8167 	bne.w	80048da <_svfprintf_r+0xec2>
 800460c:	ab2c      	add	r3, sp, #176	; 0xb0
 800460e:	e7f3      	b.n	80045f8 <_svfprintf_r+0xbe0>
 8004610:	9b03      	ldr	r3, [sp, #12]
 8004612:	42bb      	cmp	r3, r7
 8004614:	bfa8      	it	ge
 8004616:	463b      	movge	r3, r7
 8004618:	2b00      	cmp	r3, #0
 800461a:	461e      	mov	r6, r3
 800461c:	dd0b      	ble.n	8004636 <_svfprintf_r+0xc1e>
 800461e:	6063      	str	r3, [r4, #4]
 8004620:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004622:	f8c4 8000 	str.w	r8, [r4]
 8004626:	4433      	add	r3, r6
 8004628:	9321      	str	r3, [sp, #132]	; 0x84
 800462a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800462c:	3301      	adds	r3, #1
 800462e:	2b07      	cmp	r3, #7
 8004630:	9320      	str	r3, [sp, #128]	; 0x80
 8004632:	dc5f      	bgt.n	80046f4 <_svfprintf_r+0xcdc>
 8004634:	3408      	adds	r4, #8
 8004636:	2e00      	cmp	r6, #0
 8004638:	bfac      	ite	ge
 800463a:	1bbe      	subge	r6, r7, r6
 800463c:	463e      	movlt	r6, r7
 800463e:	2e00      	cmp	r6, #0
 8004640:	dd0f      	ble.n	8004662 <_svfprintf_r+0xc4a>
 8004642:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800478c <_svfprintf_r+0xd74>
 8004646:	f8c4 9000 	str.w	r9, [r4]
 800464a:	2e10      	cmp	r6, #16
 800464c:	dc5c      	bgt.n	8004708 <_svfprintf_r+0xcf0>
 800464e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004650:	6066      	str	r6, [r4, #4]
 8004652:	441e      	add	r6, r3
 8004654:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004656:	9621      	str	r6, [sp, #132]	; 0x84
 8004658:	3301      	adds	r3, #1
 800465a:	2b07      	cmp	r3, #7
 800465c:	9320      	str	r3, [sp, #128]	; 0x80
 800465e:	dc6a      	bgt.n	8004736 <_svfprintf_r+0xd1e>
 8004660:	3408      	adds	r4, #8
 8004662:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004664:	9a03      	ldr	r2, [sp, #12]
 8004666:	4293      	cmp	r3, r2
 8004668:	db01      	blt.n	800466e <_svfprintf_r+0xc56>
 800466a:	07e9      	lsls	r1, r5, #31
 800466c:	d50d      	bpl.n	800468a <_svfprintf_r+0xc72>
 800466e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	9b08      	ldr	r3, [sp, #32]
 8004674:	6063      	str	r3, [r4, #4]
 8004676:	9a08      	ldr	r2, [sp, #32]
 8004678:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800467a:	4413      	add	r3, r2
 800467c:	9321      	str	r3, [sp, #132]	; 0x84
 800467e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004680:	3301      	adds	r3, #1
 8004682:	2b07      	cmp	r3, #7
 8004684:	9320      	str	r3, [sp, #128]	; 0x80
 8004686:	dc60      	bgt.n	800474a <_svfprintf_r+0xd32>
 8004688:	3408      	adds	r4, #8
 800468a:	9b03      	ldr	r3, [sp, #12]
 800468c:	9a03      	ldr	r2, [sp, #12]
 800468e:	1bde      	subs	r6, r3, r7
 8004690:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	429e      	cmp	r6, r3
 8004696:	bfa8      	it	ge
 8004698:	461e      	movge	r6, r3
 800469a:	2e00      	cmp	r6, #0
 800469c:	dd0b      	ble.n	80046b6 <_svfprintf_r+0xc9e>
 800469e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046a0:	6066      	str	r6, [r4, #4]
 80046a2:	4433      	add	r3, r6
 80046a4:	9321      	str	r3, [sp, #132]	; 0x84
 80046a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80046a8:	3301      	adds	r3, #1
 80046aa:	4447      	add	r7, r8
 80046ac:	2b07      	cmp	r3, #7
 80046ae:	6027      	str	r7, [r4, #0]
 80046b0:	9320      	str	r3, [sp, #128]	; 0x80
 80046b2:	dc54      	bgt.n	800475e <_svfprintf_r+0xd46>
 80046b4:	3408      	adds	r4, #8
 80046b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046b8:	9a03      	ldr	r2, [sp, #12]
 80046ba:	2e00      	cmp	r6, #0
 80046bc:	eba2 0303 	sub.w	r3, r2, r3
 80046c0:	bfac      	ite	ge
 80046c2:	1b9e      	subge	r6, r3, r6
 80046c4:	461e      	movlt	r6, r3
 80046c6:	2e00      	cmp	r6, #0
 80046c8:	f77f acd7 	ble.w	800407a <_svfprintf_r+0x662>
 80046cc:	4f2f      	ldr	r7, [pc, #188]	; (800478c <_svfprintf_r+0xd74>)
 80046ce:	f04f 0810 	mov.w	r8, #16
 80046d2:	2e10      	cmp	r6, #16
 80046d4:	6027      	str	r7, [r4, #0]
 80046d6:	f77f aee7 	ble.w	80044a8 <_svfprintf_r+0xa90>
 80046da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046dc:	f8c4 8004 	str.w	r8, [r4, #4]
 80046e0:	3310      	adds	r3, #16
 80046e2:	9321      	str	r3, [sp, #132]	; 0x84
 80046e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80046e6:	3301      	adds	r3, #1
 80046e8:	2b07      	cmp	r3, #7
 80046ea:	9320      	str	r3, [sp, #128]	; 0x80
 80046ec:	dc41      	bgt.n	8004772 <_svfprintf_r+0xd5a>
 80046ee:	3408      	adds	r4, #8
 80046f0:	3e10      	subs	r6, #16
 80046f2:	e7ee      	b.n	80046d2 <_svfprintf_r+0xcba>
 80046f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80046f6:	4651      	mov	r1, sl
 80046f8:	4658      	mov	r0, fp
 80046fa:	f001 fcd7 	bl	80060ac <__ssprint_r>
 80046fe:	2800      	cmp	r0, #0
 8004700:	f040 80eb 	bne.w	80048da <_svfprintf_r+0xec2>
 8004704:	ac2c      	add	r4, sp, #176	; 0xb0
 8004706:	e796      	b.n	8004636 <_svfprintf_r+0xc1e>
 8004708:	2310      	movs	r3, #16
 800470a:	6063      	str	r3, [r4, #4]
 800470c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800470e:	3310      	adds	r3, #16
 8004710:	9321      	str	r3, [sp, #132]	; 0x84
 8004712:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004714:	3301      	adds	r3, #1
 8004716:	2b07      	cmp	r3, #7
 8004718:	9320      	str	r3, [sp, #128]	; 0x80
 800471a:	dc02      	bgt.n	8004722 <_svfprintf_r+0xd0a>
 800471c:	3408      	adds	r4, #8
 800471e:	3e10      	subs	r6, #16
 8004720:	e791      	b.n	8004646 <_svfprintf_r+0xc2e>
 8004722:	aa1f      	add	r2, sp, #124	; 0x7c
 8004724:	4651      	mov	r1, sl
 8004726:	4658      	mov	r0, fp
 8004728:	f001 fcc0 	bl	80060ac <__ssprint_r>
 800472c:	2800      	cmp	r0, #0
 800472e:	f040 80d4 	bne.w	80048da <_svfprintf_r+0xec2>
 8004732:	ac2c      	add	r4, sp, #176	; 0xb0
 8004734:	e7f3      	b.n	800471e <_svfprintf_r+0xd06>
 8004736:	aa1f      	add	r2, sp, #124	; 0x7c
 8004738:	4651      	mov	r1, sl
 800473a:	4658      	mov	r0, fp
 800473c:	f001 fcb6 	bl	80060ac <__ssprint_r>
 8004740:	2800      	cmp	r0, #0
 8004742:	f040 80ca 	bne.w	80048da <_svfprintf_r+0xec2>
 8004746:	ac2c      	add	r4, sp, #176	; 0xb0
 8004748:	e78b      	b.n	8004662 <_svfprintf_r+0xc4a>
 800474a:	aa1f      	add	r2, sp, #124	; 0x7c
 800474c:	4651      	mov	r1, sl
 800474e:	4658      	mov	r0, fp
 8004750:	f001 fcac 	bl	80060ac <__ssprint_r>
 8004754:	2800      	cmp	r0, #0
 8004756:	f040 80c0 	bne.w	80048da <_svfprintf_r+0xec2>
 800475a:	ac2c      	add	r4, sp, #176	; 0xb0
 800475c:	e795      	b.n	800468a <_svfprintf_r+0xc72>
 800475e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004760:	4651      	mov	r1, sl
 8004762:	4658      	mov	r0, fp
 8004764:	f001 fca2 	bl	80060ac <__ssprint_r>
 8004768:	2800      	cmp	r0, #0
 800476a:	f040 80b6 	bne.w	80048da <_svfprintf_r+0xec2>
 800476e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004770:	e7a1      	b.n	80046b6 <_svfprintf_r+0xc9e>
 8004772:	aa1f      	add	r2, sp, #124	; 0x7c
 8004774:	4651      	mov	r1, sl
 8004776:	4658      	mov	r0, fp
 8004778:	f001 fc98 	bl	80060ac <__ssprint_r>
 800477c:	2800      	cmp	r0, #0
 800477e:	f040 80ac 	bne.w	80048da <_svfprintf_r+0xec2>
 8004782:	ac2c      	add	r4, sp, #176	; 0xb0
 8004784:	e7b4      	b.n	80046f0 <_svfprintf_r+0xcd8>
 8004786:	bf00      	nop
 8004788:	080068f9 	.word	0x080068f9
 800478c:	0800690b 	.word	0x0800690b
 8004790:	9b03      	ldr	r3, [sp, #12]
 8004792:	2b01      	cmp	r3, #1
 8004794:	dc01      	bgt.n	800479a <_svfprintf_r+0xd82>
 8004796:	07ea      	lsls	r2, r5, #31
 8004798:	d576      	bpl.n	8004888 <_svfprintf_r+0xe70>
 800479a:	2301      	movs	r3, #1
 800479c:	6063      	str	r3, [r4, #4]
 800479e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047a0:	f8c4 8000 	str.w	r8, [r4]
 80047a4:	3301      	adds	r3, #1
 80047a6:	9321      	str	r3, [sp, #132]	; 0x84
 80047a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047aa:	3301      	adds	r3, #1
 80047ac:	2b07      	cmp	r3, #7
 80047ae:	9320      	str	r3, [sp, #128]	; 0x80
 80047b0:	dc36      	bgt.n	8004820 <_svfprintf_r+0xe08>
 80047b2:	3408      	adds	r4, #8
 80047b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	9b08      	ldr	r3, [sp, #32]
 80047ba:	6063      	str	r3, [r4, #4]
 80047bc:	9a08      	ldr	r2, [sp, #32]
 80047be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047c0:	4413      	add	r3, r2
 80047c2:	9321      	str	r3, [sp, #132]	; 0x84
 80047c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047c6:	3301      	adds	r3, #1
 80047c8:	2b07      	cmp	r3, #7
 80047ca:	9320      	str	r3, [sp, #128]	; 0x80
 80047cc:	dc31      	bgt.n	8004832 <_svfprintf_r+0xe1a>
 80047ce:	3408      	adds	r4, #8
 80047d0:	2300      	movs	r3, #0
 80047d2:	2200      	movs	r2, #0
 80047d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047d8:	f7fc f972 	bl	8000ac0 <__aeabi_dcmpeq>
 80047dc:	9b03      	ldr	r3, [sp, #12]
 80047de:	1e5e      	subs	r6, r3, #1
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d12f      	bne.n	8004844 <_svfprintf_r+0xe2c>
 80047e4:	f108 0301 	add.w	r3, r8, #1
 80047e8:	e884 0048 	stmia.w	r4, {r3, r6}
 80047ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047ee:	9a03      	ldr	r2, [sp, #12]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	4413      	add	r3, r2
 80047f4:	9321      	str	r3, [sp, #132]	; 0x84
 80047f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047f8:	3301      	adds	r3, #1
 80047fa:	2b07      	cmp	r3, #7
 80047fc:	9320      	str	r3, [sp, #128]	; 0x80
 80047fe:	dd4a      	ble.n	8004896 <_svfprintf_r+0xe7e>
 8004800:	aa1f      	add	r2, sp, #124	; 0x7c
 8004802:	4651      	mov	r1, sl
 8004804:	4658      	mov	r0, fp
 8004806:	f001 fc51 	bl	80060ac <__ssprint_r>
 800480a:	2800      	cmp	r0, #0
 800480c:	d165      	bne.n	80048da <_svfprintf_r+0xec2>
 800480e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004810:	ab1b      	add	r3, sp, #108	; 0x6c
 8004812:	6023      	str	r3, [r4, #0]
 8004814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004816:	6063      	str	r3, [r4, #4]
 8004818:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800481a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800481c:	4413      	add	r3, r2
 800481e:	e41c      	b.n	800405a <_svfprintf_r+0x642>
 8004820:	aa1f      	add	r2, sp, #124	; 0x7c
 8004822:	4651      	mov	r1, sl
 8004824:	4658      	mov	r0, fp
 8004826:	f001 fc41 	bl	80060ac <__ssprint_r>
 800482a:	2800      	cmp	r0, #0
 800482c:	d155      	bne.n	80048da <_svfprintf_r+0xec2>
 800482e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004830:	e7c0      	b.n	80047b4 <_svfprintf_r+0xd9c>
 8004832:	aa1f      	add	r2, sp, #124	; 0x7c
 8004834:	4651      	mov	r1, sl
 8004836:	4658      	mov	r0, fp
 8004838:	f001 fc38 	bl	80060ac <__ssprint_r>
 800483c:	2800      	cmp	r0, #0
 800483e:	d14c      	bne.n	80048da <_svfprintf_r+0xec2>
 8004840:	ac2c      	add	r4, sp, #176	; 0xb0
 8004842:	e7c5      	b.n	80047d0 <_svfprintf_r+0xdb8>
 8004844:	2e00      	cmp	r6, #0
 8004846:	dde3      	ble.n	8004810 <_svfprintf_r+0xdf8>
 8004848:	4f59      	ldr	r7, [pc, #356]	; (80049b0 <_svfprintf_r+0xf98>)
 800484a:	f04f 0810 	mov.w	r8, #16
 800484e:	2e10      	cmp	r6, #16
 8004850:	6027      	str	r7, [r4, #0]
 8004852:	dc04      	bgt.n	800485e <_svfprintf_r+0xe46>
 8004854:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004856:	6066      	str	r6, [r4, #4]
 8004858:	441e      	add	r6, r3
 800485a:	9621      	str	r6, [sp, #132]	; 0x84
 800485c:	e7cb      	b.n	80047f6 <_svfprintf_r+0xdde>
 800485e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004860:	f8c4 8004 	str.w	r8, [r4, #4]
 8004864:	3310      	adds	r3, #16
 8004866:	9321      	str	r3, [sp, #132]	; 0x84
 8004868:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800486a:	3301      	adds	r3, #1
 800486c:	2b07      	cmp	r3, #7
 800486e:	9320      	str	r3, [sp, #128]	; 0x80
 8004870:	dc02      	bgt.n	8004878 <_svfprintf_r+0xe60>
 8004872:	3408      	adds	r4, #8
 8004874:	3e10      	subs	r6, #16
 8004876:	e7ea      	b.n	800484e <_svfprintf_r+0xe36>
 8004878:	aa1f      	add	r2, sp, #124	; 0x7c
 800487a:	4651      	mov	r1, sl
 800487c:	4658      	mov	r0, fp
 800487e:	f001 fc15 	bl	80060ac <__ssprint_r>
 8004882:	bb50      	cbnz	r0, 80048da <_svfprintf_r+0xec2>
 8004884:	ac2c      	add	r4, sp, #176	; 0xb0
 8004886:	e7f5      	b.n	8004874 <_svfprintf_r+0xe5c>
 8004888:	2301      	movs	r3, #1
 800488a:	6063      	str	r3, [r4, #4]
 800488c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800488e:	f8c4 8000 	str.w	r8, [r4]
 8004892:	3301      	adds	r3, #1
 8004894:	e7ae      	b.n	80047f4 <_svfprintf_r+0xddc>
 8004896:	3408      	adds	r4, #8
 8004898:	e7ba      	b.n	8004810 <_svfprintf_r+0xdf8>
 800489a:	3408      	adds	r4, #8
 800489c:	f7ff bbed 	b.w	800407a <_svfprintf_r+0x662>
 80048a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048a4:	1a9d      	subs	r5, r3, r2
 80048a6:	2d00      	cmp	r5, #0
 80048a8:	f77f abea 	ble.w	8004080 <_svfprintf_r+0x668>
 80048ac:	2610      	movs	r6, #16
 80048ae:	4b41      	ldr	r3, [pc, #260]	; (80049b4 <_svfprintf_r+0xf9c>)
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	2d10      	cmp	r5, #16
 80048b4:	dc1b      	bgt.n	80048ee <_svfprintf_r+0xed6>
 80048b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048b8:	6065      	str	r5, [r4, #4]
 80048ba:	441d      	add	r5, r3
 80048bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80048be:	9521      	str	r5, [sp, #132]	; 0x84
 80048c0:	3301      	adds	r3, #1
 80048c2:	2b07      	cmp	r3, #7
 80048c4:	9320      	str	r3, [sp, #128]	; 0x80
 80048c6:	f77f abdb 	ble.w	8004080 <_svfprintf_r+0x668>
 80048ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80048cc:	4651      	mov	r1, sl
 80048ce:	4658      	mov	r0, fp
 80048d0:	f001 fbec 	bl	80060ac <__ssprint_r>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	f43f abd3 	beq.w	8004080 <_svfprintf_r+0x668>
 80048da:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80048de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80048e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e4:	bf18      	it	ne
 80048e6:	f04f 33ff 	movne.w	r3, #4294967295
 80048ea:	f7ff b8b9 	b.w	8003a60 <_svfprintf_r+0x48>
 80048ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048f0:	6066      	str	r6, [r4, #4]
 80048f2:	3310      	adds	r3, #16
 80048f4:	9321      	str	r3, [sp, #132]	; 0x84
 80048f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80048f8:	3301      	adds	r3, #1
 80048fa:	2b07      	cmp	r3, #7
 80048fc:	9320      	str	r3, [sp, #128]	; 0x80
 80048fe:	dc02      	bgt.n	8004906 <_svfprintf_r+0xeee>
 8004900:	3408      	adds	r4, #8
 8004902:	3d10      	subs	r5, #16
 8004904:	e7d3      	b.n	80048ae <_svfprintf_r+0xe96>
 8004906:	aa1f      	add	r2, sp, #124	; 0x7c
 8004908:	4651      	mov	r1, sl
 800490a:	4658      	mov	r0, fp
 800490c:	f001 fbce 	bl	80060ac <__ssprint_r>
 8004910:	2800      	cmp	r0, #0
 8004912:	d1e2      	bne.n	80048da <_svfprintf_r+0xec2>
 8004914:	ac2c      	add	r4, sp, #176	; 0xb0
 8004916:	e7f4      	b.n	8004902 <_svfprintf_r+0xeea>
 8004918:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0dd      	beq.n	80048da <_svfprintf_r+0xec2>
 800491e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004920:	4651      	mov	r1, sl
 8004922:	4658      	mov	r0, fp
 8004924:	f001 fbc2 	bl	80060ac <__ssprint_r>
 8004928:	e7d7      	b.n	80048da <_svfprintf_r+0xec2>
 800492a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	f7fc f8f7 	bl	8000b24 <__aeabi_dcmpun>
 8004936:	2800      	cmp	r0, #0
 8004938:	f43f aa44 	beq.w	8003dc4 <_svfprintf_r+0x3ac>
 800493c:	4b1e      	ldr	r3, [pc, #120]	; (80049b8 <_svfprintf_r+0xfa0>)
 800493e:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <_svfprintf_r+0xfa4>)
 8004940:	f7ff ba34 	b.w	8003dac <_svfprintf_r+0x394>
 8004944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004946:	eba3 0308 	sub.w	r3, r3, r8
 800494a:	9303      	str	r3, [sp, #12]
 800494c:	f7ff bab5 	b.w	8003eba <_svfprintf_r+0x4a2>
 8004950:	ea56 0207 	orrs.w	r2, r6, r7
 8004954:	950b      	str	r5, [sp, #44]	; 0x2c
 8004956:	f43f ac2b 	beq.w	80041b0 <_svfprintf_r+0x798>
 800495a:	2b01      	cmp	r3, #1
 800495c:	f43f ac9d 	beq.w	800429a <_svfprintf_r+0x882>
 8004960:	2b02      	cmp	r3, #2
 8004962:	f43f acbd 	beq.w	80042e0 <_svfprintf_r+0x8c8>
 8004966:	ab2c      	add	r3, sp, #176	; 0xb0
 8004968:	08f1      	lsrs	r1, r6, #3
 800496a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800496e:	08f8      	lsrs	r0, r7, #3
 8004970:	f006 0207 	and.w	r2, r6, #7
 8004974:	4607      	mov	r7, r0
 8004976:	460e      	mov	r6, r1
 8004978:	3230      	adds	r2, #48	; 0x30
 800497a:	ea56 0107 	orrs.w	r1, r6, r7
 800497e:	f103 38ff 	add.w	r8, r3, #4294967295
 8004982:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004986:	f47f ac86 	bne.w	8004296 <_svfprintf_r+0x87e>
 800498a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800498c:	07c9      	lsls	r1, r1, #31
 800498e:	d506      	bpl.n	800499e <_svfprintf_r+0xf86>
 8004990:	2a30      	cmp	r2, #48	; 0x30
 8004992:	d004      	beq.n	800499e <_svfprintf_r+0xf86>
 8004994:	2230      	movs	r2, #48	; 0x30
 8004996:	f808 2c01 	strb.w	r2, [r8, #-1]
 800499a:	f1a3 0802 	sub.w	r8, r3, #2
 800499e:	464e      	mov	r6, r9
 80049a0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80049a4:	eba9 0908 	sub.w	r9, r9, r8
 80049a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80049aa:	2700      	movs	r7, #0
 80049ac:	f7ff bad1 	b.w	8003f52 <_svfprintf_r+0x53a>
 80049b0:	0800690b 	.word	0x0800690b
 80049b4:	080068fb 	.word	0x080068fb
 80049b8:	080068cf 	.word	0x080068cf
 80049bc:	080068d3 	.word	0x080068d3

080049c0 <quorem>:
 80049c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c4:	6903      	ldr	r3, [r0, #16]
 80049c6:	690c      	ldr	r4, [r1, #16]
 80049c8:	429c      	cmp	r4, r3
 80049ca:	4680      	mov	r8, r0
 80049cc:	f300 8082 	bgt.w	8004ad4 <quorem+0x114>
 80049d0:	3c01      	subs	r4, #1
 80049d2:	f101 0714 	add.w	r7, r1, #20
 80049d6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80049da:	f100 0614 	add.w	r6, r0, #20
 80049de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80049e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80049e6:	eb06 030e 	add.w	r3, r6, lr
 80049ea:	3501      	adds	r5, #1
 80049ec:	eb07 090e 	add.w	r9, r7, lr
 80049f0:	9301      	str	r3, [sp, #4]
 80049f2:	fbb0 f5f5 	udiv	r5, r0, r5
 80049f6:	b395      	cbz	r5, 8004a5e <quorem+0x9e>
 80049f8:	f04f 0a00 	mov.w	sl, #0
 80049fc:	4638      	mov	r0, r7
 80049fe:	46b4      	mov	ip, r6
 8004a00:	46d3      	mov	fp, sl
 8004a02:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a06:	b293      	uxth	r3, r2
 8004a08:	fb05 a303 	mla	r3, r5, r3, sl
 8004a0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	ebab 0303 	sub.w	r3, fp, r3
 8004a16:	0c12      	lsrs	r2, r2, #16
 8004a18:	f8bc b000 	ldrh.w	fp, [ip]
 8004a1c:	fb05 a202 	mla	r2, r5, r2, sl
 8004a20:	fa13 f38b 	uxtah	r3, r3, fp
 8004a24:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004a28:	fa1f fb82 	uxth.w	fp, r2
 8004a2c:	f8dc 2000 	ldr.w	r2, [ip]
 8004a30:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004a34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a3e:	4581      	cmp	r9, r0
 8004a40:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004a44:	f84c 3b04 	str.w	r3, [ip], #4
 8004a48:	d2db      	bcs.n	8004a02 <quorem+0x42>
 8004a4a:	f856 300e 	ldr.w	r3, [r6, lr]
 8004a4e:	b933      	cbnz	r3, 8004a5e <quorem+0x9e>
 8004a50:	9b01      	ldr	r3, [sp, #4]
 8004a52:	3b04      	subs	r3, #4
 8004a54:	429e      	cmp	r6, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	d330      	bcc.n	8004abc <quorem+0xfc>
 8004a5a:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a5e:	4640      	mov	r0, r8
 8004a60:	f001 fa4d 	bl	8005efe <__mcmp>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	db25      	blt.n	8004ab4 <quorem+0xf4>
 8004a68:	3501      	adds	r5, #1
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f04f 0e00 	mov.w	lr, #0
 8004a70:	f857 2b04 	ldr.w	r2, [r7], #4
 8004a74:	f8d0 c000 	ldr.w	ip, [r0]
 8004a78:	b293      	uxth	r3, r2
 8004a7a:	ebae 0303 	sub.w	r3, lr, r3
 8004a7e:	0c12      	lsrs	r2, r2, #16
 8004a80:	fa13 f38c 	uxtah	r3, r3, ip
 8004a84:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004a88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a92:	45b9      	cmp	r9, r7
 8004a94:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004a98:	f840 3b04 	str.w	r3, [r0], #4
 8004a9c:	d2e8      	bcs.n	8004a70 <quorem+0xb0>
 8004a9e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004aa2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004aa6:	b92a      	cbnz	r2, 8004ab4 <quorem+0xf4>
 8004aa8:	3b04      	subs	r3, #4
 8004aaa:	429e      	cmp	r6, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	d30b      	bcc.n	8004ac8 <quorem+0x108>
 8004ab0:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	b003      	add	sp, #12
 8004ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	3b04      	subs	r3, #4
 8004ac0:	2a00      	cmp	r2, #0
 8004ac2:	d1ca      	bne.n	8004a5a <quorem+0x9a>
 8004ac4:	3c01      	subs	r4, #1
 8004ac6:	e7c5      	b.n	8004a54 <quorem+0x94>
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	3b04      	subs	r3, #4
 8004acc:	2a00      	cmp	r2, #0
 8004ace:	d1ef      	bne.n	8004ab0 <quorem+0xf0>
 8004ad0:	3c01      	subs	r4, #1
 8004ad2:	e7ea      	b.n	8004aaa <quorem+0xea>
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	e7ee      	b.n	8004ab6 <quorem+0xf6>

08004ad8 <_dtoa_r>:
 8004ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004adc:	ec57 6b10 	vmov	r6, r7, d0
 8004ae0:	b097      	sub	sp, #92	; 0x5c
 8004ae2:	e9cd 6700 	strd	r6, r7, [sp]
 8004ae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ae8:	9107      	str	r1, [sp, #28]
 8004aea:	4604      	mov	r4, r0
 8004aec:	920a      	str	r2, [sp, #40]	; 0x28
 8004aee:	930f      	str	r3, [sp, #60]	; 0x3c
 8004af0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004af2:	b93e      	cbnz	r6, 8004b04 <_dtoa_r+0x2c>
 8004af4:	2010      	movs	r0, #16
 8004af6:	f000 fdcb 	bl	8005690 <malloc>
 8004afa:	6260      	str	r0, [r4, #36]	; 0x24
 8004afc:	6046      	str	r6, [r0, #4]
 8004afe:	6086      	str	r6, [r0, #8]
 8004b00:	6006      	str	r6, [r0, #0]
 8004b02:	60c6      	str	r6, [r0, #12]
 8004b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b06:	6819      	ldr	r1, [r3, #0]
 8004b08:	b151      	cbz	r1, 8004b20 <_dtoa_r+0x48>
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	604a      	str	r2, [r1, #4]
 8004b0e:	2301      	movs	r3, #1
 8004b10:	4093      	lsls	r3, r2
 8004b12:	608b      	str	r3, [r1, #8]
 8004b14:	4620      	mov	r0, r4
 8004b16:	f001 f81d 	bl	8005b54 <_Bfree>
 8004b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	9b01      	ldr	r3, [sp, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bfbf      	itttt	lt
 8004b26:	2301      	movlt	r3, #1
 8004b28:	602b      	strlt	r3, [r5, #0]
 8004b2a:	9b01      	ldrlt	r3, [sp, #4]
 8004b2c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b30:	bfb2      	itee	lt
 8004b32:	9301      	strlt	r3, [sp, #4]
 8004b34:	2300      	movge	r3, #0
 8004b36:	602b      	strge	r3, [r5, #0]
 8004b38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004b3c:	4ba8      	ldr	r3, [pc, #672]	; (8004de0 <_dtoa_r+0x308>)
 8004b3e:	ea33 0308 	bics.w	r3, r3, r8
 8004b42:	d11b      	bne.n	8004b7c <_dtoa_r+0xa4>
 8004b44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b46:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	9b00      	ldr	r3, [sp, #0]
 8004b4e:	b923      	cbnz	r3, 8004b5a <_dtoa_r+0x82>
 8004b50:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004b54:	2800      	cmp	r0, #0
 8004b56:	f000 8578 	beq.w	800564a <_dtoa_r+0xb72>
 8004b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b5c:	b953      	cbnz	r3, 8004b74 <_dtoa_r+0x9c>
 8004b5e:	4ba1      	ldr	r3, [pc, #644]	; (8004de4 <_dtoa_r+0x30c>)
 8004b60:	e021      	b.n	8004ba6 <_dtoa_r+0xce>
 8004b62:	4ba1      	ldr	r3, [pc, #644]	; (8004de8 <_dtoa_r+0x310>)
 8004b64:	9302      	str	r3, [sp, #8]
 8004b66:	3308      	adds	r3, #8
 8004b68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	9802      	ldr	r0, [sp, #8]
 8004b6e:	b017      	add	sp, #92	; 0x5c
 8004b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b74:	4b9b      	ldr	r3, [pc, #620]	; (8004de4 <_dtoa_r+0x30c>)
 8004b76:	9302      	str	r3, [sp, #8]
 8004b78:	3303      	adds	r3, #3
 8004b7a:	e7f5      	b.n	8004b68 <_dtoa_r+0x90>
 8004b7c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004b80:	2200      	movs	r2, #0
 8004b82:	2300      	movs	r3, #0
 8004b84:	4630      	mov	r0, r6
 8004b86:	4639      	mov	r1, r7
 8004b88:	f7fb ff9a 	bl	8000ac0 <__aeabi_dcmpeq>
 8004b8c:	4681      	mov	r9, r0
 8004b8e:	b160      	cbz	r0, 8004baa <_dtoa_r+0xd2>
 8004b90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b92:	2301      	movs	r3, #1
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8553 	beq.w	8005644 <_dtoa_r+0xb6c>
 8004b9e:	4b93      	ldr	r3, [pc, #588]	; (8004dec <_dtoa_r+0x314>)
 8004ba0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	9302      	str	r3, [sp, #8]
 8004ba8:	e7e0      	b.n	8004b6c <_dtoa_r+0x94>
 8004baa:	aa14      	add	r2, sp, #80	; 0x50
 8004bac:	a915      	add	r1, sp, #84	; 0x54
 8004bae:	ec47 6b10 	vmov	d0, r6, r7
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f001 fa1b 	bl	8005fee <__d2b>
 8004bb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004bbc:	4682      	mov	sl, r0
 8004bbe:	2d00      	cmp	r5, #0
 8004bc0:	d07e      	beq.n	8004cc0 <_dtoa_r+0x1e8>
 8004bc2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004bc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004bd0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004bd4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8004bd8:	2200      	movs	r2, #0
 8004bda:	4b85      	ldr	r3, [pc, #532]	; (8004df0 <_dtoa_r+0x318>)
 8004bdc:	f7fb fb54 	bl	8000288 <__aeabi_dsub>
 8004be0:	a379      	add	r3, pc, #484	; (adr r3, 8004dc8 <_dtoa_r+0x2f0>)
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	f7fb fd03 	bl	80005f0 <__aeabi_dmul>
 8004bea:	a379      	add	r3, pc, #484	; (adr r3, 8004dd0 <_dtoa_r+0x2f8>)
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f7fb fb4c 	bl	800028c <__adddf3>
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	460f      	mov	r7, r1
 8004bfa:	f7fb fc93 	bl	8000524 <__aeabi_i2d>
 8004bfe:	a376      	add	r3, pc, #472	; (adr r3, 8004dd8 <_dtoa_r+0x300>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f7fb fcf4 	bl	80005f0 <__aeabi_dmul>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	4639      	mov	r1, r7
 8004c10:	f7fb fb3c 	bl	800028c <__adddf3>
 8004c14:	4606      	mov	r6, r0
 8004c16:	460f      	mov	r7, r1
 8004c18:	f7fb ff9a 	bl	8000b50 <__aeabi_d2iz>
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	4683      	mov	fp, r0
 8004c20:	2300      	movs	r3, #0
 8004c22:	4630      	mov	r0, r6
 8004c24:	4639      	mov	r1, r7
 8004c26:	f7fb ff55 	bl	8000ad4 <__aeabi_dcmplt>
 8004c2a:	b158      	cbz	r0, 8004c44 <_dtoa_r+0x16c>
 8004c2c:	4658      	mov	r0, fp
 8004c2e:	f7fb fc79 	bl	8000524 <__aeabi_i2d>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4630      	mov	r0, r6
 8004c38:	4639      	mov	r1, r7
 8004c3a:	f7fb ff41 	bl	8000ac0 <__aeabi_dcmpeq>
 8004c3e:	b908      	cbnz	r0, 8004c44 <_dtoa_r+0x16c>
 8004c40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c44:	f1bb 0f16 	cmp.w	fp, #22
 8004c48:	d859      	bhi.n	8004cfe <_dtoa_r+0x226>
 8004c4a:	496a      	ldr	r1, [pc, #424]	; (8004df4 <_dtoa_r+0x31c>)
 8004c4c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c58:	f7fb ff5a 	bl	8000b10 <__aeabi_dcmpgt>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d050      	beq.n	8004d02 <_dtoa_r+0x22a>
 8004c60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c64:	2300      	movs	r3, #0
 8004c66:	930e      	str	r3, [sp, #56]	; 0x38
 8004c68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c6a:	1b5d      	subs	r5, r3, r5
 8004c6c:	1e6b      	subs	r3, r5, #1
 8004c6e:	9306      	str	r3, [sp, #24]
 8004c70:	bf45      	ittet	mi
 8004c72:	f1c5 0301 	rsbmi	r3, r5, #1
 8004c76:	9305      	strmi	r3, [sp, #20]
 8004c78:	2300      	movpl	r3, #0
 8004c7a:	2300      	movmi	r3, #0
 8004c7c:	bf4c      	ite	mi
 8004c7e:	9306      	strmi	r3, [sp, #24]
 8004c80:	9305      	strpl	r3, [sp, #20]
 8004c82:	f1bb 0f00 	cmp.w	fp, #0
 8004c86:	db3e      	blt.n	8004d06 <_dtoa_r+0x22e>
 8004c88:	9b06      	ldr	r3, [sp, #24]
 8004c8a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004c8e:	445b      	add	r3, fp
 8004c90:	9306      	str	r3, [sp, #24]
 8004c92:	2300      	movs	r3, #0
 8004c94:	9308      	str	r3, [sp, #32]
 8004c96:	9b07      	ldr	r3, [sp, #28]
 8004c98:	2b09      	cmp	r3, #9
 8004c9a:	f200 80af 	bhi.w	8004dfc <_dtoa_r+0x324>
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	bfc4      	itt	gt
 8004ca2:	3b04      	subgt	r3, #4
 8004ca4:	9307      	strgt	r3, [sp, #28]
 8004ca6:	9b07      	ldr	r3, [sp, #28]
 8004ca8:	f1a3 0302 	sub.w	r3, r3, #2
 8004cac:	bfcc      	ite	gt
 8004cae:	2600      	movgt	r6, #0
 8004cb0:	2601      	movle	r6, #1
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	f200 80ae 	bhi.w	8004e14 <_dtoa_r+0x33c>
 8004cb8:	e8df f003 	tbb	[pc, r3]
 8004cbc:	772f8482 	.word	0x772f8482
 8004cc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004cc2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004cc4:	441d      	add	r5, r3
 8004cc6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	dd11      	ble.n	8004cf2 <_dtoa_r+0x21a>
 8004cce:	9a00      	ldr	r2, [sp, #0]
 8004cd0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004cd4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004cd8:	fa22 f000 	lsr.w	r0, r2, r0
 8004cdc:	fa08 f303 	lsl.w	r3, r8, r3
 8004ce0:	4318      	orrs	r0, r3
 8004ce2:	f7fb fc0f 	bl	8000504 <__aeabi_ui2d>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004cec:	3d01      	subs	r5, #1
 8004cee:	9312      	str	r3, [sp, #72]	; 0x48
 8004cf0:	e772      	b.n	8004bd8 <_dtoa_r+0x100>
 8004cf2:	f1c3 0020 	rsb	r0, r3, #32
 8004cf6:	9b00      	ldr	r3, [sp, #0]
 8004cf8:	fa03 f000 	lsl.w	r0, r3, r0
 8004cfc:	e7f1      	b.n	8004ce2 <_dtoa_r+0x20a>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e7b1      	b.n	8004c66 <_dtoa_r+0x18e>
 8004d02:	900e      	str	r0, [sp, #56]	; 0x38
 8004d04:	e7b0      	b.n	8004c68 <_dtoa_r+0x190>
 8004d06:	9b05      	ldr	r3, [sp, #20]
 8004d08:	eba3 030b 	sub.w	r3, r3, fp
 8004d0c:	9305      	str	r3, [sp, #20]
 8004d0e:	f1cb 0300 	rsb	r3, fp, #0
 8004d12:	9308      	str	r3, [sp, #32]
 8004d14:	2300      	movs	r3, #0
 8004d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d18:	e7bd      	b.n	8004c96 <_dtoa_r+0x1be>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	dd7a      	ble.n	8004e1a <_dtoa_r+0x342>
 8004d24:	9304      	str	r3, [sp, #16]
 8004d26:	9303      	str	r3, [sp, #12]
 8004d28:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	606a      	str	r2, [r5, #4]
 8004d2e:	2104      	movs	r1, #4
 8004d30:	f101 0214 	add.w	r2, r1, #20
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d975      	bls.n	8004e24 <_dtoa_r+0x34c>
 8004d38:	6869      	ldr	r1, [r5, #4]
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f000 fed6 	bl	8005aec <_Balloc>
 8004d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d42:	6028      	str	r0, [r5, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	9302      	str	r3, [sp, #8]
 8004d48:	9b03      	ldr	r3, [sp, #12]
 8004d4a:	2b0e      	cmp	r3, #14
 8004d4c:	f200 80e5 	bhi.w	8004f1a <_dtoa_r+0x442>
 8004d50:	2e00      	cmp	r6, #0
 8004d52:	f000 80e2 	beq.w	8004f1a <_dtoa_r+0x442>
 8004d56:	ed9d 7b00 	vldr	d7, [sp]
 8004d5a:	f1bb 0f00 	cmp.w	fp, #0
 8004d5e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004d62:	dd74      	ble.n	8004e4e <_dtoa_r+0x376>
 8004d64:	4a23      	ldr	r2, [pc, #140]	; (8004df4 <_dtoa_r+0x31c>)
 8004d66:	f00b 030f 	and.w	r3, fp, #15
 8004d6a:	ea4f 162b 	mov.w	r6, fp, asr #4
 8004d6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d72:	06f0      	lsls	r0, r6, #27
 8004d74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d78:	d559      	bpl.n	8004e2e <_dtoa_r+0x356>
 8004d7a:	4b1f      	ldr	r3, [pc, #124]	; (8004df8 <_dtoa_r+0x320>)
 8004d7c:	ec51 0b17 	vmov	r0, r1, d7
 8004d80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d84:	f7fb fd5e 	bl	8000844 <__aeabi_ddiv>
 8004d88:	e9cd 0100 	strd	r0, r1, [sp]
 8004d8c:	f006 060f 	and.w	r6, r6, #15
 8004d90:	2503      	movs	r5, #3
 8004d92:	4f19      	ldr	r7, [pc, #100]	; (8004df8 <_dtoa_r+0x320>)
 8004d94:	2e00      	cmp	r6, #0
 8004d96:	d14c      	bne.n	8004e32 <_dtoa_r+0x35a>
 8004d98:	4642      	mov	r2, r8
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004da0:	f7fb fd50 	bl	8000844 <__aeabi_ddiv>
 8004da4:	e9cd 0100 	strd	r0, r1, [sp]
 8004da8:	e06a      	b.n	8004e80 <_dtoa_r+0x3a8>
 8004daa:	2301      	movs	r3, #1
 8004dac:	9309      	str	r3, [sp, #36]	; 0x24
 8004dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004db0:	445b      	add	r3, fp
 8004db2:	9304      	str	r3, [sp, #16]
 8004db4:	3301      	adds	r3, #1
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	9303      	str	r3, [sp, #12]
 8004dba:	bfb8      	it	lt
 8004dbc:	2301      	movlt	r3, #1
 8004dbe:	e7b3      	b.n	8004d28 <_dtoa_r+0x250>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e7ab      	b.n	8004d1c <_dtoa_r+0x244>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e7f1      	b.n	8004dac <_dtoa_r+0x2d4>
 8004dc8:	636f4361 	.word	0x636f4361
 8004dcc:	3fd287a7 	.word	0x3fd287a7
 8004dd0:	8b60c8b3 	.word	0x8b60c8b3
 8004dd4:	3fc68a28 	.word	0x3fc68a28
 8004dd8:	509f79fb 	.word	0x509f79fb
 8004ddc:	3fd34413 	.word	0x3fd34413
 8004de0:	7ff00000 	.word	0x7ff00000
 8004de4:	08006924 	.word	0x08006924
 8004de8:	0800691b 	.word	0x0800691b
 8004dec:	080068fa 	.word	0x080068fa
 8004df0:	3ff80000 	.word	0x3ff80000
 8004df4:	08006950 	.word	0x08006950
 8004df8:	08006928 	.word	0x08006928
 8004dfc:	2601      	movs	r6, #1
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9307      	str	r3, [sp, #28]
 8004e02:	9609      	str	r6, [sp, #36]	; 0x24
 8004e04:	f04f 33ff 	mov.w	r3, #4294967295
 8004e08:	9304      	str	r3, [sp, #16]
 8004e0a:	9303      	str	r3, [sp, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2312      	movs	r3, #18
 8004e10:	920a      	str	r2, [sp, #40]	; 0x28
 8004e12:	e789      	b.n	8004d28 <_dtoa_r+0x250>
 8004e14:	2301      	movs	r3, #1
 8004e16:	9309      	str	r3, [sp, #36]	; 0x24
 8004e18:	e7f4      	b.n	8004e04 <_dtoa_r+0x32c>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	9304      	str	r3, [sp, #16]
 8004e1e:	9303      	str	r3, [sp, #12]
 8004e20:	461a      	mov	r2, r3
 8004e22:	e7f5      	b.n	8004e10 <_dtoa_r+0x338>
 8004e24:	686a      	ldr	r2, [r5, #4]
 8004e26:	3201      	adds	r2, #1
 8004e28:	606a      	str	r2, [r5, #4]
 8004e2a:	0049      	lsls	r1, r1, #1
 8004e2c:	e780      	b.n	8004d30 <_dtoa_r+0x258>
 8004e2e:	2502      	movs	r5, #2
 8004e30:	e7af      	b.n	8004d92 <_dtoa_r+0x2ba>
 8004e32:	07f1      	lsls	r1, r6, #31
 8004e34:	d508      	bpl.n	8004e48 <_dtoa_r+0x370>
 8004e36:	4640      	mov	r0, r8
 8004e38:	4649      	mov	r1, r9
 8004e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e3e:	f7fb fbd7 	bl	80005f0 <__aeabi_dmul>
 8004e42:	3501      	adds	r5, #1
 8004e44:	4680      	mov	r8, r0
 8004e46:	4689      	mov	r9, r1
 8004e48:	1076      	asrs	r6, r6, #1
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	e7a2      	b.n	8004d94 <_dtoa_r+0x2bc>
 8004e4e:	f000 809d 	beq.w	8004f8c <_dtoa_r+0x4b4>
 8004e52:	f1cb 0600 	rsb	r6, fp, #0
 8004e56:	4b9f      	ldr	r3, [pc, #636]	; (80050d4 <_dtoa_r+0x5fc>)
 8004e58:	4f9f      	ldr	r7, [pc, #636]	; (80050d8 <_dtoa_r+0x600>)
 8004e5a:	f006 020f 	and.w	r2, r6, #15
 8004e5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e6a:	f7fb fbc1 	bl	80005f0 <__aeabi_dmul>
 8004e6e:	e9cd 0100 	strd	r0, r1, [sp]
 8004e72:	1136      	asrs	r6, r6, #4
 8004e74:	2300      	movs	r3, #0
 8004e76:	2502      	movs	r5, #2
 8004e78:	2e00      	cmp	r6, #0
 8004e7a:	d17c      	bne.n	8004f76 <_dtoa_r+0x49e>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d191      	bne.n	8004da4 <_dtoa_r+0x2cc>
 8004e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 8084 	beq.w	8004f90 <_dtoa_r+0x4b8>
 8004e88:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	4b93      	ldr	r3, [pc, #588]	; (80050dc <_dtoa_r+0x604>)
 8004e90:	4640      	mov	r0, r8
 8004e92:	4649      	mov	r1, r9
 8004e94:	f7fb fe1e 	bl	8000ad4 <__aeabi_dcmplt>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d079      	beq.n	8004f90 <_dtoa_r+0x4b8>
 8004e9c:	9b03      	ldr	r3, [sp, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d076      	beq.n	8004f90 <_dtoa_r+0x4b8>
 8004ea2:	9b04      	ldr	r3, [sp, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	dd34      	ble.n	8004f12 <_dtoa_r+0x43a>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4b8d      	ldr	r3, [pc, #564]	; (80050e0 <_dtoa_r+0x608>)
 8004eac:	4640      	mov	r0, r8
 8004eae:	4649      	mov	r1, r9
 8004eb0:	f7fb fb9e 	bl	80005f0 <__aeabi_dmul>
 8004eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8004eb8:	9e04      	ldr	r6, [sp, #16]
 8004eba:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004ebe:	3501      	adds	r5, #1
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f7fb fb2f 	bl	8000524 <__aeabi_i2d>
 8004ec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004eca:	f7fb fb91 	bl	80005f0 <__aeabi_dmul>
 8004ece:	2200      	movs	r2, #0
 8004ed0:	4b84      	ldr	r3, [pc, #528]	; (80050e4 <_dtoa_r+0x60c>)
 8004ed2:	f7fb f9db 	bl	800028c <__adddf3>
 8004ed6:	4680      	mov	r8, r0
 8004ed8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004edc:	2e00      	cmp	r6, #0
 8004ede:	d15a      	bne.n	8004f96 <_dtoa_r+0x4be>
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	4b81      	ldr	r3, [pc, #516]	; (80050e8 <_dtoa_r+0x610>)
 8004ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ee8:	f7fb f9ce 	bl	8000288 <__aeabi_dsub>
 8004eec:	4642      	mov	r2, r8
 8004eee:	464b      	mov	r3, r9
 8004ef0:	e9cd 0100 	strd	r0, r1, [sp]
 8004ef4:	f7fb fe0c 	bl	8000b10 <__aeabi_dcmpgt>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	f040 829b 	bne.w	8005434 <_dtoa_r+0x95c>
 8004efe:	4642      	mov	r2, r8
 8004f00:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f08:	f7fb fde4 	bl	8000ad4 <__aeabi_dcmplt>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	f040 828f 	bne.w	8005430 <_dtoa_r+0x958>
 8004f12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f16:	e9cd 2300 	strd	r2, r3, [sp]
 8004f1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f2c0 8150 	blt.w	80051c2 <_dtoa_r+0x6ea>
 8004f22:	f1bb 0f0e 	cmp.w	fp, #14
 8004f26:	f300 814c 	bgt.w	80051c2 <_dtoa_r+0x6ea>
 8004f2a:	4b6a      	ldr	r3, [pc, #424]	; (80050d4 <_dtoa_r+0x5fc>)
 8004f2c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004f30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f280 80da 	bge.w	80050f0 <_dtoa_r+0x618>
 8004f3c:	9b03      	ldr	r3, [sp, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f300 80d6 	bgt.w	80050f0 <_dtoa_r+0x618>
 8004f44:	f040 8273 	bne.w	800542e <_dtoa_r+0x956>
 8004f48:	2200      	movs	r2, #0
 8004f4a:	4b67      	ldr	r3, [pc, #412]	; (80050e8 <_dtoa_r+0x610>)
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	4649      	mov	r1, r9
 8004f50:	f7fb fb4e 	bl	80005f0 <__aeabi_dmul>
 8004f54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f58:	f7fb fdd0 	bl	8000afc <__aeabi_dcmpge>
 8004f5c:	9e03      	ldr	r6, [sp, #12]
 8004f5e:	4637      	mov	r7, r6
 8004f60:	2800      	cmp	r0, #0
 8004f62:	f040 824a 	bne.w	80053fa <_dtoa_r+0x922>
 8004f66:	9b02      	ldr	r3, [sp, #8]
 8004f68:	9a02      	ldr	r2, [sp, #8]
 8004f6a:	1c5d      	adds	r5, r3, #1
 8004f6c:	2331      	movs	r3, #49	; 0x31
 8004f6e:	7013      	strb	r3, [r2, #0]
 8004f70:	f10b 0b01 	add.w	fp, fp, #1
 8004f74:	e245      	b.n	8005402 <_dtoa_r+0x92a>
 8004f76:	07f2      	lsls	r2, r6, #31
 8004f78:	d505      	bpl.n	8004f86 <_dtoa_r+0x4ae>
 8004f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f7e:	f7fb fb37 	bl	80005f0 <__aeabi_dmul>
 8004f82:	3501      	adds	r5, #1
 8004f84:	2301      	movs	r3, #1
 8004f86:	1076      	asrs	r6, r6, #1
 8004f88:	3708      	adds	r7, #8
 8004f8a:	e775      	b.n	8004e78 <_dtoa_r+0x3a0>
 8004f8c:	2502      	movs	r5, #2
 8004f8e:	e777      	b.n	8004e80 <_dtoa_r+0x3a8>
 8004f90:	465f      	mov	r7, fp
 8004f92:	9e03      	ldr	r6, [sp, #12]
 8004f94:	e794      	b.n	8004ec0 <_dtoa_r+0x3e8>
 8004f96:	9a02      	ldr	r2, [sp, #8]
 8004f98:	4b4e      	ldr	r3, [pc, #312]	; (80050d4 <_dtoa_r+0x5fc>)
 8004f9a:	4432      	add	r2, r6
 8004f9c:	9213      	str	r2, [sp, #76]	; 0x4c
 8004f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fa0:	1e71      	subs	r1, r6, #1
 8004fa2:	2a00      	cmp	r2, #0
 8004fa4:	d048      	beq.n	8005038 <_dtoa_r+0x560>
 8004fa6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	2000      	movs	r0, #0
 8004fb0:	494e      	ldr	r1, [pc, #312]	; (80050ec <_dtoa_r+0x614>)
 8004fb2:	f7fb fc47 	bl	8000844 <__aeabi_ddiv>
 8004fb6:	4642      	mov	r2, r8
 8004fb8:	464b      	mov	r3, r9
 8004fba:	f7fb f965 	bl	8000288 <__aeabi_dsub>
 8004fbe:	9d02      	ldr	r5, [sp, #8]
 8004fc0:	4680      	mov	r8, r0
 8004fc2:	4689      	mov	r9, r1
 8004fc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fc8:	f7fb fdc2 	bl	8000b50 <__aeabi_d2iz>
 8004fcc:	4606      	mov	r6, r0
 8004fce:	f7fb faa9 	bl	8000524 <__aeabi_i2d>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fda:	f7fb f955 	bl	8000288 <__aeabi_dsub>
 8004fde:	3630      	adds	r6, #48	; 0x30
 8004fe0:	f805 6b01 	strb.w	r6, [r5], #1
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	e9cd 0100 	strd	r0, r1, [sp]
 8004fec:	f7fb fd72 	bl	8000ad4 <__aeabi_dcmplt>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d165      	bne.n	80050c0 <_dtoa_r+0x5e8>
 8004ff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	4938      	ldr	r1, [pc, #224]	; (80050dc <_dtoa_r+0x604>)
 8004ffc:	f7fb f944 	bl	8000288 <__aeabi_dsub>
 8005000:	4642      	mov	r2, r8
 8005002:	464b      	mov	r3, r9
 8005004:	f7fb fd66 	bl	8000ad4 <__aeabi_dcmplt>
 8005008:	2800      	cmp	r0, #0
 800500a:	f040 80ba 	bne.w	8005182 <_dtoa_r+0x6aa>
 800500e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005010:	429d      	cmp	r5, r3
 8005012:	f43f af7e 	beq.w	8004f12 <_dtoa_r+0x43a>
 8005016:	2200      	movs	r2, #0
 8005018:	4b31      	ldr	r3, [pc, #196]	; (80050e0 <_dtoa_r+0x608>)
 800501a:	4640      	mov	r0, r8
 800501c:	4649      	mov	r1, r9
 800501e:	f7fb fae7 	bl	80005f0 <__aeabi_dmul>
 8005022:	2200      	movs	r2, #0
 8005024:	4680      	mov	r8, r0
 8005026:	4689      	mov	r9, r1
 8005028:	4b2d      	ldr	r3, [pc, #180]	; (80050e0 <_dtoa_r+0x608>)
 800502a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800502e:	f7fb fadf 	bl	80005f0 <__aeabi_dmul>
 8005032:	e9cd 0100 	strd	r0, r1, [sp]
 8005036:	e7c5      	b.n	8004fc4 <_dtoa_r+0x4ec>
 8005038:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800503c:	4642      	mov	r2, r8
 800503e:	464b      	mov	r3, r9
 8005040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005044:	f7fb fad4 	bl	80005f0 <__aeabi_dmul>
 8005048:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800504c:	9d02      	ldr	r5, [sp, #8]
 800504e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005052:	f7fb fd7d 	bl	8000b50 <__aeabi_d2iz>
 8005056:	4606      	mov	r6, r0
 8005058:	f7fb fa64 	bl	8000524 <__aeabi_i2d>
 800505c:	3630      	adds	r6, #48	; 0x30
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005066:	f7fb f90f 	bl	8000288 <__aeabi_dsub>
 800506a:	f805 6b01 	strb.w	r6, [r5], #1
 800506e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005070:	42ab      	cmp	r3, r5
 8005072:	4680      	mov	r8, r0
 8005074:	4689      	mov	r9, r1
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	d125      	bne.n	80050c8 <_dtoa_r+0x5f0>
 800507c:	4b1b      	ldr	r3, [pc, #108]	; (80050ec <_dtoa_r+0x614>)
 800507e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005082:	f7fb f903 	bl	800028c <__adddf3>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4640      	mov	r0, r8
 800508c:	4649      	mov	r1, r9
 800508e:	f7fb fd3f 	bl	8000b10 <__aeabi_dcmpgt>
 8005092:	2800      	cmp	r0, #0
 8005094:	d175      	bne.n	8005182 <_dtoa_r+0x6aa>
 8005096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800509a:	2000      	movs	r0, #0
 800509c:	4913      	ldr	r1, [pc, #76]	; (80050ec <_dtoa_r+0x614>)
 800509e:	f7fb f8f3 	bl	8000288 <__aeabi_dsub>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4640      	mov	r0, r8
 80050a8:	4649      	mov	r1, r9
 80050aa:	f7fb fd13 	bl	8000ad4 <__aeabi_dcmplt>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	f43f af2f 	beq.w	8004f12 <_dtoa_r+0x43a>
 80050b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050b8:	2b30      	cmp	r3, #48	; 0x30
 80050ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80050be:	d001      	beq.n	80050c4 <_dtoa_r+0x5ec>
 80050c0:	46bb      	mov	fp, r7
 80050c2:	e04d      	b.n	8005160 <_dtoa_r+0x688>
 80050c4:	4615      	mov	r5, r2
 80050c6:	e7f5      	b.n	80050b4 <_dtoa_r+0x5dc>
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <_dtoa_r+0x608>)
 80050ca:	f7fb fa91 	bl	80005f0 <__aeabi_dmul>
 80050ce:	e9cd 0100 	strd	r0, r1, [sp]
 80050d2:	e7bc      	b.n	800504e <_dtoa_r+0x576>
 80050d4:	08006950 	.word	0x08006950
 80050d8:	08006928 	.word	0x08006928
 80050dc:	3ff00000 	.word	0x3ff00000
 80050e0:	40240000 	.word	0x40240000
 80050e4:	401c0000 	.word	0x401c0000
 80050e8:	40140000 	.word	0x40140000
 80050ec:	3fe00000 	.word	0x3fe00000
 80050f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80050f4:	9d02      	ldr	r5, [sp, #8]
 80050f6:	4642      	mov	r2, r8
 80050f8:	464b      	mov	r3, r9
 80050fa:	4630      	mov	r0, r6
 80050fc:	4639      	mov	r1, r7
 80050fe:	f7fb fba1 	bl	8000844 <__aeabi_ddiv>
 8005102:	f7fb fd25 	bl	8000b50 <__aeabi_d2iz>
 8005106:	9000      	str	r0, [sp, #0]
 8005108:	f7fb fa0c 	bl	8000524 <__aeabi_i2d>
 800510c:	4642      	mov	r2, r8
 800510e:	464b      	mov	r3, r9
 8005110:	f7fb fa6e 	bl	80005f0 <__aeabi_dmul>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4630      	mov	r0, r6
 800511a:	4639      	mov	r1, r7
 800511c:	f7fb f8b4 	bl	8000288 <__aeabi_dsub>
 8005120:	9e00      	ldr	r6, [sp, #0]
 8005122:	9f03      	ldr	r7, [sp, #12]
 8005124:	3630      	adds	r6, #48	; 0x30
 8005126:	f805 6b01 	strb.w	r6, [r5], #1
 800512a:	9e02      	ldr	r6, [sp, #8]
 800512c:	1bae      	subs	r6, r5, r6
 800512e:	42b7      	cmp	r7, r6
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	d138      	bne.n	80051a8 <_dtoa_r+0x6d0>
 8005136:	f7fb f8a9 	bl	800028c <__adddf3>
 800513a:	4606      	mov	r6, r0
 800513c:	460f      	mov	r7, r1
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4640      	mov	r0, r8
 8005144:	4649      	mov	r1, r9
 8005146:	f7fb fcc5 	bl	8000ad4 <__aeabi_dcmplt>
 800514a:	b9c8      	cbnz	r0, 8005180 <_dtoa_r+0x6a8>
 800514c:	4632      	mov	r2, r6
 800514e:	463b      	mov	r3, r7
 8005150:	4640      	mov	r0, r8
 8005152:	4649      	mov	r1, r9
 8005154:	f7fb fcb4 	bl	8000ac0 <__aeabi_dcmpeq>
 8005158:	b110      	cbz	r0, 8005160 <_dtoa_r+0x688>
 800515a:	9b00      	ldr	r3, [sp, #0]
 800515c:	07db      	lsls	r3, r3, #31
 800515e:	d40f      	bmi.n	8005180 <_dtoa_r+0x6a8>
 8005160:	4651      	mov	r1, sl
 8005162:	4620      	mov	r0, r4
 8005164:	f000 fcf6 	bl	8005b54 <_Bfree>
 8005168:	2300      	movs	r3, #0
 800516a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800516c:	702b      	strb	r3, [r5, #0]
 800516e:	f10b 0301 	add.w	r3, fp, #1
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005176:	2b00      	cmp	r3, #0
 8005178:	f43f acf8 	beq.w	8004b6c <_dtoa_r+0x94>
 800517c:	601d      	str	r5, [r3, #0]
 800517e:	e4f5      	b.n	8004b6c <_dtoa_r+0x94>
 8005180:	465f      	mov	r7, fp
 8005182:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005186:	2a39      	cmp	r2, #57	; 0x39
 8005188:	f105 33ff 	add.w	r3, r5, #4294967295
 800518c:	d106      	bne.n	800519c <_dtoa_r+0x6c4>
 800518e:	9a02      	ldr	r2, [sp, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	d107      	bne.n	80051a4 <_dtoa_r+0x6cc>
 8005194:	2330      	movs	r3, #48	; 0x30
 8005196:	7013      	strb	r3, [r2, #0]
 8005198:	3701      	adds	r7, #1
 800519a:	4613      	mov	r3, r2
 800519c:	781a      	ldrb	r2, [r3, #0]
 800519e:	3201      	adds	r2, #1
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e78d      	b.n	80050c0 <_dtoa_r+0x5e8>
 80051a4:	461d      	mov	r5, r3
 80051a6:	e7ec      	b.n	8005182 <_dtoa_r+0x6aa>
 80051a8:	2200      	movs	r2, #0
 80051aa:	4ba4      	ldr	r3, [pc, #656]	; (800543c <_dtoa_r+0x964>)
 80051ac:	f7fb fa20 	bl	80005f0 <__aeabi_dmul>
 80051b0:	2200      	movs	r2, #0
 80051b2:	2300      	movs	r3, #0
 80051b4:	4606      	mov	r6, r0
 80051b6:	460f      	mov	r7, r1
 80051b8:	f7fb fc82 	bl	8000ac0 <__aeabi_dcmpeq>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d09a      	beq.n	80050f6 <_dtoa_r+0x61e>
 80051c0:	e7ce      	b.n	8005160 <_dtoa_r+0x688>
 80051c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051c4:	2a00      	cmp	r2, #0
 80051c6:	f000 80cd 	beq.w	8005364 <_dtoa_r+0x88c>
 80051ca:	9a07      	ldr	r2, [sp, #28]
 80051cc:	2a01      	cmp	r2, #1
 80051ce:	f300 80af 	bgt.w	8005330 <_dtoa_r+0x858>
 80051d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051d4:	2a00      	cmp	r2, #0
 80051d6:	f000 80a7 	beq.w	8005328 <_dtoa_r+0x850>
 80051da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051de:	9e08      	ldr	r6, [sp, #32]
 80051e0:	9d05      	ldr	r5, [sp, #20]
 80051e2:	9a05      	ldr	r2, [sp, #20]
 80051e4:	441a      	add	r2, r3
 80051e6:	9205      	str	r2, [sp, #20]
 80051e8:	9a06      	ldr	r2, [sp, #24]
 80051ea:	2101      	movs	r1, #1
 80051ec:	441a      	add	r2, r3
 80051ee:	4620      	mov	r0, r4
 80051f0:	9206      	str	r2, [sp, #24]
 80051f2:	f000 fd4f 	bl	8005c94 <__i2b>
 80051f6:	4607      	mov	r7, r0
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	dd0c      	ble.n	8005216 <_dtoa_r+0x73e>
 80051fc:	9b06      	ldr	r3, [sp, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	dd09      	ble.n	8005216 <_dtoa_r+0x73e>
 8005202:	42ab      	cmp	r3, r5
 8005204:	9a05      	ldr	r2, [sp, #20]
 8005206:	bfa8      	it	ge
 8005208:	462b      	movge	r3, r5
 800520a:	1ad2      	subs	r2, r2, r3
 800520c:	9205      	str	r2, [sp, #20]
 800520e:	9a06      	ldr	r2, [sp, #24]
 8005210:	1aed      	subs	r5, r5, r3
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	9306      	str	r3, [sp, #24]
 8005216:	9b08      	ldr	r3, [sp, #32]
 8005218:	b1f3      	cbz	r3, 8005258 <_dtoa_r+0x780>
 800521a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80a5 	beq.w	800536c <_dtoa_r+0x894>
 8005222:	2e00      	cmp	r6, #0
 8005224:	dd10      	ble.n	8005248 <_dtoa_r+0x770>
 8005226:	4639      	mov	r1, r7
 8005228:	4632      	mov	r2, r6
 800522a:	4620      	mov	r0, r4
 800522c:	f000 fdc8 	bl	8005dc0 <__pow5mult>
 8005230:	4652      	mov	r2, sl
 8005232:	4601      	mov	r1, r0
 8005234:	4607      	mov	r7, r0
 8005236:	4620      	mov	r0, r4
 8005238:	f000 fd35 	bl	8005ca6 <__multiply>
 800523c:	4651      	mov	r1, sl
 800523e:	4680      	mov	r8, r0
 8005240:	4620      	mov	r0, r4
 8005242:	f000 fc87 	bl	8005b54 <_Bfree>
 8005246:	46c2      	mov	sl, r8
 8005248:	9b08      	ldr	r3, [sp, #32]
 800524a:	1b9a      	subs	r2, r3, r6
 800524c:	d004      	beq.n	8005258 <_dtoa_r+0x780>
 800524e:	4651      	mov	r1, sl
 8005250:	4620      	mov	r0, r4
 8005252:	f000 fdb5 	bl	8005dc0 <__pow5mult>
 8005256:	4682      	mov	sl, r0
 8005258:	2101      	movs	r1, #1
 800525a:	4620      	mov	r0, r4
 800525c:	f000 fd1a 	bl	8005c94 <__i2b>
 8005260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005262:	2b00      	cmp	r3, #0
 8005264:	4606      	mov	r6, r0
 8005266:	f340 8083 	ble.w	8005370 <_dtoa_r+0x898>
 800526a:	461a      	mov	r2, r3
 800526c:	4601      	mov	r1, r0
 800526e:	4620      	mov	r0, r4
 8005270:	f000 fda6 	bl	8005dc0 <__pow5mult>
 8005274:	9b07      	ldr	r3, [sp, #28]
 8005276:	2b01      	cmp	r3, #1
 8005278:	4606      	mov	r6, r0
 800527a:	dd7c      	ble.n	8005376 <_dtoa_r+0x89e>
 800527c:	f04f 0800 	mov.w	r8, #0
 8005280:	6933      	ldr	r3, [r6, #16]
 8005282:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005286:	6918      	ldr	r0, [r3, #16]
 8005288:	f000 fcb6 	bl	8005bf8 <__hi0bits>
 800528c:	f1c0 0020 	rsb	r0, r0, #32
 8005290:	9b06      	ldr	r3, [sp, #24]
 8005292:	4418      	add	r0, r3
 8005294:	f010 001f 	ands.w	r0, r0, #31
 8005298:	f000 8096 	beq.w	80053c8 <_dtoa_r+0x8f0>
 800529c:	f1c0 0320 	rsb	r3, r0, #32
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	f340 8087 	ble.w	80053b4 <_dtoa_r+0x8dc>
 80052a6:	9b05      	ldr	r3, [sp, #20]
 80052a8:	f1c0 001c 	rsb	r0, r0, #28
 80052ac:	4403      	add	r3, r0
 80052ae:	9305      	str	r3, [sp, #20]
 80052b0:	9b06      	ldr	r3, [sp, #24]
 80052b2:	4405      	add	r5, r0
 80052b4:	4403      	add	r3, r0
 80052b6:	9306      	str	r3, [sp, #24]
 80052b8:	9b05      	ldr	r3, [sp, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	dd05      	ble.n	80052ca <_dtoa_r+0x7f2>
 80052be:	4651      	mov	r1, sl
 80052c0:	461a      	mov	r2, r3
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 fdca 	bl	8005e5c <__lshift>
 80052c8:	4682      	mov	sl, r0
 80052ca:	9b06      	ldr	r3, [sp, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	dd05      	ble.n	80052dc <_dtoa_r+0x804>
 80052d0:	4631      	mov	r1, r6
 80052d2:	461a      	mov	r2, r3
 80052d4:	4620      	mov	r0, r4
 80052d6:	f000 fdc1 	bl	8005e5c <__lshift>
 80052da:	4606      	mov	r6, r0
 80052dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d074      	beq.n	80053cc <_dtoa_r+0x8f4>
 80052e2:	4631      	mov	r1, r6
 80052e4:	4650      	mov	r0, sl
 80052e6:	f000 fe0a 	bl	8005efe <__mcmp>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	da6e      	bge.n	80053cc <_dtoa_r+0x8f4>
 80052ee:	2300      	movs	r3, #0
 80052f0:	4651      	mov	r1, sl
 80052f2:	220a      	movs	r2, #10
 80052f4:	4620      	mov	r0, r4
 80052f6:	f000 fc44 	bl	8005b82 <__multadd>
 80052fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005300:	4682      	mov	sl, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 81a8 	beq.w	8005658 <_dtoa_r+0xb80>
 8005308:	2300      	movs	r3, #0
 800530a:	4639      	mov	r1, r7
 800530c:	220a      	movs	r2, #10
 800530e:	4620      	mov	r0, r4
 8005310:	f000 fc37 	bl	8005b82 <__multadd>
 8005314:	9b04      	ldr	r3, [sp, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	4607      	mov	r7, r0
 800531a:	f300 80c8 	bgt.w	80054ae <_dtoa_r+0x9d6>
 800531e:	9b07      	ldr	r3, [sp, #28]
 8005320:	2b02      	cmp	r3, #2
 8005322:	f340 80c4 	ble.w	80054ae <_dtoa_r+0x9d6>
 8005326:	e059      	b.n	80053dc <_dtoa_r+0x904>
 8005328:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800532a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800532e:	e756      	b.n	80051de <_dtoa_r+0x706>
 8005330:	9b03      	ldr	r3, [sp, #12]
 8005332:	1e5e      	subs	r6, r3, #1
 8005334:	9b08      	ldr	r3, [sp, #32]
 8005336:	42b3      	cmp	r3, r6
 8005338:	bfbf      	itttt	lt
 800533a:	9b08      	ldrlt	r3, [sp, #32]
 800533c:	9608      	strlt	r6, [sp, #32]
 800533e:	1af2      	sublt	r2, r6, r3
 8005340:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8005342:	bfb6      	itet	lt
 8005344:	189b      	addlt	r3, r3, r2
 8005346:	1b9e      	subge	r6, r3, r6
 8005348:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800534a:	9b03      	ldr	r3, [sp, #12]
 800534c:	bfb8      	it	lt
 800534e:	2600      	movlt	r6, #0
 8005350:	2b00      	cmp	r3, #0
 8005352:	bfb9      	ittee	lt
 8005354:	9b05      	ldrlt	r3, [sp, #20]
 8005356:	9a03      	ldrlt	r2, [sp, #12]
 8005358:	9d05      	ldrge	r5, [sp, #20]
 800535a:	9b03      	ldrge	r3, [sp, #12]
 800535c:	bfbc      	itt	lt
 800535e:	1a9d      	sublt	r5, r3, r2
 8005360:	2300      	movlt	r3, #0
 8005362:	e73e      	b.n	80051e2 <_dtoa_r+0x70a>
 8005364:	9e08      	ldr	r6, [sp, #32]
 8005366:	9d05      	ldr	r5, [sp, #20]
 8005368:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800536a:	e745      	b.n	80051f8 <_dtoa_r+0x720>
 800536c:	9a08      	ldr	r2, [sp, #32]
 800536e:	e76e      	b.n	800524e <_dtoa_r+0x776>
 8005370:	9b07      	ldr	r3, [sp, #28]
 8005372:	2b01      	cmp	r3, #1
 8005374:	dc19      	bgt.n	80053aa <_dtoa_r+0x8d2>
 8005376:	9b00      	ldr	r3, [sp, #0]
 8005378:	b9bb      	cbnz	r3, 80053aa <_dtoa_r+0x8d2>
 800537a:	9b01      	ldr	r3, [sp, #4]
 800537c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005380:	b99b      	cbnz	r3, 80053aa <_dtoa_r+0x8d2>
 8005382:	9b01      	ldr	r3, [sp, #4]
 8005384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005388:	0d1b      	lsrs	r3, r3, #20
 800538a:	051b      	lsls	r3, r3, #20
 800538c:	b183      	cbz	r3, 80053b0 <_dtoa_r+0x8d8>
 800538e:	9b05      	ldr	r3, [sp, #20]
 8005390:	3301      	adds	r3, #1
 8005392:	9305      	str	r3, [sp, #20]
 8005394:	9b06      	ldr	r3, [sp, #24]
 8005396:	3301      	adds	r3, #1
 8005398:	9306      	str	r3, [sp, #24]
 800539a:	f04f 0801 	mov.w	r8, #1
 800539e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f47f af6d 	bne.w	8005280 <_dtoa_r+0x7a8>
 80053a6:	2001      	movs	r0, #1
 80053a8:	e772      	b.n	8005290 <_dtoa_r+0x7b8>
 80053aa:	f04f 0800 	mov.w	r8, #0
 80053ae:	e7f6      	b.n	800539e <_dtoa_r+0x8c6>
 80053b0:	4698      	mov	r8, r3
 80053b2:	e7f4      	b.n	800539e <_dtoa_r+0x8c6>
 80053b4:	d080      	beq.n	80052b8 <_dtoa_r+0x7e0>
 80053b6:	9a05      	ldr	r2, [sp, #20]
 80053b8:	331c      	adds	r3, #28
 80053ba:	441a      	add	r2, r3
 80053bc:	9205      	str	r2, [sp, #20]
 80053be:	9a06      	ldr	r2, [sp, #24]
 80053c0:	441a      	add	r2, r3
 80053c2:	441d      	add	r5, r3
 80053c4:	4613      	mov	r3, r2
 80053c6:	e776      	b.n	80052b6 <_dtoa_r+0x7de>
 80053c8:	4603      	mov	r3, r0
 80053ca:	e7f4      	b.n	80053b6 <_dtoa_r+0x8de>
 80053cc:	9b03      	ldr	r3, [sp, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dc36      	bgt.n	8005440 <_dtoa_r+0x968>
 80053d2:	9b07      	ldr	r3, [sp, #28]
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	dd33      	ble.n	8005440 <_dtoa_r+0x968>
 80053d8:	9b03      	ldr	r3, [sp, #12]
 80053da:	9304      	str	r3, [sp, #16]
 80053dc:	9b04      	ldr	r3, [sp, #16]
 80053de:	b963      	cbnz	r3, 80053fa <_dtoa_r+0x922>
 80053e0:	4631      	mov	r1, r6
 80053e2:	2205      	movs	r2, #5
 80053e4:	4620      	mov	r0, r4
 80053e6:	f000 fbcc 	bl	8005b82 <__multadd>
 80053ea:	4601      	mov	r1, r0
 80053ec:	4606      	mov	r6, r0
 80053ee:	4650      	mov	r0, sl
 80053f0:	f000 fd85 	bl	8005efe <__mcmp>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	f73f adb6 	bgt.w	8004f66 <_dtoa_r+0x48e>
 80053fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053fc:	9d02      	ldr	r5, [sp, #8]
 80053fe:	ea6f 0b03 	mvn.w	fp, r3
 8005402:	2300      	movs	r3, #0
 8005404:	9303      	str	r3, [sp, #12]
 8005406:	4631      	mov	r1, r6
 8005408:	4620      	mov	r0, r4
 800540a:	f000 fba3 	bl	8005b54 <_Bfree>
 800540e:	2f00      	cmp	r7, #0
 8005410:	f43f aea6 	beq.w	8005160 <_dtoa_r+0x688>
 8005414:	9b03      	ldr	r3, [sp, #12]
 8005416:	b12b      	cbz	r3, 8005424 <_dtoa_r+0x94c>
 8005418:	42bb      	cmp	r3, r7
 800541a:	d003      	beq.n	8005424 <_dtoa_r+0x94c>
 800541c:	4619      	mov	r1, r3
 800541e:	4620      	mov	r0, r4
 8005420:	f000 fb98 	bl	8005b54 <_Bfree>
 8005424:	4639      	mov	r1, r7
 8005426:	4620      	mov	r0, r4
 8005428:	f000 fb94 	bl	8005b54 <_Bfree>
 800542c:	e698      	b.n	8005160 <_dtoa_r+0x688>
 800542e:	2600      	movs	r6, #0
 8005430:	4637      	mov	r7, r6
 8005432:	e7e2      	b.n	80053fa <_dtoa_r+0x922>
 8005434:	46bb      	mov	fp, r7
 8005436:	4637      	mov	r7, r6
 8005438:	e595      	b.n	8004f66 <_dtoa_r+0x48e>
 800543a:	bf00      	nop
 800543c:	40240000 	.word	0x40240000
 8005440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005442:	bb93      	cbnz	r3, 80054aa <_dtoa_r+0x9d2>
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	9304      	str	r3, [sp, #16]
 8005448:	9d02      	ldr	r5, [sp, #8]
 800544a:	4631      	mov	r1, r6
 800544c:	4650      	mov	r0, sl
 800544e:	f7ff fab7 	bl	80049c0 <quorem>
 8005452:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005456:	f805 9b01 	strb.w	r9, [r5], #1
 800545a:	9b02      	ldr	r3, [sp, #8]
 800545c:	9a04      	ldr	r2, [sp, #16]
 800545e:	1aeb      	subs	r3, r5, r3
 8005460:	429a      	cmp	r2, r3
 8005462:	f300 80dc 	bgt.w	800561e <_dtoa_r+0xb46>
 8005466:	9b02      	ldr	r3, [sp, #8]
 8005468:	2a01      	cmp	r2, #1
 800546a:	bfac      	ite	ge
 800546c:	189b      	addge	r3, r3, r2
 800546e:	3301      	addlt	r3, #1
 8005470:	4698      	mov	r8, r3
 8005472:	2300      	movs	r3, #0
 8005474:	9303      	str	r3, [sp, #12]
 8005476:	4651      	mov	r1, sl
 8005478:	2201      	movs	r2, #1
 800547a:	4620      	mov	r0, r4
 800547c:	f000 fcee 	bl	8005e5c <__lshift>
 8005480:	4631      	mov	r1, r6
 8005482:	4682      	mov	sl, r0
 8005484:	f000 fd3b 	bl	8005efe <__mcmp>
 8005488:	2800      	cmp	r0, #0
 800548a:	f300 808d 	bgt.w	80055a8 <_dtoa_r+0xad0>
 800548e:	d103      	bne.n	8005498 <_dtoa_r+0x9c0>
 8005490:	f019 0f01 	tst.w	r9, #1
 8005494:	f040 8088 	bne.w	80055a8 <_dtoa_r+0xad0>
 8005498:	4645      	mov	r5, r8
 800549a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800549e:	2b30      	cmp	r3, #48	; 0x30
 80054a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80054a4:	d1af      	bne.n	8005406 <_dtoa_r+0x92e>
 80054a6:	4615      	mov	r5, r2
 80054a8:	e7f7      	b.n	800549a <_dtoa_r+0x9c2>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	9304      	str	r3, [sp, #16]
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	dd05      	ble.n	80054be <_dtoa_r+0x9e6>
 80054b2:	4639      	mov	r1, r7
 80054b4:	462a      	mov	r2, r5
 80054b6:	4620      	mov	r0, r4
 80054b8:	f000 fcd0 	bl	8005e5c <__lshift>
 80054bc:	4607      	mov	r7, r0
 80054be:	f1b8 0f00 	cmp.w	r8, #0
 80054c2:	d04c      	beq.n	800555e <_dtoa_r+0xa86>
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 fb10 	bl	8005aec <_Balloc>
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	3202      	adds	r2, #2
 80054d0:	4605      	mov	r5, r0
 80054d2:	0092      	lsls	r2, r2, #2
 80054d4:	f107 010c 	add.w	r1, r7, #12
 80054d8:	300c      	adds	r0, #12
 80054da:	f000 faef 	bl	8005abc <memcpy>
 80054de:	2201      	movs	r2, #1
 80054e0:	4629      	mov	r1, r5
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 fcba 	bl	8005e5c <__lshift>
 80054e8:	9b00      	ldr	r3, [sp, #0]
 80054ea:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80054ee:	9703      	str	r7, [sp, #12]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	4607      	mov	r7, r0
 80054f6:	9305      	str	r3, [sp, #20]
 80054f8:	4631      	mov	r1, r6
 80054fa:	4650      	mov	r0, sl
 80054fc:	f7ff fa60 	bl	80049c0 <quorem>
 8005500:	9903      	ldr	r1, [sp, #12]
 8005502:	4605      	mov	r5, r0
 8005504:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005508:	4650      	mov	r0, sl
 800550a:	f000 fcf8 	bl	8005efe <__mcmp>
 800550e:	463a      	mov	r2, r7
 8005510:	9000      	str	r0, [sp, #0]
 8005512:	4631      	mov	r1, r6
 8005514:	4620      	mov	r0, r4
 8005516:	f000 fd0c 	bl	8005f32 <__mdiff>
 800551a:	68c3      	ldr	r3, [r0, #12]
 800551c:	4602      	mov	r2, r0
 800551e:	bb03      	cbnz	r3, 8005562 <_dtoa_r+0xa8a>
 8005520:	4601      	mov	r1, r0
 8005522:	9006      	str	r0, [sp, #24]
 8005524:	4650      	mov	r0, sl
 8005526:	f000 fcea 	bl	8005efe <__mcmp>
 800552a:	9a06      	ldr	r2, [sp, #24]
 800552c:	4603      	mov	r3, r0
 800552e:	4611      	mov	r1, r2
 8005530:	4620      	mov	r0, r4
 8005532:	9306      	str	r3, [sp, #24]
 8005534:	f000 fb0e 	bl	8005b54 <_Bfree>
 8005538:	9b06      	ldr	r3, [sp, #24]
 800553a:	b9a3      	cbnz	r3, 8005566 <_dtoa_r+0xa8e>
 800553c:	9a07      	ldr	r2, [sp, #28]
 800553e:	b992      	cbnz	r2, 8005566 <_dtoa_r+0xa8e>
 8005540:	9a05      	ldr	r2, [sp, #20]
 8005542:	b982      	cbnz	r2, 8005566 <_dtoa_r+0xa8e>
 8005544:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005548:	d029      	beq.n	800559e <_dtoa_r+0xac6>
 800554a:	9b00      	ldr	r3, [sp, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	dd01      	ble.n	8005554 <_dtoa_r+0xa7c>
 8005550:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8005554:	f108 0501 	add.w	r5, r8, #1
 8005558:	f888 9000 	strb.w	r9, [r8]
 800555c:	e753      	b.n	8005406 <_dtoa_r+0x92e>
 800555e:	4638      	mov	r0, r7
 8005560:	e7c2      	b.n	80054e8 <_dtoa_r+0xa10>
 8005562:	2301      	movs	r3, #1
 8005564:	e7e3      	b.n	800552e <_dtoa_r+0xa56>
 8005566:	9a00      	ldr	r2, [sp, #0]
 8005568:	2a00      	cmp	r2, #0
 800556a:	db04      	blt.n	8005576 <_dtoa_r+0xa9e>
 800556c:	d125      	bne.n	80055ba <_dtoa_r+0xae2>
 800556e:	9a07      	ldr	r2, [sp, #28]
 8005570:	bb1a      	cbnz	r2, 80055ba <_dtoa_r+0xae2>
 8005572:	9a05      	ldr	r2, [sp, #20]
 8005574:	bb0a      	cbnz	r2, 80055ba <_dtoa_r+0xae2>
 8005576:	2b00      	cmp	r3, #0
 8005578:	ddec      	ble.n	8005554 <_dtoa_r+0xa7c>
 800557a:	4651      	mov	r1, sl
 800557c:	2201      	movs	r2, #1
 800557e:	4620      	mov	r0, r4
 8005580:	f000 fc6c 	bl	8005e5c <__lshift>
 8005584:	4631      	mov	r1, r6
 8005586:	4682      	mov	sl, r0
 8005588:	f000 fcb9 	bl	8005efe <__mcmp>
 800558c:	2800      	cmp	r0, #0
 800558e:	dc03      	bgt.n	8005598 <_dtoa_r+0xac0>
 8005590:	d1e0      	bne.n	8005554 <_dtoa_r+0xa7c>
 8005592:	f019 0f01 	tst.w	r9, #1
 8005596:	d0dd      	beq.n	8005554 <_dtoa_r+0xa7c>
 8005598:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800559c:	d1d8      	bne.n	8005550 <_dtoa_r+0xa78>
 800559e:	2339      	movs	r3, #57	; 0x39
 80055a0:	f888 3000 	strb.w	r3, [r8]
 80055a4:	f108 0801 	add.w	r8, r8, #1
 80055a8:	4645      	mov	r5, r8
 80055aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055ae:	2b39      	cmp	r3, #57	; 0x39
 80055b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80055b4:	d03b      	beq.n	800562e <_dtoa_r+0xb56>
 80055b6:	3301      	adds	r3, #1
 80055b8:	e040      	b.n	800563c <_dtoa_r+0xb64>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f108 0501 	add.w	r5, r8, #1
 80055c0:	dd05      	ble.n	80055ce <_dtoa_r+0xaf6>
 80055c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80055c6:	d0ea      	beq.n	800559e <_dtoa_r+0xac6>
 80055c8:	f109 0901 	add.w	r9, r9, #1
 80055cc:	e7c4      	b.n	8005558 <_dtoa_r+0xa80>
 80055ce:	9b02      	ldr	r3, [sp, #8]
 80055d0:	9a04      	ldr	r2, [sp, #16]
 80055d2:	f805 9c01 	strb.w	r9, [r5, #-1]
 80055d6:	1aeb      	subs	r3, r5, r3
 80055d8:	4293      	cmp	r3, r2
 80055da:	46a8      	mov	r8, r5
 80055dc:	f43f af4b 	beq.w	8005476 <_dtoa_r+0x99e>
 80055e0:	4651      	mov	r1, sl
 80055e2:	2300      	movs	r3, #0
 80055e4:	220a      	movs	r2, #10
 80055e6:	4620      	mov	r0, r4
 80055e8:	f000 facb 	bl	8005b82 <__multadd>
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	9903      	ldr	r1, [sp, #12]
 80055f0:	42bb      	cmp	r3, r7
 80055f2:	4682      	mov	sl, r0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	f04f 020a 	mov.w	r2, #10
 80055fc:	4620      	mov	r0, r4
 80055fe:	d104      	bne.n	800560a <_dtoa_r+0xb32>
 8005600:	f000 fabf 	bl	8005b82 <__multadd>
 8005604:	9003      	str	r0, [sp, #12]
 8005606:	4607      	mov	r7, r0
 8005608:	e776      	b.n	80054f8 <_dtoa_r+0xa20>
 800560a:	f000 faba 	bl	8005b82 <__multadd>
 800560e:	2300      	movs	r3, #0
 8005610:	9003      	str	r0, [sp, #12]
 8005612:	220a      	movs	r2, #10
 8005614:	4639      	mov	r1, r7
 8005616:	4620      	mov	r0, r4
 8005618:	f000 fab3 	bl	8005b82 <__multadd>
 800561c:	e7f3      	b.n	8005606 <_dtoa_r+0xb2e>
 800561e:	4651      	mov	r1, sl
 8005620:	2300      	movs	r3, #0
 8005622:	220a      	movs	r2, #10
 8005624:	4620      	mov	r0, r4
 8005626:	f000 faac 	bl	8005b82 <__multadd>
 800562a:	4682      	mov	sl, r0
 800562c:	e70d      	b.n	800544a <_dtoa_r+0x972>
 800562e:	9b02      	ldr	r3, [sp, #8]
 8005630:	4293      	cmp	r3, r2
 8005632:	d105      	bne.n	8005640 <_dtoa_r+0xb68>
 8005634:	9a02      	ldr	r2, [sp, #8]
 8005636:	f10b 0b01 	add.w	fp, fp, #1
 800563a:	2331      	movs	r3, #49	; 0x31
 800563c:	7013      	strb	r3, [r2, #0]
 800563e:	e6e2      	b.n	8005406 <_dtoa_r+0x92e>
 8005640:	4615      	mov	r5, r2
 8005642:	e7b2      	b.n	80055aa <_dtoa_r+0xad2>
 8005644:	4b09      	ldr	r3, [pc, #36]	; (800566c <_dtoa_r+0xb94>)
 8005646:	f7ff baae 	b.w	8004ba6 <_dtoa_r+0xce>
 800564a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800564c:	2b00      	cmp	r3, #0
 800564e:	f47f aa88 	bne.w	8004b62 <_dtoa_r+0x8a>
 8005652:	4b07      	ldr	r3, [pc, #28]	; (8005670 <_dtoa_r+0xb98>)
 8005654:	f7ff baa7 	b.w	8004ba6 <_dtoa_r+0xce>
 8005658:	9b04      	ldr	r3, [sp, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f73f aef4 	bgt.w	8005448 <_dtoa_r+0x970>
 8005660:	9b07      	ldr	r3, [sp, #28]
 8005662:	2b02      	cmp	r3, #2
 8005664:	f77f aef0 	ble.w	8005448 <_dtoa_r+0x970>
 8005668:	e6b8      	b.n	80053dc <_dtoa_r+0x904>
 800566a:	bf00      	nop
 800566c:	080068f9 	.word	0x080068f9
 8005670:	0800691b 	.word	0x0800691b

08005674 <_localeconv_r>:
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <_localeconv_r+0x14>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6a18      	ldr	r0, [r3, #32]
 800567a:	4b04      	ldr	r3, [pc, #16]	; (800568c <_localeconv_r+0x18>)
 800567c:	2800      	cmp	r0, #0
 800567e:	bf08      	it	eq
 8005680:	4618      	moveq	r0, r3
 8005682:	30f0      	adds	r0, #240	; 0xf0
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000004 	.word	0x20000004
 800568c:	20000508 	.word	0x20000508

08005690 <malloc>:
 8005690:	4b02      	ldr	r3, [pc, #8]	; (800569c <malloc+0xc>)
 8005692:	4601      	mov	r1, r0
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	f000 b803 	b.w	80056a0 <_malloc_r>
 800569a:	bf00      	nop
 800569c:	20000004 	.word	0x20000004

080056a0 <_malloc_r>:
 80056a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a4:	f101 040b 	add.w	r4, r1, #11
 80056a8:	2c16      	cmp	r4, #22
 80056aa:	4681      	mov	r9, r0
 80056ac:	d907      	bls.n	80056be <_malloc_r+0x1e>
 80056ae:	f034 0407 	bics.w	r4, r4, #7
 80056b2:	d505      	bpl.n	80056c0 <_malloc_r+0x20>
 80056b4:	230c      	movs	r3, #12
 80056b6:	f8c9 3000 	str.w	r3, [r9]
 80056ba:	2600      	movs	r6, #0
 80056bc:	e131      	b.n	8005922 <_malloc_r+0x282>
 80056be:	2410      	movs	r4, #16
 80056c0:	428c      	cmp	r4, r1
 80056c2:	d3f7      	bcc.n	80056b4 <_malloc_r+0x14>
 80056c4:	4648      	mov	r0, r9
 80056c6:	f000 fa05 	bl	8005ad4 <__malloc_lock>
 80056ca:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80056ce:	4d9c      	ldr	r5, [pc, #624]	; (8005940 <_malloc_r+0x2a0>)
 80056d0:	d236      	bcs.n	8005740 <_malloc_r+0xa0>
 80056d2:	f104 0208 	add.w	r2, r4, #8
 80056d6:	442a      	add	r2, r5
 80056d8:	f1a2 0108 	sub.w	r1, r2, #8
 80056dc:	6856      	ldr	r6, [r2, #4]
 80056de:	428e      	cmp	r6, r1
 80056e0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80056e4:	d102      	bne.n	80056ec <_malloc_r+0x4c>
 80056e6:	68d6      	ldr	r6, [r2, #12]
 80056e8:	42b2      	cmp	r2, r6
 80056ea:	d010      	beq.n	800570e <_malloc_r+0x6e>
 80056ec:	6873      	ldr	r3, [r6, #4]
 80056ee:	68f2      	ldr	r2, [r6, #12]
 80056f0:	68b1      	ldr	r1, [r6, #8]
 80056f2:	f023 0303 	bic.w	r3, r3, #3
 80056f6:	60ca      	str	r2, [r1, #12]
 80056f8:	4433      	add	r3, r6
 80056fa:	6091      	str	r1, [r2, #8]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	605a      	str	r2, [r3, #4]
 8005704:	4648      	mov	r0, r9
 8005706:	f000 f9eb 	bl	8005ae0 <__malloc_unlock>
 800570a:	3608      	adds	r6, #8
 800570c:	e109      	b.n	8005922 <_malloc_r+0x282>
 800570e:	3302      	adds	r3, #2
 8005710:	4a8c      	ldr	r2, [pc, #560]	; (8005944 <_malloc_r+0x2a4>)
 8005712:	692e      	ldr	r6, [r5, #16]
 8005714:	4296      	cmp	r6, r2
 8005716:	4611      	mov	r1, r2
 8005718:	d06d      	beq.n	80057f6 <_malloc_r+0x156>
 800571a:	6870      	ldr	r0, [r6, #4]
 800571c:	f020 0003 	bic.w	r0, r0, #3
 8005720:	1b07      	subs	r7, r0, r4
 8005722:	2f0f      	cmp	r7, #15
 8005724:	dd47      	ble.n	80057b6 <_malloc_r+0x116>
 8005726:	1933      	adds	r3, r6, r4
 8005728:	f044 0401 	orr.w	r4, r4, #1
 800572c:	6074      	str	r4, [r6, #4]
 800572e:	616b      	str	r3, [r5, #20]
 8005730:	612b      	str	r3, [r5, #16]
 8005732:	60da      	str	r2, [r3, #12]
 8005734:	609a      	str	r2, [r3, #8]
 8005736:	f047 0201 	orr.w	r2, r7, #1
 800573a:	605a      	str	r2, [r3, #4]
 800573c:	5037      	str	r7, [r6, r0]
 800573e:	e7e1      	b.n	8005704 <_malloc_r+0x64>
 8005740:	0a63      	lsrs	r3, r4, #9
 8005742:	d02a      	beq.n	800579a <_malloc_r+0xfa>
 8005744:	2b04      	cmp	r3, #4
 8005746:	d812      	bhi.n	800576e <_malloc_r+0xce>
 8005748:	09a3      	lsrs	r3, r4, #6
 800574a:	3338      	adds	r3, #56	; 0x38
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005752:	f1a2 0008 	sub.w	r0, r2, #8
 8005756:	6856      	ldr	r6, [r2, #4]
 8005758:	4286      	cmp	r6, r0
 800575a:	d006      	beq.n	800576a <_malloc_r+0xca>
 800575c:	6872      	ldr	r2, [r6, #4]
 800575e:	f022 0203 	bic.w	r2, r2, #3
 8005762:	1b11      	subs	r1, r2, r4
 8005764:	290f      	cmp	r1, #15
 8005766:	dd1c      	ble.n	80057a2 <_malloc_r+0x102>
 8005768:	3b01      	subs	r3, #1
 800576a:	3301      	adds	r3, #1
 800576c:	e7d0      	b.n	8005710 <_malloc_r+0x70>
 800576e:	2b14      	cmp	r3, #20
 8005770:	d801      	bhi.n	8005776 <_malloc_r+0xd6>
 8005772:	335b      	adds	r3, #91	; 0x5b
 8005774:	e7ea      	b.n	800574c <_malloc_r+0xac>
 8005776:	2b54      	cmp	r3, #84	; 0x54
 8005778:	d802      	bhi.n	8005780 <_malloc_r+0xe0>
 800577a:	0b23      	lsrs	r3, r4, #12
 800577c:	336e      	adds	r3, #110	; 0x6e
 800577e:	e7e5      	b.n	800574c <_malloc_r+0xac>
 8005780:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005784:	d802      	bhi.n	800578c <_malloc_r+0xec>
 8005786:	0be3      	lsrs	r3, r4, #15
 8005788:	3377      	adds	r3, #119	; 0x77
 800578a:	e7df      	b.n	800574c <_malloc_r+0xac>
 800578c:	f240 5254 	movw	r2, #1364	; 0x554
 8005790:	4293      	cmp	r3, r2
 8005792:	d804      	bhi.n	800579e <_malloc_r+0xfe>
 8005794:	0ca3      	lsrs	r3, r4, #18
 8005796:	337c      	adds	r3, #124	; 0x7c
 8005798:	e7d8      	b.n	800574c <_malloc_r+0xac>
 800579a:	233f      	movs	r3, #63	; 0x3f
 800579c:	e7d6      	b.n	800574c <_malloc_r+0xac>
 800579e:	237e      	movs	r3, #126	; 0x7e
 80057a0:	e7d4      	b.n	800574c <_malloc_r+0xac>
 80057a2:	2900      	cmp	r1, #0
 80057a4:	68f1      	ldr	r1, [r6, #12]
 80057a6:	db04      	blt.n	80057b2 <_malloc_r+0x112>
 80057a8:	68b3      	ldr	r3, [r6, #8]
 80057aa:	60d9      	str	r1, [r3, #12]
 80057ac:	608b      	str	r3, [r1, #8]
 80057ae:	18b3      	adds	r3, r6, r2
 80057b0:	e7a4      	b.n	80056fc <_malloc_r+0x5c>
 80057b2:	460e      	mov	r6, r1
 80057b4:	e7d0      	b.n	8005758 <_malloc_r+0xb8>
 80057b6:	2f00      	cmp	r7, #0
 80057b8:	616a      	str	r2, [r5, #20]
 80057ba:	612a      	str	r2, [r5, #16]
 80057bc:	db05      	blt.n	80057ca <_malloc_r+0x12a>
 80057be:	4430      	add	r0, r6
 80057c0:	6843      	ldr	r3, [r0, #4]
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	6043      	str	r3, [r0, #4]
 80057c8:	e79c      	b.n	8005704 <_malloc_r+0x64>
 80057ca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80057ce:	d244      	bcs.n	800585a <_malloc_r+0x1ba>
 80057d0:	08c0      	lsrs	r0, r0, #3
 80057d2:	1087      	asrs	r7, r0, #2
 80057d4:	2201      	movs	r2, #1
 80057d6:	fa02 f707 	lsl.w	r7, r2, r7
 80057da:	686a      	ldr	r2, [r5, #4]
 80057dc:	3001      	adds	r0, #1
 80057de:	433a      	orrs	r2, r7
 80057e0:	606a      	str	r2, [r5, #4]
 80057e2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80057e6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80057ea:	60b7      	str	r7, [r6, #8]
 80057ec:	3a08      	subs	r2, #8
 80057ee:	60f2      	str	r2, [r6, #12]
 80057f0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80057f4:	60fe      	str	r6, [r7, #12]
 80057f6:	2001      	movs	r0, #1
 80057f8:	109a      	asrs	r2, r3, #2
 80057fa:	fa00 f202 	lsl.w	r2, r0, r2
 80057fe:	6868      	ldr	r0, [r5, #4]
 8005800:	4282      	cmp	r2, r0
 8005802:	f200 80a1 	bhi.w	8005948 <_malloc_r+0x2a8>
 8005806:	4202      	tst	r2, r0
 8005808:	d106      	bne.n	8005818 <_malloc_r+0x178>
 800580a:	f023 0303 	bic.w	r3, r3, #3
 800580e:	0052      	lsls	r2, r2, #1
 8005810:	4202      	tst	r2, r0
 8005812:	f103 0304 	add.w	r3, r3, #4
 8005816:	d0fa      	beq.n	800580e <_malloc_r+0x16e>
 8005818:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800581c:	46e0      	mov	r8, ip
 800581e:	469e      	mov	lr, r3
 8005820:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8005824:	4546      	cmp	r6, r8
 8005826:	d153      	bne.n	80058d0 <_malloc_r+0x230>
 8005828:	f10e 0e01 	add.w	lr, lr, #1
 800582c:	f01e 0f03 	tst.w	lr, #3
 8005830:	f108 0808 	add.w	r8, r8, #8
 8005834:	d1f4      	bne.n	8005820 <_malloc_r+0x180>
 8005836:	0798      	lsls	r0, r3, #30
 8005838:	d179      	bne.n	800592e <_malloc_r+0x28e>
 800583a:	686b      	ldr	r3, [r5, #4]
 800583c:	ea23 0302 	bic.w	r3, r3, r2
 8005840:	606b      	str	r3, [r5, #4]
 8005842:	6868      	ldr	r0, [r5, #4]
 8005844:	0052      	lsls	r2, r2, #1
 8005846:	4282      	cmp	r2, r0
 8005848:	d87e      	bhi.n	8005948 <_malloc_r+0x2a8>
 800584a:	2a00      	cmp	r2, #0
 800584c:	d07c      	beq.n	8005948 <_malloc_r+0x2a8>
 800584e:	4673      	mov	r3, lr
 8005850:	4202      	tst	r2, r0
 8005852:	d1e1      	bne.n	8005818 <_malloc_r+0x178>
 8005854:	3304      	adds	r3, #4
 8005856:	0052      	lsls	r2, r2, #1
 8005858:	e7fa      	b.n	8005850 <_malloc_r+0x1b0>
 800585a:	0a42      	lsrs	r2, r0, #9
 800585c:	2a04      	cmp	r2, #4
 800585e:	d815      	bhi.n	800588c <_malloc_r+0x1ec>
 8005860:	0982      	lsrs	r2, r0, #6
 8005862:	3238      	adds	r2, #56	; 0x38
 8005864:	1c57      	adds	r7, r2, #1
 8005866:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800586a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800586e:	45be      	cmp	lr, r7
 8005870:	d126      	bne.n	80058c0 <_malloc_r+0x220>
 8005872:	2001      	movs	r0, #1
 8005874:	1092      	asrs	r2, r2, #2
 8005876:	fa00 f202 	lsl.w	r2, r0, r2
 800587a:	6868      	ldr	r0, [r5, #4]
 800587c:	4310      	orrs	r0, r2
 800587e:	6068      	str	r0, [r5, #4]
 8005880:	f8c6 e00c 	str.w	lr, [r6, #12]
 8005884:	60b7      	str	r7, [r6, #8]
 8005886:	f8ce 6008 	str.w	r6, [lr, #8]
 800588a:	e7b3      	b.n	80057f4 <_malloc_r+0x154>
 800588c:	2a14      	cmp	r2, #20
 800588e:	d801      	bhi.n	8005894 <_malloc_r+0x1f4>
 8005890:	325b      	adds	r2, #91	; 0x5b
 8005892:	e7e7      	b.n	8005864 <_malloc_r+0x1c4>
 8005894:	2a54      	cmp	r2, #84	; 0x54
 8005896:	d802      	bhi.n	800589e <_malloc_r+0x1fe>
 8005898:	0b02      	lsrs	r2, r0, #12
 800589a:	326e      	adds	r2, #110	; 0x6e
 800589c:	e7e2      	b.n	8005864 <_malloc_r+0x1c4>
 800589e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80058a2:	d802      	bhi.n	80058aa <_malloc_r+0x20a>
 80058a4:	0bc2      	lsrs	r2, r0, #15
 80058a6:	3277      	adds	r2, #119	; 0x77
 80058a8:	e7dc      	b.n	8005864 <_malloc_r+0x1c4>
 80058aa:	f240 5754 	movw	r7, #1364	; 0x554
 80058ae:	42ba      	cmp	r2, r7
 80058b0:	bf9a      	itte	ls
 80058b2:	0c82      	lsrls	r2, r0, #18
 80058b4:	327c      	addls	r2, #124	; 0x7c
 80058b6:	227e      	movhi	r2, #126	; 0x7e
 80058b8:	e7d4      	b.n	8005864 <_malloc_r+0x1c4>
 80058ba:	68bf      	ldr	r7, [r7, #8]
 80058bc:	45be      	cmp	lr, r7
 80058be:	d004      	beq.n	80058ca <_malloc_r+0x22a>
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	f022 0203 	bic.w	r2, r2, #3
 80058c6:	4290      	cmp	r0, r2
 80058c8:	d3f7      	bcc.n	80058ba <_malloc_r+0x21a>
 80058ca:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80058ce:	e7d7      	b.n	8005880 <_malloc_r+0x1e0>
 80058d0:	6870      	ldr	r0, [r6, #4]
 80058d2:	68f7      	ldr	r7, [r6, #12]
 80058d4:	f020 0003 	bic.w	r0, r0, #3
 80058d8:	eba0 0a04 	sub.w	sl, r0, r4
 80058dc:	f1ba 0f0f 	cmp.w	sl, #15
 80058e0:	dd10      	ble.n	8005904 <_malloc_r+0x264>
 80058e2:	68b2      	ldr	r2, [r6, #8]
 80058e4:	1933      	adds	r3, r6, r4
 80058e6:	f044 0401 	orr.w	r4, r4, #1
 80058ea:	6074      	str	r4, [r6, #4]
 80058ec:	60d7      	str	r7, [r2, #12]
 80058ee:	60ba      	str	r2, [r7, #8]
 80058f0:	f04a 0201 	orr.w	r2, sl, #1
 80058f4:	616b      	str	r3, [r5, #20]
 80058f6:	612b      	str	r3, [r5, #16]
 80058f8:	60d9      	str	r1, [r3, #12]
 80058fa:	6099      	str	r1, [r3, #8]
 80058fc:	605a      	str	r2, [r3, #4]
 80058fe:	f846 a000 	str.w	sl, [r6, r0]
 8005902:	e6ff      	b.n	8005704 <_malloc_r+0x64>
 8005904:	f1ba 0f00 	cmp.w	sl, #0
 8005908:	db0f      	blt.n	800592a <_malloc_r+0x28a>
 800590a:	4430      	add	r0, r6
 800590c:	6843      	ldr	r3, [r0, #4]
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6043      	str	r3, [r0, #4]
 8005914:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8005918:	4648      	mov	r0, r9
 800591a:	60df      	str	r7, [r3, #12]
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	f000 f8df 	bl	8005ae0 <__malloc_unlock>
 8005922:	4630      	mov	r0, r6
 8005924:	b003      	add	sp, #12
 8005926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592a:	463e      	mov	r6, r7
 800592c:	e77a      	b.n	8005824 <_malloc_r+0x184>
 800592e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8005932:	4584      	cmp	ip, r0
 8005934:	f103 33ff 	add.w	r3, r3, #4294967295
 8005938:	f43f af7d 	beq.w	8005836 <_malloc_r+0x196>
 800593c:	e781      	b.n	8005842 <_malloc_r+0x1a2>
 800593e:	bf00      	nop
 8005940:	200000f8 	.word	0x200000f8
 8005944:	20000100 	.word	0x20000100
 8005948:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800594c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005950:	f026 0603 	bic.w	r6, r6, #3
 8005954:	42b4      	cmp	r4, r6
 8005956:	d803      	bhi.n	8005960 <_malloc_r+0x2c0>
 8005958:	1b33      	subs	r3, r6, r4
 800595a:	2b0f      	cmp	r3, #15
 800595c:	f300 8096 	bgt.w	8005a8c <_malloc_r+0x3ec>
 8005960:	4a4f      	ldr	r2, [pc, #316]	; (8005aa0 <_malloc_r+0x400>)
 8005962:	6817      	ldr	r7, [r2, #0]
 8005964:	4a4f      	ldr	r2, [pc, #316]	; (8005aa4 <_malloc_r+0x404>)
 8005966:	6811      	ldr	r1, [r2, #0]
 8005968:	3710      	adds	r7, #16
 800596a:	3101      	adds	r1, #1
 800596c:	eb0b 0306 	add.w	r3, fp, r6
 8005970:	4427      	add	r7, r4
 8005972:	d005      	beq.n	8005980 <_malloc_r+0x2e0>
 8005974:	494c      	ldr	r1, [pc, #304]	; (8005aa8 <_malloc_r+0x408>)
 8005976:	3901      	subs	r1, #1
 8005978:	440f      	add	r7, r1
 800597a:	3101      	adds	r1, #1
 800597c:	4249      	negs	r1, r1
 800597e:	400f      	ands	r7, r1
 8005980:	4639      	mov	r1, r7
 8005982:	4648      	mov	r0, r9
 8005984:	9201      	str	r2, [sp, #4]
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	f000 fb80 	bl	800608c <_sbrk_r>
 800598c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005990:	4680      	mov	r8, r0
 8005992:	d056      	beq.n	8005a42 <_malloc_r+0x3a2>
 8005994:	9b00      	ldr	r3, [sp, #0]
 8005996:	9a01      	ldr	r2, [sp, #4]
 8005998:	4283      	cmp	r3, r0
 800599a:	d901      	bls.n	80059a0 <_malloc_r+0x300>
 800599c:	45ab      	cmp	fp, r5
 800599e:	d150      	bne.n	8005a42 <_malloc_r+0x3a2>
 80059a0:	4842      	ldr	r0, [pc, #264]	; (8005aac <_malloc_r+0x40c>)
 80059a2:	6801      	ldr	r1, [r0, #0]
 80059a4:	4543      	cmp	r3, r8
 80059a6:	eb07 0e01 	add.w	lr, r7, r1
 80059aa:	f8c0 e000 	str.w	lr, [r0]
 80059ae:	4940      	ldr	r1, [pc, #256]	; (8005ab0 <_malloc_r+0x410>)
 80059b0:	4682      	mov	sl, r0
 80059b2:	d113      	bne.n	80059dc <_malloc_r+0x33c>
 80059b4:	420b      	tst	r3, r1
 80059b6:	d111      	bne.n	80059dc <_malloc_r+0x33c>
 80059b8:	68ab      	ldr	r3, [r5, #8]
 80059ba:	443e      	add	r6, r7
 80059bc:	f046 0601 	orr.w	r6, r6, #1
 80059c0:	605e      	str	r6, [r3, #4]
 80059c2:	4a3c      	ldr	r2, [pc, #240]	; (8005ab4 <_malloc_r+0x414>)
 80059c4:	f8da 3000 	ldr.w	r3, [sl]
 80059c8:	6811      	ldr	r1, [r2, #0]
 80059ca:	428b      	cmp	r3, r1
 80059cc:	bf88      	it	hi
 80059ce:	6013      	strhi	r3, [r2, #0]
 80059d0:	4a39      	ldr	r2, [pc, #228]	; (8005ab8 <_malloc_r+0x418>)
 80059d2:	6811      	ldr	r1, [r2, #0]
 80059d4:	428b      	cmp	r3, r1
 80059d6:	bf88      	it	hi
 80059d8:	6013      	strhi	r3, [r2, #0]
 80059da:	e032      	b.n	8005a42 <_malloc_r+0x3a2>
 80059dc:	6810      	ldr	r0, [r2, #0]
 80059de:	3001      	adds	r0, #1
 80059e0:	bf1b      	ittet	ne
 80059e2:	eba8 0303 	subne.w	r3, r8, r3
 80059e6:	4473      	addne	r3, lr
 80059e8:	f8c2 8000 	streq.w	r8, [r2]
 80059ec:	f8ca 3000 	strne.w	r3, [sl]
 80059f0:	f018 0007 	ands.w	r0, r8, #7
 80059f4:	bf1c      	itt	ne
 80059f6:	f1c0 0008 	rsbne	r0, r0, #8
 80059fa:	4480      	addne	r8, r0
 80059fc:	4b2a      	ldr	r3, [pc, #168]	; (8005aa8 <_malloc_r+0x408>)
 80059fe:	4447      	add	r7, r8
 8005a00:	4418      	add	r0, r3
 8005a02:	400f      	ands	r7, r1
 8005a04:	1bc7      	subs	r7, r0, r7
 8005a06:	4639      	mov	r1, r7
 8005a08:	4648      	mov	r0, r9
 8005a0a:	f000 fb3f 	bl	800608c <_sbrk_r>
 8005a0e:	1c43      	adds	r3, r0, #1
 8005a10:	bf08      	it	eq
 8005a12:	4640      	moveq	r0, r8
 8005a14:	f8da 3000 	ldr.w	r3, [sl]
 8005a18:	f8c5 8008 	str.w	r8, [r5, #8]
 8005a1c:	bf08      	it	eq
 8005a1e:	2700      	moveq	r7, #0
 8005a20:	eba0 0008 	sub.w	r0, r0, r8
 8005a24:	443b      	add	r3, r7
 8005a26:	4407      	add	r7, r0
 8005a28:	f047 0701 	orr.w	r7, r7, #1
 8005a2c:	45ab      	cmp	fp, r5
 8005a2e:	f8ca 3000 	str.w	r3, [sl]
 8005a32:	f8c8 7004 	str.w	r7, [r8, #4]
 8005a36:	d0c4      	beq.n	80059c2 <_malloc_r+0x322>
 8005a38:	2e0f      	cmp	r6, #15
 8005a3a:	d810      	bhi.n	8005a5e <_malloc_r+0x3be>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005a42:	68ab      	ldr	r3, [r5, #8]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	f022 0203 	bic.w	r2, r2, #3
 8005a4a:	4294      	cmp	r4, r2
 8005a4c:	eba2 0304 	sub.w	r3, r2, r4
 8005a50:	d801      	bhi.n	8005a56 <_malloc_r+0x3b6>
 8005a52:	2b0f      	cmp	r3, #15
 8005a54:	dc1a      	bgt.n	8005a8c <_malloc_r+0x3ec>
 8005a56:	4648      	mov	r0, r9
 8005a58:	f000 f842 	bl	8005ae0 <__malloc_unlock>
 8005a5c:	e62d      	b.n	80056ba <_malloc_r+0x1a>
 8005a5e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005a62:	3e0c      	subs	r6, #12
 8005a64:	f026 0607 	bic.w	r6, r6, #7
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	4333      	orrs	r3, r6
 8005a6e:	f8cb 3004 	str.w	r3, [fp, #4]
 8005a72:	eb0b 0306 	add.w	r3, fp, r6
 8005a76:	2205      	movs	r2, #5
 8005a78:	2e0f      	cmp	r6, #15
 8005a7a:	605a      	str	r2, [r3, #4]
 8005a7c:	609a      	str	r2, [r3, #8]
 8005a7e:	d9a0      	bls.n	80059c2 <_malloc_r+0x322>
 8005a80:	f10b 0108 	add.w	r1, fp, #8
 8005a84:	4648      	mov	r0, r9
 8005a86:	f000 fc0f 	bl	80062a8 <_free_r>
 8005a8a:	e79a      	b.n	80059c2 <_malloc_r+0x322>
 8005a8c:	68ae      	ldr	r6, [r5, #8]
 8005a8e:	f044 0201 	orr.w	r2, r4, #1
 8005a92:	4434      	add	r4, r6
 8005a94:	f043 0301 	orr.w	r3, r3, #1
 8005a98:	6072      	str	r2, [r6, #4]
 8005a9a:	60ac      	str	r4, [r5, #8]
 8005a9c:	6063      	str	r3, [r4, #4]
 8005a9e:	e631      	b.n	8005704 <_malloc_r+0x64>
 8005aa0:	200006c0 	.word	0x200006c0
 8005aa4:	20000500 	.word	0x20000500
 8005aa8:	00000080 	.word	0x00000080
 8005aac:	20000690 	.word	0x20000690
 8005ab0:	0000007f 	.word	0x0000007f
 8005ab4:	200006b8 	.word	0x200006b8
 8005ab8:	200006bc 	.word	0x200006bc

08005abc <memcpy>:
 8005abc:	b510      	push	{r4, lr}
 8005abe:	1e43      	subs	r3, r0, #1
 8005ac0:	440a      	add	r2, r1
 8005ac2:	4291      	cmp	r1, r2
 8005ac4:	d100      	bne.n	8005ac8 <memcpy+0xc>
 8005ac6:	bd10      	pop	{r4, pc}
 8005ac8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005acc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ad0:	e7f7      	b.n	8005ac2 <memcpy+0x6>
	...

08005ad4 <__malloc_lock>:
 8005ad4:	4801      	ldr	r0, [pc, #4]	; (8005adc <__malloc_lock+0x8>)
 8005ad6:	f000 bca3 	b.w	8006420 <__retarget_lock_acquire_recursive>
 8005ada:	bf00      	nop
 8005adc:	200007d4 	.word	0x200007d4

08005ae0 <__malloc_unlock>:
 8005ae0:	4801      	ldr	r0, [pc, #4]	; (8005ae8 <__malloc_unlock+0x8>)
 8005ae2:	f000 bc9e 	b.w	8006422 <__retarget_lock_release_recursive>
 8005ae6:	bf00      	nop
 8005ae8:	200007d4 	.word	0x200007d4

08005aec <_Balloc>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005af0:	4604      	mov	r4, r0
 8005af2:	460e      	mov	r6, r1
 8005af4:	b93d      	cbnz	r5, 8005b06 <_Balloc+0x1a>
 8005af6:	2010      	movs	r0, #16
 8005af8:	f7ff fdca 	bl	8005690 <malloc>
 8005afc:	6260      	str	r0, [r4, #36]	; 0x24
 8005afe:	6045      	str	r5, [r0, #4]
 8005b00:	6085      	str	r5, [r0, #8]
 8005b02:	6005      	str	r5, [r0, #0]
 8005b04:	60c5      	str	r5, [r0, #12]
 8005b06:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b08:	68eb      	ldr	r3, [r5, #12]
 8005b0a:	b183      	cbz	r3, 8005b2e <_Balloc+0x42>
 8005b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005b14:	b9b8      	cbnz	r0, 8005b46 <_Balloc+0x5a>
 8005b16:	2101      	movs	r1, #1
 8005b18:	fa01 f506 	lsl.w	r5, r1, r6
 8005b1c:	1d6a      	adds	r2, r5, #5
 8005b1e:	0092      	lsls	r2, r2, #2
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 fb3d 	bl	80061a0 <_calloc_r>
 8005b26:	b160      	cbz	r0, 8005b42 <_Balloc+0x56>
 8005b28:	6046      	str	r6, [r0, #4]
 8005b2a:	6085      	str	r5, [r0, #8]
 8005b2c:	e00e      	b.n	8005b4c <_Balloc+0x60>
 8005b2e:	2221      	movs	r2, #33	; 0x21
 8005b30:	2104      	movs	r1, #4
 8005b32:	4620      	mov	r0, r4
 8005b34:	f000 fb34 	bl	80061a0 <_calloc_r>
 8005b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b3a:	60e8      	str	r0, [r5, #12]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e4      	bne.n	8005b0c <_Balloc+0x20>
 8005b42:	2000      	movs	r0, #0
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
 8005b46:	6802      	ldr	r2, [r0, #0]
 8005b48:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	6103      	str	r3, [r0, #16]
 8005b50:	60c3      	str	r3, [r0, #12]
 8005b52:	bd70      	pop	{r4, r5, r6, pc}

08005b54 <_Bfree>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005b58:	4606      	mov	r6, r0
 8005b5a:	460d      	mov	r5, r1
 8005b5c:	b93c      	cbnz	r4, 8005b6e <_Bfree+0x1a>
 8005b5e:	2010      	movs	r0, #16
 8005b60:	f7ff fd96 	bl	8005690 <malloc>
 8005b64:	6270      	str	r0, [r6, #36]	; 0x24
 8005b66:	6044      	str	r4, [r0, #4]
 8005b68:	6084      	str	r4, [r0, #8]
 8005b6a:	6004      	str	r4, [r0, #0]
 8005b6c:	60c4      	str	r4, [r0, #12]
 8005b6e:	b13d      	cbz	r5, 8005b80 <_Bfree+0x2c>
 8005b70:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005b72:	686a      	ldr	r2, [r5, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b7a:	6029      	str	r1, [r5, #0]
 8005b7c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005b80:	bd70      	pop	{r4, r5, r6, pc}

08005b82 <__multadd>:
 8005b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b86:	690d      	ldr	r5, [r1, #16]
 8005b88:	461f      	mov	r7, r3
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	f101 0e14 	add.w	lr, r1, #20
 8005b92:	2300      	movs	r3, #0
 8005b94:	f8de 0000 	ldr.w	r0, [lr]
 8005b98:	b281      	uxth	r1, r0
 8005b9a:	fb02 7101 	mla	r1, r2, r1, r7
 8005b9e:	0c0f      	lsrs	r7, r1, #16
 8005ba0:	0c00      	lsrs	r0, r0, #16
 8005ba2:	fb02 7000 	mla	r0, r2, r0, r7
 8005ba6:	b289      	uxth	r1, r1
 8005ba8:	3301      	adds	r3, #1
 8005baa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005bae:	429d      	cmp	r5, r3
 8005bb0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005bb4:	f84e 1b04 	str.w	r1, [lr], #4
 8005bb8:	dcec      	bgt.n	8005b94 <__multadd+0x12>
 8005bba:	b1d7      	cbz	r7, 8005bf2 <__multadd+0x70>
 8005bbc:	68a3      	ldr	r3, [r4, #8]
 8005bbe:	429d      	cmp	r5, r3
 8005bc0:	db12      	blt.n	8005be8 <__multadd+0x66>
 8005bc2:	6861      	ldr	r1, [r4, #4]
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	3101      	adds	r1, #1
 8005bc8:	f7ff ff90 	bl	8005aec <_Balloc>
 8005bcc:	6922      	ldr	r2, [r4, #16]
 8005bce:	3202      	adds	r2, #2
 8005bd0:	f104 010c 	add.w	r1, r4, #12
 8005bd4:	4680      	mov	r8, r0
 8005bd6:	0092      	lsls	r2, r2, #2
 8005bd8:	300c      	adds	r0, #12
 8005bda:	f7ff ff6f 	bl	8005abc <memcpy>
 8005bde:	4621      	mov	r1, r4
 8005be0:	4630      	mov	r0, r6
 8005be2:	f7ff ffb7 	bl	8005b54 <_Bfree>
 8005be6:	4644      	mov	r4, r8
 8005be8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bec:	3501      	adds	r5, #1
 8005bee:	615f      	str	r7, [r3, #20]
 8005bf0:	6125      	str	r5, [r4, #16]
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005bf8 <__hi0bits>:
 8005bf8:	0c02      	lsrs	r2, r0, #16
 8005bfa:	0412      	lsls	r2, r2, #16
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	b9b2      	cbnz	r2, 8005c2e <__hi0bits+0x36>
 8005c00:	0403      	lsls	r3, r0, #16
 8005c02:	2010      	movs	r0, #16
 8005c04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c08:	bf04      	itt	eq
 8005c0a:	021b      	lsleq	r3, r3, #8
 8005c0c:	3008      	addeq	r0, #8
 8005c0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c12:	bf04      	itt	eq
 8005c14:	011b      	lsleq	r3, r3, #4
 8005c16:	3004      	addeq	r0, #4
 8005c18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c1c:	bf04      	itt	eq
 8005c1e:	009b      	lsleq	r3, r3, #2
 8005c20:	3002      	addeq	r0, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	db06      	blt.n	8005c34 <__hi0bits+0x3c>
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	d503      	bpl.n	8005c32 <__hi0bits+0x3a>
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	4770      	bx	lr
 8005c2e:	2000      	movs	r0, #0
 8005c30:	e7e8      	b.n	8005c04 <__hi0bits+0xc>
 8005c32:	2020      	movs	r0, #32
 8005c34:	4770      	bx	lr

08005c36 <__lo0bits>:
 8005c36:	6803      	ldr	r3, [r0, #0]
 8005c38:	f013 0207 	ands.w	r2, r3, #7
 8005c3c:	4601      	mov	r1, r0
 8005c3e:	d00b      	beq.n	8005c58 <__lo0bits+0x22>
 8005c40:	07da      	lsls	r2, r3, #31
 8005c42:	d423      	bmi.n	8005c8c <__lo0bits+0x56>
 8005c44:	0798      	lsls	r0, r3, #30
 8005c46:	bf49      	itett	mi
 8005c48:	085b      	lsrmi	r3, r3, #1
 8005c4a:	089b      	lsrpl	r3, r3, #2
 8005c4c:	2001      	movmi	r0, #1
 8005c4e:	600b      	strmi	r3, [r1, #0]
 8005c50:	bf5c      	itt	pl
 8005c52:	600b      	strpl	r3, [r1, #0]
 8005c54:	2002      	movpl	r0, #2
 8005c56:	4770      	bx	lr
 8005c58:	b298      	uxth	r0, r3
 8005c5a:	b9a8      	cbnz	r0, 8005c88 <__lo0bits+0x52>
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	2010      	movs	r0, #16
 8005c60:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c64:	bf04      	itt	eq
 8005c66:	0a1b      	lsreq	r3, r3, #8
 8005c68:	3008      	addeq	r0, #8
 8005c6a:	071a      	lsls	r2, r3, #28
 8005c6c:	bf04      	itt	eq
 8005c6e:	091b      	lsreq	r3, r3, #4
 8005c70:	3004      	addeq	r0, #4
 8005c72:	079a      	lsls	r2, r3, #30
 8005c74:	bf04      	itt	eq
 8005c76:	089b      	lsreq	r3, r3, #2
 8005c78:	3002      	addeq	r0, #2
 8005c7a:	07da      	lsls	r2, r3, #31
 8005c7c:	d402      	bmi.n	8005c84 <__lo0bits+0x4e>
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	d006      	beq.n	8005c90 <__lo0bits+0x5a>
 8005c82:	3001      	adds	r0, #1
 8005c84:	600b      	str	r3, [r1, #0]
 8005c86:	4770      	bx	lr
 8005c88:	4610      	mov	r0, r2
 8005c8a:	e7e9      	b.n	8005c60 <__lo0bits+0x2a>
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	4770      	bx	lr
 8005c90:	2020      	movs	r0, #32
 8005c92:	4770      	bx	lr

08005c94 <__i2b>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	460c      	mov	r4, r1
 8005c98:	2101      	movs	r1, #1
 8005c9a:	f7ff ff27 	bl	8005aec <_Balloc>
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	6144      	str	r4, [r0, #20]
 8005ca2:	6102      	str	r2, [r0, #16]
 8005ca4:	bd10      	pop	{r4, pc}

08005ca6 <__multiply>:
 8005ca6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005caa:	4614      	mov	r4, r2
 8005cac:	690a      	ldr	r2, [r1, #16]
 8005cae:	6923      	ldr	r3, [r4, #16]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	bfb8      	it	lt
 8005cb4:	460b      	movlt	r3, r1
 8005cb6:	4689      	mov	r9, r1
 8005cb8:	bfbc      	itt	lt
 8005cba:	46a1      	movlt	r9, r4
 8005cbc:	461c      	movlt	r4, r3
 8005cbe:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005cc2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005cc6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005cca:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005cce:	eb07 060a 	add.w	r6, r7, sl
 8005cd2:	429e      	cmp	r6, r3
 8005cd4:	bfc8      	it	gt
 8005cd6:	3101      	addgt	r1, #1
 8005cd8:	f7ff ff08 	bl	8005aec <_Balloc>
 8005cdc:	f100 0514 	add.w	r5, r0, #20
 8005ce0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	4543      	cmp	r3, r8
 8005cea:	d316      	bcc.n	8005d1a <__multiply+0x74>
 8005cec:	f104 0214 	add.w	r2, r4, #20
 8005cf0:	f109 0114 	add.w	r1, r9, #20
 8005cf4:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8005cf8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	9c01      	ldr	r4, [sp, #4]
 8005d00:	4294      	cmp	r4, r2
 8005d02:	4613      	mov	r3, r2
 8005d04:	d80c      	bhi.n	8005d20 <__multiply+0x7a>
 8005d06:	2e00      	cmp	r6, #0
 8005d08:	dd03      	ble.n	8005d12 <__multiply+0x6c>
 8005d0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d054      	beq.n	8005dbc <__multiply+0x116>
 8005d12:	6106      	str	r6, [r0, #16]
 8005d14:	b003      	add	sp, #12
 8005d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1a:	f843 2b04 	str.w	r2, [r3], #4
 8005d1e:	e7e3      	b.n	8005ce8 <__multiply+0x42>
 8005d20:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d24:	3204      	adds	r2, #4
 8005d26:	f1ba 0f00 	cmp.w	sl, #0
 8005d2a:	d020      	beq.n	8005d6e <__multiply+0xc8>
 8005d2c:	46ae      	mov	lr, r5
 8005d2e:	4689      	mov	r9, r1
 8005d30:	f04f 0c00 	mov.w	ip, #0
 8005d34:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d38:	f8be b000 	ldrh.w	fp, [lr]
 8005d3c:	b2a3      	uxth	r3, r4
 8005d3e:	fb0a b303 	mla	r3, sl, r3, fp
 8005d42:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005d46:	f8de 4000 	ldr.w	r4, [lr]
 8005d4a:	4463      	add	r3, ip
 8005d4c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005d50:	fb0a c40b 	mla	r4, sl, fp, ip
 8005d54:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d5e:	454f      	cmp	r7, r9
 8005d60:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005d64:	f84e 3b04 	str.w	r3, [lr], #4
 8005d68:	d8e4      	bhi.n	8005d34 <__multiply+0x8e>
 8005d6a:	f8ce c000 	str.w	ip, [lr]
 8005d6e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005d72:	f1b9 0f00 	cmp.w	r9, #0
 8005d76:	d01f      	beq.n	8005db8 <__multiply+0x112>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	46ae      	mov	lr, r5
 8005d7c:	468c      	mov	ip, r1
 8005d7e:	f04f 0a00 	mov.w	sl, #0
 8005d82:	f8bc 4000 	ldrh.w	r4, [ip]
 8005d86:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005d8a:	fb09 b404 	mla	r4, r9, r4, fp
 8005d8e:	44a2      	add	sl, r4
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005d96:	f84e 3b04 	str.w	r3, [lr], #4
 8005d9a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d9e:	f8be 4000 	ldrh.w	r4, [lr]
 8005da2:	0c1b      	lsrs	r3, r3, #16
 8005da4:	fb09 4303 	mla	r3, r9, r3, r4
 8005da8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8005dac:	4567      	cmp	r7, ip
 8005dae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005db2:	d8e6      	bhi.n	8005d82 <__multiply+0xdc>
 8005db4:	f8ce 3000 	str.w	r3, [lr]
 8005db8:	3504      	adds	r5, #4
 8005dba:	e7a0      	b.n	8005cfe <__multiply+0x58>
 8005dbc:	3e01      	subs	r6, #1
 8005dbe:	e7a2      	b.n	8005d06 <__multiply+0x60>

08005dc0 <__pow5mult>:
 8005dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc4:	4615      	mov	r5, r2
 8005dc6:	f012 0203 	ands.w	r2, r2, #3
 8005dca:	4606      	mov	r6, r0
 8005dcc:	460f      	mov	r7, r1
 8005dce:	d007      	beq.n	8005de0 <__pow5mult+0x20>
 8005dd0:	3a01      	subs	r2, #1
 8005dd2:	4c21      	ldr	r4, [pc, #132]	; (8005e58 <__pow5mult+0x98>)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dda:	f7ff fed2 	bl	8005b82 <__multadd>
 8005dde:	4607      	mov	r7, r0
 8005de0:	10ad      	asrs	r5, r5, #2
 8005de2:	d035      	beq.n	8005e50 <__pow5mult+0x90>
 8005de4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005de6:	b93c      	cbnz	r4, 8005df8 <__pow5mult+0x38>
 8005de8:	2010      	movs	r0, #16
 8005dea:	f7ff fc51 	bl	8005690 <malloc>
 8005dee:	6270      	str	r0, [r6, #36]	; 0x24
 8005df0:	6044      	str	r4, [r0, #4]
 8005df2:	6084      	str	r4, [r0, #8]
 8005df4:	6004      	str	r4, [r0, #0]
 8005df6:	60c4      	str	r4, [r0, #12]
 8005df8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005dfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e00:	b94c      	cbnz	r4, 8005e16 <__pow5mult+0x56>
 8005e02:	f240 2171 	movw	r1, #625	; 0x271
 8005e06:	4630      	mov	r0, r6
 8005e08:	f7ff ff44 	bl	8005c94 <__i2b>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e12:	4604      	mov	r4, r0
 8005e14:	6003      	str	r3, [r0, #0]
 8005e16:	f04f 0800 	mov.w	r8, #0
 8005e1a:	07eb      	lsls	r3, r5, #31
 8005e1c:	d50a      	bpl.n	8005e34 <__pow5mult+0x74>
 8005e1e:	4639      	mov	r1, r7
 8005e20:	4622      	mov	r2, r4
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7ff ff3f 	bl	8005ca6 <__multiply>
 8005e28:	4639      	mov	r1, r7
 8005e2a:	4681      	mov	r9, r0
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f7ff fe91 	bl	8005b54 <_Bfree>
 8005e32:	464f      	mov	r7, r9
 8005e34:	106d      	asrs	r5, r5, #1
 8005e36:	d00b      	beq.n	8005e50 <__pow5mult+0x90>
 8005e38:	6820      	ldr	r0, [r4, #0]
 8005e3a:	b938      	cbnz	r0, 8005e4c <__pow5mult+0x8c>
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4630      	mov	r0, r6
 8005e42:	f7ff ff30 	bl	8005ca6 <__multiply>
 8005e46:	6020      	str	r0, [r4, #0]
 8005e48:	f8c0 8000 	str.w	r8, [r0]
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	e7e4      	b.n	8005e1a <__pow5mult+0x5a>
 8005e50:	4638      	mov	r0, r7
 8005e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e56:	bf00      	nop
 8005e58:	08006a18 	.word	0x08006a18

08005e5c <__lshift>:
 8005e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e60:	460c      	mov	r4, r1
 8005e62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e66:	6923      	ldr	r3, [r4, #16]
 8005e68:	6849      	ldr	r1, [r1, #4]
 8005e6a:	eb0a 0903 	add.w	r9, sl, r3
 8005e6e:	68a3      	ldr	r3, [r4, #8]
 8005e70:	4607      	mov	r7, r0
 8005e72:	4616      	mov	r6, r2
 8005e74:	f109 0501 	add.w	r5, r9, #1
 8005e78:	42ab      	cmp	r3, r5
 8005e7a:	db31      	blt.n	8005ee0 <__lshift+0x84>
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	f7ff fe35 	bl	8005aec <_Balloc>
 8005e82:	2200      	movs	r2, #0
 8005e84:	4680      	mov	r8, r0
 8005e86:	f100 0314 	add.w	r3, r0, #20
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	4552      	cmp	r2, sl
 8005e8e:	db2a      	blt.n	8005ee6 <__lshift+0x8a>
 8005e90:	6920      	ldr	r0, [r4, #16]
 8005e92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e96:	f104 0114 	add.w	r1, r4, #20
 8005e9a:	f016 021f 	ands.w	r2, r6, #31
 8005e9e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005ea2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8005ea6:	d022      	beq.n	8005eee <__lshift+0x92>
 8005ea8:	f1c2 0c20 	rsb	ip, r2, #32
 8005eac:	2000      	movs	r0, #0
 8005eae:	680e      	ldr	r6, [r1, #0]
 8005eb0:	4096      	lsls	r6, r2
 8005eb2:	4330      	orrs	r0, r6
 8005eb4:	f843 0b04 	str.w	r0, [r3], #4
 8005eb8:	f851 0b04 	ldr.w	r0, [r1], #4
 8005ebc:	458e      	cmp	lr, r1
 8005ebe:	fa20 f00c 	lsr.w	r0, r0, ip
 8005ec2:	d8f4      	bhi.n	8005eae <__lshift+0x52>
 8005ec4:	6018      	str	r0, [r3, #0]
 8005ec6:	b108      	cbz	r0, 8005ecc <__lshift+0x70>
 8005ec8:	f109 0502 	add.w	r5, r9, #2
 8005ecc:	3d01      	subs	r5, #1
 8005ece:	4638      	mov	r0, r7
 8005ed0:	f8c8 5010 	str.w	r5, [r8, #16]
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	f7ff fe3d 	bl	8005b54 <_Bfree>
 8005eda:	4640      	mov	r0, r8
 8005edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee0:	3101      	adds	r1, #1
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	e7c8      	b.n	8005e78 <__lshift+0x1c>
 8005ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005eea:	3201      	adds	r2, #1
 8005eec:	e7ce      	b.n	8005e8c <__lshift+0x30>
 8005eee:	3b04      	subs	r3, #4
 8005ef0:	f851 2b04 	ldr.w	r2, [r1], #4
 8005ef4:	f843 2f04 	str.w	r2, [r3, #4]!
 8005ef8:	458e      	cmp	lr, r1
 8005efa:	d8f9      	bhi.n	8005ef0 <__lshift+0x94>
 8005efc:	e7e6      	b.n	8005ecc <__lshift+0x70>

08005efe <__mcmp>:
 8005efe:	6903      	ldr	r3, [r0, #16]
 8005f00:	690a      	ldr	r2, [r1, #16]
 8005f02:	1a9b      	subs	r3, r3, r2
 8005f04:	b530      	push	{r4, r5, lr}
 8005f06:	d10c      	bne.n	8005f22 <__mcmp+0x24>
 8005f08:	0092      	lsls	r2, r2, #2
 8005f0a:	3014      	adds	r0, #20
 8005f0c:	3114      	adds	r1, #20
 8005f0e:	1884      	adds	r4, r0, r2
 8005f10:	4411      	add	r1, r2
 8005f12:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f16:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f1a:	4295      	cmp	r5, r2
 8005f1c:	d003      	beq.n	8005f26 <__mcmp+0x28>
 8005f1e:	d305      	bcc.n	8005f2c <__mcmp+0x2e>
 8005f20:	2301      	movs	r3, #1
 8005f22:	4618      	mov	r0, r3
 8005f24:	bd30      	pop	{r4, r5, pc}
 8005f26:	42a0      	cmp	r0, r4
 8005f28:	d3f3      	bcc.n	8005f12 <__mcmp+0x14>
 8005f2a:	e7fa      	b.n	8005f22 <__mcmp+0x24>
 8005f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f30:	e7f7      	b.n	8005f22 <__mcmp+0x24>

08005f32 <__mdiff>:
 8005f32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f36:	460d      	mov	r5, r1
 8005f38:	4607      	mov	r7, r0
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	4614      	mov	r4, r2
 8005f40:	f7ff ffdd 	bl	8005efe <__mcmp>
 8005f44:	1e06      	subs	r6, r0, #0
 8005f46:	d108      	bne.n	8005f5a <__mdiff+0x28>
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	f7ff fdce 	bl	8005aec <_Balloc>
 8005f50:	2301      	movs	r3, #1
 8005f52:	6103      	str	r3, [r0, #16]
 8005f54:	6146      	str	r6, [r0, #20]
 8005f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5a:	bfa4      	itt	ge
 8005f5c:	4623      	movge	r3, r4
 8005f5e:	462c      	movge	r4, r5
 8005f60:	4638      	mov	r0, r7
 8005f62:	6861      	ldr	r1, [r4, #4]
 8005f64:	bfa6      	itte	ge
 8005f66:	461d      	movge	r5, r3
 8005f68:	2600      	movge	r6, #0
 8005f6a:	2601      	movlt	r6, #1
 8005f6c:	f7ff fdbe 	bl	8005aec <_Balloc>
 8005f70:	692b      	ldr	r3, [r5, #16]
 8005f72:	60c6      	str	r6, [r0, #12]
 8005f74:	6926      	ldr	r6, [r4, #16]
 8005f76:	f105 0914 	add.w	r9, r5, #20
 8005f7a:	f104 0214 	add.w	r2, r4, #20
 8005f7e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005f82:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005f86:	f100 0514 	add.w	r5, r0, #20
 8005f8a:	f04f 0c00 	mov.w	ip, #0
 8005f8e:	f852 ab04 	ldr.w	sl, [r2], #4
 8005f92:	f859 4b04 	ldr.w	r4, [r9], #4
 8005f96:	fa1c f18a 	uxtah	r1, ip, sl
 8005f9a:	b2a3      	uxth	r3, r4
 8005f9c:	1ac9      	subs	r1, r1, r3
 8005f9e:	0c23      	lsrs	r3, r4, #16
 8005fa0:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005fa4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005fa8:	b289      	uxth	r1, r1
 8005faa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005fae:	45c8      	cmp	r8, r9
 8005fb0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005fb4:	4696      	mov	lr, r2
 8005fb6:	f845 3b04 	str.w	r3, [r5], #4
 8005fba:	d8e8      	bhi.n	8005f8e <__mdiff+0x5c>
 8005fbc:	45be      	cmp	lr, r7
 8005fbe:	d305      	bcc.n	8005fcc <__mdiff+0x9a>
 8005fc0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005fc4:	b18b      	cbz	r3, 8005fea <__mdiff+0xb8>
 8005fc6:	6106      	str	r6, [r0, #16]
 8005fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fcc:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005fd0:	fa1c f381 	uxtah	r3, ip, r1
 8005fd4:	141a      	asrs	r2, r3, #16
 8005fd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fe0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fe4:	f845 3b04 	str.w	r3, [r5], #4
 8005fe8:	e7e8      	b.n	8005fbc <__mdiff+0x8a>
 8005fea:	3e01      	subs	r6, #1
 8005fec:	e7e8      	b.n	8005fc0 <__mdiff+0x8e>

08005fee <__d2b>:
 8005fee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ff2:	460e      	mov	r6, r1
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	ec59 8b10 	vmov	r8, r9, d0
 8005ffa:	4615      	mov	r5, r2
 8005ffc:	f7ff fd76 	bl	8005aec <_Balloc>
 8006000:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006004:	4607      	mov	r7, r0
 8006006:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800600a:	bb34      	cbnz	r4, 800605a <__d2b+0x6c>
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	f1b8 0f00 	cmp.w	r8, #0
 8006012:	d027      	beq.n	8006064 <__d2b+0x76>
 8006014:	a802      	add	r0, sp, #8
 8006016:	f840 8d08 	str.w	r8, [r0, #-8]!
 800601a:	f7ff fe0c 	bl	8005c36 <__lo0bits>
 800601e:	9900      	ldr	r1, [sp, #0]
 8006020:	b1f0      	cbz	r0, 8006060 <__d2b+0x72>
 8006022:	9a01      	ldr	r2, [sp, #4]
 8006024:	f1c0 0320 	rsb	r3, r0, #32
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	430b      	orrs	r3, r1
 800602e:	40c2      	lsrs	r2, r0
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	9201      	str	r2, [sp, #4]
 8006034:	9b01      	ldr	r3, [sp, #4]
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	bf14      	ite	ne
 800603c:	2102      	movne	r1, #2
 800603e:	2101      	moveq	r1, #1
 8006040:	6139      	str	r1, [r7, #16]
 8006042:	b1c4      	cbz	r4, 8006076 <__d2b+0x88>
 8006044:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006048:	4404      	add	r4, r0
 800604a:	6034      	str	r4, [r6, #0]
 800604c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006050:	6028      	str	r0, [r5, #0]
 8006052:	4638      	mov	r0, r7
 8006054:	b003      	add	sp, #12
 8006056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800605a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800605e:	e7d5      	b.n	800600c <__d2b+0x1e>
 8006060:	6179      	str	r1, [r7, #20]
 8006062:	e7e7      	b.n	8006034 <__d2b+0x46>
 8006064:	a801      	add	r0, sp, #4
 8006066:	f7ff fde6 	bl	8005c36 <__lo0bits>
 800606a:	9b01      	ldr	r3, [sp, #4]
 800606c:	617b      	str	r3, [r7, #20]
 800606e:	2101      	movs	r1, #1
 8006070:	6139      	str	r1, [r7, #16]
 8006072:	3020      	adds	r0, #32
 8006074:	e7e5      	b.n	8006042 <__d2b+0x54>
 8006076:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800607a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800607e:	6030      	str	r0, [r6, #0]
 8006080:	6918      	ldr	r0, [r3, #16]
 8006082:	f7ff fdb9 	bl	8005bf8 <__hi0bits>
 8006086:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800608a:	e7e1      	b.n	8006050 <__d2b+0x62>

0800608c <_sbrk_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4c06      	ldr	r4, [pc, #24]	; (80060a8 <_sbrk_r+0x1c>)
 8006090:	2300      	movs	r3, #0
 8006092:	4605      	mov	r5, r0
 8006094:	4608      	mov	r0, r1
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	f000 fb86 	bl	80067a8 <_sbrk>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_sbrk_r+0x1a>
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_sbrk_r+0x1a>
 80060a4:	602b      	str	r3, [r5, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	200007dc 	.word	0x200007dc

080060ac <__ssprint_r>:
 80060ac:	6893      	ldr	r3, [r2, #8]
 80060ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b2:	4681      	mov	r9, r0
 80060b4:	460c      	mov	r4, r1
 80060b6:	4617      	mov	r7, r2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d060      	beq.n	800617e <__ssprint_r+0xd2>
 80060bc:	f04f 0b00 	mov.w	fp, #0
 80060c0:	f8d2 a000 	ldr.w	sl, [r2]
 80060c4:	465e      	mov	r6, fp
 80060c6:	b356      	cbz	r6, 800611e <__ssprint_r+0x72>
 80060c8:	68a3      	ldr	r3, [r4, #8]
 80060ca:	429e      	cmp	r6, r3
 80060cc:	d344      	bcc.n	8006158 <__ssprint_r+0xac>
 80060ce:	89a2      	ldrh	r2, [r4, #12]
 80060d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060d4:	d03e      	beq.n	8006154 <__ssprint_r+0xa8>
 80060d6:	6825      	ldr	r5, [r4, #0]
 80060d8:	6921      	ldr	r1, [r4, #16]
 80060da:	eba5 0801 	sub.w	r8, r5, r1
 80060de:	6965      	ldr	r5, [r4, #20]
 80060e0:	2302      	movs	r3, #2
 80060e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060e6:	fb95 f5f3 	sdiv	r5, r5, r3
 80060ea:	f108 0301 	add.w	r3, r8, #1
 80060ee:	4433      	add	r3, r6
 80060f0:	429d      	cmp	r5, r3
 80060f2:	bf38      	it	cc
 80060f4:	461d      	movcc	r5, r3
 80060f6:	0553      	lsls	r3, r2, #21
 80060f8:	d546      	bpl.n	8006188 <__ssprint_r+0xdc>
 80060fa:	4629      	mov	r1, r5
 80060fc:	4648      	mov	r0, r9
 80060fe:	f7ff facf 	bl	80056a0 <_malloc_r>
 8006102:	b998      	cbnz	r0, 800612c <__ssprint_r+0x80>
 8006104:	230c      	movs	r3, #12
 8006106:	f8c9 3000 	str.w	r3, [r9]
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006110:	81a3      	strh	r3, [r4, #12]
 8006112:	2300      	movs	r3, #0
 8006114:	60bb      	str	r3, [r7, #8]
 8006116:	607b      	str	r3, [r7, #4]
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	e031      	b.n	8006182 <__ssprint_r+0xd6>
 800611e:	f8da b000 	ldr.w	fp, [sl]
 8006122:	f8da 6004 	ldr.w	r6, [sl, #4]
 8006126:	f10a 0a08 	add.w	sl, sl, #8
 800612a:	e7cc      	b.n	80060c6 <__ssprint_r+0x1a>
 800612c:	4642      	mov	r2, r8
 800612e:	6921      	ldr	r1, [r4, #16]
 8006130:	9001      	str	r0, [sp, #4]
 8006132:	f7ff fcc3 	bl	8005abc <memcpy>
 8006136:	89a2      	ldrh	r2, [r4, #12]
 8006138:	9b01      	ldr	r3, [sp, #4]
 800613a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800613e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006142:	81a2      	strh	r2, [r4, #12]
 8006144:	6123      	str	r3, [r4, #16]
 8006146:	6165      	str	r5, [r4, #20]
 8006148:	4443      	add	r3, r8
 800614a:	eba5 0508 	sub.w	r5, r5, r8
 800614e:	6023      	str	r3, [r4, #0]
 8006150:	60a5      	str	r5, [r4, #8]
 8006152:	4633      	mov	r3, r6
 8006154:	429e      	cmp	r6, r3
 8006156:	d200      	bcs.n	800615a <__ssprint_r+0xae>
 8006158:	4633      	mov	r3, r6
 800615a:	461a      	mov	r2, r3
 800615c:	4659      	mov	r1, fp
 800615e:	6820      	ldr	r0, [r4, #0]
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	f000 f971 	bl	8006448 <memmove>
 8006166:	68a2      	ldr	r2, [r4, #8]
 8006168:	9b01      	ldr	r3, [sp, #4]
 800616a:	1ad2      	subs	r2, r2, r3
 800616c:	60a2      	str	r2, [r4, #8]
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	4413      	add	r3, r2
 8006172:	6023      	str	r3, [r4, #0]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	1b9e      	subs	r6, r3, r6
 8006178:	60be      	str	r6, [r7, #8]
 800617a:	2e00      	cmp	r6, #0
 800617c:	d1cf      	bne.n	800611e <__ssprint_r+0x72>
 800617e:	2000      	movs	r0, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	b003      	add	sp, #12
 8006184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006188:	462a      	mov	r2, r5
 800618a:	4648      	mov	r0, r9
 800618c:	f000 f97e 	bl	800648c <_realloc_r>
 8006190:	4603      	mov	r3, r0
 8006192:	2800      	cmp	r0, #0
 8006194:	d1d6      	bne.n	8006144 <__ssprint_r+0x98>
 8006196:	6921      	ldr	r1, [r4, #16]
 8006198:	4648      	mov	r0, r9
 800619a:	f000 f885 	bl	80062a8 <_free_r>
 800619e:	e7b1      	b.n	8006104 <__ssprint_r+0x58>

080061a0 <_calloc_r>:
 80061a0:	b510      	push	{r4, lr}
 80061a2:	4351      	muls	r1, r2
 80061a4:	f7ff fa7c 	bl	80056a0 <_malloc_r>
 80061a8:	4604      	mov	r4, r0
 80061aa:	b198      	cbz	r0, 80061d4 <_calloc_r+0x34>
 80061ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80061b0:	f022 0203 	bic.w	r2, r2, #3
 80061b4:	3a04      	subs	r2, #4
 80061b6:	2a24      	cmp	r2, #36	; 0x24
 80061b8:	d81b      	bhi.n	80061f2 <_calloc_r+0x52>
 80061ba:	2a13      	cmp	r2, #19
 80061bc:	d917      	bls.n	80061ee <_calloc_r+0x4e>
 80061be:	2100      	movs	r1, #0
 80061c0:	2a1b      	cmp	r2, #27
 80061c2:	6001      	str	r1, [r0, #0]
 80061c4:	6041      	str	r1, [r0, #4]
 80061c6:	d807      	bhi.n	80061d8 <_calloc_r+0x38>
 80061c8:	f100 0308 	add.w	r3, r0, #8
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	609a      	str	r2, [r3, #8]
 80061d4:	4620      	mov	r0, r4
 80061d6:	bd10      	pop	{r4, pc}
 80061d8:	2a24      	cmp	r2, #36	; 0x24
 80061da:	6081      	str	r1, [r0, #8]
 80061dc:	60c1      	str	r1, [r0, #12]
 80061de:	bf11      	iteee	ne
 80061e0:	f100 0310 	addne.w	r3, r0, #16
 80061e4:	6101      	streq	r1, [r0, #16]
 80061e6:	f100 0318 	addeq.w	r3, r0, #24
 80061ea:	6141      	streq	r1, [r0, #20]
 80061ec:	e7ee      	b.n	80061cc <_calloc_r+0x2c>
 80061ee:	4603      	mov	r3, r0
 80061f0:	e7ec      	b.n	80061cc <_calloc_r+0x2c>
 80061f2:	2100      	movs	r1, #0
 80061f4:	f000 f942 	bl	800647c <memset>
 80061f8:	e7ec      	b.n	80061d4 <_calloc_r+0x34>
	...

080061fc <_malloc_trim_r>:
 80061fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006200:	4f25      	ldr	r7, [pc, #148]	; (8006298 <_malloc_trim_r+0x9c>)
 8006202:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80062a4 <_malloc_trim_r+0xa8>
 8006206:	4689      	mov	r9, r1
 8006208:	4606      	mov	r6, r0
 800620a:	f7ff fc63 	bl	8005ad4 <__malloc_lock>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	685d      	ldr	r5, [r3, #4]
 8006212:	f1a8 0411 	sub.w	r4, r8, #17
 8006216:	f025 0503 	bic.w	r5, r5, #3
 800621a:	eba4 0409 	sub.w	r4, r4, r9
 800621e:	442c      	add	r4, r5
 8006220:	fbb4 f4f8 	udiv	r4, r4, r8
 8006224:	3c01      	subs	r4, #1
 8006226:	fb08 f404 	mul.w	r4, r8, r4
 800622a:	4544      	cmp	r4, r8
 800622c:	da05      	bge.n	800623a <_malloc_trim_r+0x3e>
 800622e:	4630      	mov	r0, r6
 8006230:	f7ff fc56 	bl	8005ae0 <__malloc_unlock>
 8006234:	2000      	movs	r0, #0
 8006236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800623a:	2100      	movs	r1, #0
 800623c:	4630      	mov	r0, r6
 800623e:	f7ff ff25 	bl	800608c <_sbrk_r>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	442b      	add	r3, r5
 8006246:	4298      	cmp	r0, r3
 8006248:	d1f1      	bne.n	800622e <_malloc_trim_r+0x32>
 800624a:	4261      	negs	r1, r4
 800624c:	4630      	mov	r0, r6
 800624e:	f7ff ff1d 	bl	800608c <_sbrk_r>
 8006252:	3001      	adds	r0, #1
 8006254:	d110      	bne.n	8006278 <_malloc_trim_r+0x7c>
 8006256:	2100      	movs	r1, #0
 8006258:	4630      	mov	r0, r6
 800625a:	f7ff ff17 	bl	800608c <_sbrk_r>
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	1a83      	subs	r3, r0, r2
 8006262:	2b0f      	cmp	r3, #15
 8006264:	dde3      	ble.n	800622e <_malloc_trim_r+0x32>
 8006266:	490d      	ldr	r1, [pc, #52]	; (800629c <_malloc_trim_r+0xa0>)
 8006268:	6809      	ldr	r1, [r1, #0]
 800626a:	1a40      	subs	r0, r0, r1
 800626c:	490c      	ldr	r1, [pc, #48]	; (80062a0 <_malloc_trim_r+0xa4>)
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	6008      	str	r0, [r1, #0]
 8006274:	6053      	str	r3, [r2, #4]
 8006276:	e7da      	b.n	800622e <_malloc_trim_r+0x32>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <_malloc_trim_r+0xa4>)
 800627c:	1b2d      	subs	r5, r5, r4
 800627e:	f045 0501 	orr.w	r5, r5, #1
 8006282:	605d      	str	r5, [r3, #4]
 8006284:	6813      	ldr	r3, [r2, #0]
 8006286:	4630      	mov	r0, r6
 8006288:	1b1c      	subs	r4, r3, r4
 800628a:	6014      	str	r4, [r2, #0]
 800628c:	f7ff fc28 	bl	8005ae0 <__malloc_unlock>
 8006290:	2001      	movs	r0, #1
 8006292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006296:	bf00      	nop
 8006298:	200000f8 	.word	0x200000f8
 800629c:	20000500 	.word	0x20000500
 80062a0:	20000690 	.word	0x20000690
 80062a4:	00000080 	.word	0x00000080

080062a8 <_free_r>:
 80062a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ac:	4604      	mov	r4, r0
 80062ae:	4688      	mov	r8, r1
 80062b0:	2900      	cmp	r1, #0
 80062b2:	f000 80ab 	beq.w	800640c <_free_r+0x164>
 80062b6:	f7ff fc0d 	bl	8005ad4 <__malloc_lock>
 80062ba:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80062be:	4d54      	ldr	r5, [pc, #336]	; (8006410 <_free_r+0x168>)
 80062c0:	f022 0001 	bic.w	r0, r2, #1
 80062c4:	f1a8 0308 	sub.w	r3, r8, #8
 80062c8:	181f      	adds	r7, r3, r0
 80062ca:	68a9      	ldr	r1, [r5, #8]
 80062cc:	687e      	ldr	r6, [r7, #4]
 80062ce:	428f      	cmp	r7, r1
 80062d0:	f026 0603 	bic.w	r6, r6, #3
 80062d4:	f002 0201 	and.w	r2, r2, #1
 80062d8:	d11b      	bne.n	8006312 <_free_r+0x6a>
 80062da:	4430      	add	r0, r6
 80062dc:	b93a      	cbnz	r2, 80062ee <_free_r+0x46>
 80062de:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80062e2:	1a9b      	subs	r3, r3, r2
 80062e4:	4410      	add	r0, r2
 80062e6:	6899      	ldr	r1, [r3, #8]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	60ca      	str	r2, [r1, #12]
 80062ec:	6091      	str	r1, [r2, #8]
 80062ee:	f040 0201 	orr.w	r2, r0, #1
 80062f2:	605a      	str	r2, [r3, #4]
 80062f4:	60ab      	str	r3, [r5, #8]
 80062f6:	4b47      	ldr	r3, [pc, #284]	; (8006414 <_free_r+0x16c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4298      	cmp	r0, r3
 80062fc:	d304      	bcc.n	8006308 <_free_r+0x60>
 80062fe:	4b46      	ldr	r3, [pc, #280]	; (8006418 <_free_r+0x170>)
 8006300:	4620      	mov	r0, r4
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	f7ff ff7a 	bl	80061fc <_malloc_trim_r>
 8006308:	4620      	mov	r0, r4
 800630a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800630e:	f7ff bbe7 	b.w	8005ae0 <__malloc_unlock>
 8006312:	607e      	str	r6, [r7, #4]
 8006314:	2a00      	cmp	r2, #0
 8006316:	d139      	bne.n	800638c <_free_r+0xe4>
 8006318:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800631c:	1a5b      	subs	r3, r3, r1
 800631e:	4408      	add	r0, r1
 8006320:	6899      	ldr	r1, [r3, #8]
 8006322:	f105 0e08 	add.w	lr, r5, #8
 8006326:	4571      	cmp	r1, lr
 8006328:	d032      	beq.n	8006390 <_free_r+0xe8>
 800632a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800632e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8006332:	f8ce 1008 	str.w	r1, [lr, #8]
 8006336:	19b9      	adds	r1, r7, r6
 8006338:	6849      	ldr	r1, [r1, #4]
 800633a:	07c9      	lsls	r1, r1, #31
 800633c:	d40a      	bmi.n	8006354 <_free_r+0xac>
 800633e:	4430      	add	r0, r6
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	bb3a      	cbnz	r2, 8006394 <_free_r+0xec>
 8006344:	4e35      	ldr	r6, [pc, #212]	; (800641c <_free_r+0x174>)
 8006346:	42b1      	cmp	r1, r6
 8006348:	d124      	bne.n	8006394 <_free_r+0xec>
 800634a:	616b      	str	r3, [r5, #20]
 800634c:	612b      	str	r3, [r5, #16]
 800634e:	2201      	movs	r2, #1
 8006350:	60d9      	str	r1, [r3, #12]
 8006352:	6099      	str	r1, [r3, #8]
 8006354:	f040 0101 	orr.w	r1, r0, #1
 8006358:	6059      	str	r1, [r3, #4]
 800635a:	5018      	str	r0, [r3, r0]
 800635c:	2a00      	cmp	r2, #0
 800635e:	d1d3      	bne.n	8006308 <_free_r+0x60>
 8006360:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006364:	d21a      	bcs.n	800639c <_free_r+0xf4>
 8006366:	08c0      	lsrs	r0, r0, #3
 8006368:	1081      	asrs	r1, r0, #2
 800636a:	2201      	movs	r2, #1
 800636c:	408a      	lsls	r2, r1
 800636e:	6869      	ldr	r1, [r5, #4]
 8006370:	3001      	adds	r0, #1
 8006372:	430a      	orrs	r2, r1
 8006374:	606a      	str	r2, [r5, #4]
 8006376:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800637a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800637e:	6099      	str	r1, [r3, #8]
 8006380:	3a08      	subs	r2, #8
 8006382:	60da      	str	r2, [r3, #12]
 8006384:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006388:	60cb      	str	r3, [r1, #12]
 800638a:	e7bd      	b.n	8006308 <_free_r+0x60>
 800638c:	2200      	movs	r2, #0
 800638e:	e7d2      	b.n	8006336 <_free_r+0x8e>
 8006390:	2201      	movs	r2, #1
 8006392:	e7d0      	b.n	8006336 <_free_r+0x8e>
 8006394:	68fe      	ldr	r6, [r7, #12]
 8006396:	60ce      	str	r6, [r1, #12]
 8006398:	60b1      	str	r1, [r6, #8]
 800639a:	e7db      	b.n	8006354 <_free_r+0xac>
 800639c:	0a42      	lsrs	r2, r0, #9
 800639e:	2a04      	cmp	r2, #4
 80063a0:	d813      	bhi.n	80063ca <_free_r+0x122>
 80063a2:	0982      	lsrs	r2, r0, #6
 80063a4:	3238      	adds	r2, #56	; 0x38
 80063a6:	1c51      	adds	r1, r2, #1
 80063a8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80063ac:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80063b0:	428e      	cmp	r6, r1
 80063b2:	d124      	bne.n	80063fe <_free_r+0x156>
 80063b4:	2001      	movs	r0, #1
 80063b6:	1092      	asrs	r2, r2, #2
 80063b8:	fa00 f202 	lsl.w	r2, r0, r2
 80063bc:	6868      	ldr	r0, [r5, #4]
 80063be:	4302      	orrs	r2, r0
 80063c0:	606a      	str	r2, [r5, #4]
 80063c2:	60de      	str	r6, [r3, #12]
 80063c4:	6099      	str	r1, [r3, #8]
 80063c6:	60b3      	str	r3, [r6, #8]
 80063c8:	e7de      	b.n	8006388 <_free_r+0xe0>
 80063ca:	2a14      	cmp	r2, #20
 80063cc:	d801      	bhi.n	80063d2 <_free_r+0x12a>
 80063ce:	325b      	adds	r2, #91	; 0x5b
 80063d0:	e7e9      	b.n	80063a6 <_free_r+0xfe>
 80063d2:	2a54      	cmp	r2, #84	; 0x54
 80063d4:	d802      	bhi.n	80063dc <_free_r+0x134>
 80063d6:	0b02      	lsrs	r2, r0, #12
 80063d8:	326e      	adds	r2, #110	; 0x6e
 80063da:	e7e4      	b.n	80063a6 <_free_r+0xfe>
 80063dc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80063e0:	d802      	bhi.n	80063e8 <_free_r+0x140>
 80063e2:	0bc2      	lsrs	r2, r0, #15
 80063e4:	3277      	adds	r2, #119	; 0x77
 80063e6:	e7de      	b.n	80063a6 <_free_r+0xfe>
 80063e8:	f240 5154 	movw	r1, #1364	; 0x554
 80063ec:	428a      	cmp	r2, r1
 80063ee:	bf9a      	itte	ls
 80063f0:	0c82      	lsrls	r2, r0, #18
 80063f2:	327c      	addls	r2, #124	; 0x7c
 80063f4:	227e      	movhi	r2, #126	; 0x7e
 80063f6:	e7d6      	b.n	80063a6 <_free_r+0xfe>
 80063f8:	6889      	ldr	r1, [r1, #8]
 80063fa:	428e      	cmp	r6, r1
 80063fc:	d004      	beq.n	8006408 <_free_r+0x160>
 80063fe:	684a      	ldr	r2, [r1, #4]
 8006400:	f022 0203 	bic.w	r2, r2, #3
 8006404:	4290      	cmp	r0, r2
 8006406:	d3f7      	bcc.n	80063f8 <_free_r+0x150>
 8006408:	68ce      	ldr	r6, [r1, #12]
 800640a:	e7da      	b.n	80063c2 <_free_r+0x11a>
 800640c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006410:	200000f8 	.word	0x200000f8
 8006414:	20000504 	.word	0x20000504
 8006418:	200006c0 	.word	0x200006c0
 800641c:	20000100 	.word	0x20000100

08006420 <__retarget_lock_acquire_recursive>:
 8006420:	4770      	bx	lr

08006422 <__retarget_lock_release_recursive>:
 8006422:	4770      	bx	lr

08006424 <__ascii_mbtowc>:
 8006424:	b082      	sub	sp, #8
 8006426:	b901      	cbnz	r1, 800642a <__ascii_mbtowc+0x6>
 8006428:	a901      	add	r1, sp, #4
 800642a:	b142      	cbz	r2, 800643e <__ascii_mbtowc+0x1a>
 800642c:	b14b      	cbz	r3, 8006442 <__ascii_mbtowc+0x1e>
 800642e:	7813      	ldrb	r3, [r2, #0]
 8006430:	600b      	str	r3, [r1, #0]
 8006432:	7812      	ldrb	r2, [r2, #0]
 8006434:	1c10      	adds	r0, r2, #0
 8006436:	bf18      	it	ne
 8006438:	2001      	movne	r0, #1
 800643a:	b002      	add	sp, #8
 800643c:	4770      	bx	lr
 800643e:	4610      	mov	r0, r2
 8006440:	e7fb      	b.n	800643a <__ascii_mbtowc+0x16>
 8006442:	f06f 0001 	mvn.w	r0, #1
 8006446:	e7f8      	b.n	800643a <__ascii_mbtowc+0x16>

08006448 <memmove>:
 8006448:	4288      	cmp	r0, r1
 800644a:	b510      	push	{r4, lr}
 800644c:	eb01 0302 	add.w	r3, r1, r2
 8006450:	d803      	bhi.n	800645a <memmove+0x12>
 8006452:	1e42      	subs	r2, r0, #1
 8006454:	4299      	cmp	r1, r3
 8006456:	d10c      	bne.n	8006472 <memmove+0x2a>
 8006458:	bd10      	pop	{r4, pc}
 800645a:	4298      	cmp	r0, r3
 800645c:	d2f9      	bcs.n	8006452 <memmove+0xa>
 800645e:	1881      	adds	r1, r0, r2
 8006460:	1ad2      	subs	r2, r2, r3
 8006462:	42d3      	cmn	r3, r2
 8006464:	d100      	bne.n	8006468 <memmove+0x20>
 8006466:	bd10      	pop	{r4, pc}
 8006468:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800646c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006470:	e7f7      	b.n	8006462 <memmove+0x1a>
 8006472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006476:	f802 4f01 	strb.w	r4, [r2, #1]!
 800647a:	e7eb      	b.n	8006454 <memmove+0xc>

0800647c <memset>:
 800647c:	4402      	add	r2, r0
 800647e:	4603      	mov	r3, r0
 8006480:	4293      	cmp	r3, r2
 8006482:	d100      	bne.n	8006486 <memset+0xa>
 8006484:	4770      	bx	lr
 8006486:	f803 1b01 	strb.w	r1, [r3], #1
 800648a:	e7f9      	b.n	8006480 <memset+0x4>

0800648c <_realloc_r>:
 800648c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006490:	4682      	mov	sl, r0
 8006492:	460c      	mov	r4, r1
 8006494:	b929      	cbnz	r1, 80064a2 <_realloc_r+0x16>
 8006496:	4611      	mov	r1, r2
 8006498:	b003      	add	sp, #12
 800649a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649e:	f7ff b8ff 	b.w	80056a0 <_malloc_r>
 80064a2:	9201      	str	r2, [sp, #4]
 80064a4:	f7ff fb16 	bl	8005ad4 <__malloc_lock>
 80064a8:	9a01      	ldr	r2, [sp, #4]
 80064aa:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80064ae:	f102 080b 	add.w	r8, r2, #11
 80064b2:	f1b8 0f16 	cmp.w	r8, #22
 80064b6:	f1a4 0908 	sub.w	r9, r4, #8
 80064ba:	f025 0603 	bic.w	r6, r5, #3
 80064be:	d90a      	bls.n	80064d6 <_realloc_r+0x4a>
 80064c0:	f038 0807 	bics.w	r8, r8, #7
 80064c4:	d509      	bpl.n	80064da <_realloc_r+0x4e>
 80064c6:	230c      	movs	r3, #12
 80064c8:	f8ca 3000 	str.w	r3, [sl]
 80064cc:	2700      	movs	r7, #0
 80064ce:	4638      	mov	r0, r7
 80064d0:	b003      	add	sp, #12
 80064d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d6:	f04f 0810 	mov.w	r8, #16
 80064da:	4590      	cmp	r8, r2
 80064dc:	d3f3      	bcc.n	80064c6 <_realloc_r+0x3a>
 80064de:	45b0      	cmp	r8, r6
 80064e0:	f340 8145 	ble.w	800676e <_realloc_r+0x2e2>
 80064e4:	4ba8      	ldr	r3, [pc, #672]	; (8006788 <_realloc_r+0x2fc>)
 80064e6:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80064ea:	eb09 0106 	add.w	r1, r9, r6
 80064ee:	4571      	cmp	r1, lr
 80064f0:	469b      	mov	fp, r3
 80064f2:	684b      	ldr	r3, [r1, #4]
 80064f4:	d005      	beq.n	8006502 <_realloc_r+0x76>
 80064f6:	f023 0001 	bic.w	r0, r3, #1
 80064fa:	4408      	add	r0, r1
 80064fc:	6840      	ldr	r0, [r0, #4]
 80064fe:	07c7      	lsls	r7, r0, #31
 8006500:	d447      	bmi.n	8006592 <_realloc_r+0x106>
 8006502:	f023 0303 	bic.w	r3, r3, #3
 8006506:	4571      	cmp	r1, lr
 8006508:	eb06 0703 	add.w	r7, r6, r3
 800650c:	d119      	bne.n	8006542 <_realloc_r+0xb6>
 800650e:	f108 0010 	add.w	r0, r8, #16
 8006512:	4287      	cmp	r7, r0
 8006514:	db3f      	blt.n	8006596 <_realloc_r+0x10a>
 8006516:	eb09 0308 	add.w	r3, r9, r8
 800651a:	eba7 0708 	sub.w	r7, r7, r8
 800651e:	f047 0701 	orr.w	r7, r7, #1
 8006522:	f8cb 3008 	str.w	r3, [fp, #8]
 8006526:	605f      	str	r7, [r3, #4]
 8006528:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	ea43 0308 	orr.w	r3, r3, r8
 8006534:	f844 3c04 	str.w	r3, [r4, #-4]
 8006538:	4650      	mov	r0, sl
 800653a:	f7ff fad1 	bl	8005ae0 <__malloc_unlock>
 800653e:	4627      	mov	r7, r4
 8006540:	e7c5      	b.n	80064ce <_realloc_r+0x42>
 8006542:	45b8      	cmp	r8, r7
 8006544:	dc27      	bgt.n	8006596 <_realloc_r+0x10a>
 8006546:	68cb      	ldr	r3, [r1, #12]
 8006548:	688a      	ldr	r2, [r1, #8]
 800654a:	60d3      	str	r3, [r2, #12]
 800654c:	609a      	str	r2, [r3, #8]
 800654e:	eba7 0008 	sub.w	r0, r7, r8
 8006552:	280f      	cmp	r0, #15
 8006554:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006558:	eb09 0207 	add.w	r2, r9, r7
 800655c:	f240 8109 	bls.w	8006772 <_realloc_r+0x2e6>
 8006560:	eb09 0108 	add.w	r1, r9, r8
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	ea43 0308 	orr.w	r3, r3, r8
 800656c:	f040 0001 	orr.w	r0, r0, #1
 8006570:	f8c9 3004 	str.w	r3, [r9, #4]
 8006574:	6048      	str	r0, [r1, #4]
 8006576:	6853      	ldr	r3, [r2, #4]
 8006578:	f043 0301 	orr.w	r3, r3, #1
 800657c:	6053      	str	r3, [r2, #4]
 800657e:	3108      	adds	r1, #8
 8006580:	4650      	mov	r0, sl
 8006582:	f7ff fe91 	bl	80062a8 <_free_r>
 8006586:	4650      	mov	r0, sl
 8006588:	f7ff faaa 	bl	8005ae0 <__malloc_unlock>
 800658c:	f109 0708 	add.w	r7, r9, #8
 8006590:	e79d      	b.n	80064ce <_realloc_r+0x42>
 8006592:	2300      	movs	r3, #0
 8006594:	4619      	mov	r1, r3
 8006596:	07e8      	lsls	r0, r5, #31
 8006598:	f100 8084 	bmi.w	80066a4 <_realloc_r+0x218>
 800659c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80065a0:	eba9 0505 	sub.w	r5, r9, r5
 80065a4:	6868      	ldr	r0, [r5, #4]
 80065a6:	f020 0003 	bic.w	r0, r0, #3
 80065aa:	4430      	add	r0, r6
 80065ac:	2900      	cmp	r1, #0
 80065ae:	d076      	beq.n	800669e <_realloc_r+0x212>
 80065b0:	4571      	cmp	r1, lr
 80065b2:	d150      	bne.n	8006656 <_realloc_r+0x1ca>
 80065b4:	4403      	add	r3, r0
 80065b6:	f108 0110 	add.w	r1, r8, #16
 80065ba:	428b      	cmp	r3, r1
 80065bc:	db6f      	blt.n	800669e <_realloc_r+0x212>
 80065be:	462f      	mov	r7, r5
 80065c0:	68ea      	ldr	r2, [r5, #12]
 80065c2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80065c6:	60ca      	str	r2, [r1, #12]
 80065c8:	6091      	str	r1, [r2, #8]
 80065ca:	1f32      	subs	r2, r6, #4
 80065cc:	2a24      	cmp	r2, #36	; 0x24
 80065ce:	d83b      	bhi.n	8006648 <_realloc_r+0x1bc>
 80065d0:	2a13      	cmp	r2, #19
 80065d2:	d936      	bls.n	8006642 <_realloc_r+0x1b6>
 80065d4:	6821      	ldr	r1, [r4, #0]
 80065d6:	60a9      	str	r1, [r5, #8]
 80065d8:	6861      	ldr	r1, [r4, #4]
 80065da:	60e9      	str	r1, [r5, #12]
 80065dc:	2a1b      	cmp	r2, #27
 80065de:	d81c      	bhi.n	800661a <_realloc_r+0x18e>
 80065e0:	f105 0210 	add.w	r2, r5, #16
 80065e4:	f104 0108 	add.w	r1, r4, #8
 80065e8:	6808      	ldr	r0, [r1, #0]
 80065ea:	6010      	str	r0, [r2, #0]
 80065ec:	6848      	ldr	r0, [r1, #4]
 80065ee:	6050      	str	r0, [r2, #4]
 80065f0:	6889      	ldr	r1, [r1, #8]
 80065f2:	6091      	str	r1, [r2, #8]
 80065f4:	eb05 0208 	add.w	r2, r5, r8
 80065f8:	eba3 0308 	sub.w	r3, r3, r8
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	f8cb 2008 	str.w	r2, [fp, #8]
 8006604:	6053      	str	r3, [r2, #4]
 8006606:	686b      	ldr	r3, [r5, #4]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	ea43 0308 	orr.w	r3, r3, r8
 8006610:	606b      	str	r3, [r5, #4]
 8006612:	4650      	mov	r0, sl
 8006614:	f7ff fa64 	bl	8005ae0 <__malloc_unlock>
 8006618:	e759      	b.n	80064ce <_realloc_r+0x42>
 800661a:	68a1      	ldr	r1, [r4, #8]
 800661c:	6129      	str	r1, [r5, #16]
 800661e:	68e1      	ldr	r1, [r4, #12]
 8006620:	6169      	str	r1, [r5, #20]
 8006622:	2a24      	cmp	r2, #36	; 0x24
 8006624:	bf01      	itttt	eq
 8006626:	6922      	ldreq	r2, [r4, #16]
 8006628:	61aa      	streq	r2, [r5, #24]
 800662a:	6960      	ldreq	r0, [r4, #20]
 800662c:	61e8      	streq	r0, [r5, #28]
 800662e:	bf19      	ittee	ne
 8006630:	f105 0218 	addne.w	r2, r5, #24
 8006634:	f104 0110 	addne.w	r1, r4, #16
 8006638:	f105 0220 	addeq.w	r2, r5, #32
 800663c:	f104 0118 	addeq.w	r1, r4, #24
 8006640:	e7d2      	b.n	80065e8 <_realloc_r+0x15c>
 8006642:	463a      	mov	r2, r7
 8006644:	4621      	mov	r1, r4
 8006646:	e7cf      	b.n	80065e8 <_realloc_r+0x15c>
 8006648:	4621      	mov	r1, r4
 800664a:	4638      	mov	r0, r7
 800664c:	9301      	str	r3, [sp, #4]
 800664e:	f7ff fefb 	bl	8006448 <memmove>
 8006652:	9b01      	ldr	r3, [sp, #4]
 8006654:	e7ce      	b.n	80065f4 <_realloc_r+0x168>
 8006656:	18c7      	adds	r7, r0, r3
 8006658:	45b8      	cmp	r8, r7
 800665a:	dc20      	bgt.n	800669e <_realloc_r+0x212>
 800665c:	68cb      	ldr	r3, [r1, #12]
 800665e:	688a      	ldr	r2, [r1, #8]
 8006660:	60d3      	str	r3, [r2, #12]
 8006662:	609a      	str	r2, [r3, #8]
 8006664:	4628      	mov	r0, r5
 8006666:	68eb      	ldr	r3, [r5, #12]
 8006668:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800666c:	60d3      	str	r3, [r2, #12]
 800666e:	609a      	str	r2, [r3, #8]
 8006670:	1f32      	subs	r2, r6, #4
 8006672:	2a24      	cmp	r2, #36	; 0x24
 8006674:	d842      	bhi.n	80066fc <_realloc_r+0x270>
 8006676:	2a13      	cmp	r2, #19
 8006678:	d93e      	bls.n	80066f8 <_realloc_r+0x26c>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	60ab      	str	r3, [r5, #8]
 800667e:	6863      	ldr	r3, [r4, #4]
 8006680:	60eb      	str	r3, [r5, #12]
 8006682:	2a1b      	cmp	r2, #27
 8006684:	d824      	bhi.n	80066d0 <_realloc_r+0x244>
 8006686:	f105 0010 	add.w	r0, r5, #16
 800668a:	f104 0308 	add.w	r3, r4, #8
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	6002      	str	r2, [r0, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	6042      	str	r2, [r0, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	6083      	str	r3, [r0, #8]
 800669a:	46a9      	mov	r9, r5
 800669c:	e757      	b.n	800654e <_realloc_r+0xc2>
 800669e:	4580      	cmp	r8, r0
 80066a0:	4607      	mov	r7, r0
 80066a2:	dddf      	ble.n	8006664 <_realloc_r+0x1d8>
 80066a4:	4611      	mov	r1, r2
 80066a6:	4650      	mov	r0, sl
 80066a8:	f7fe fffa 	bl	80056a0 <_malloc_r>
 80066ac:	4607      	mov	r7, r0
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d0af      	beq.n	8006612 <_realloc_r+0x186>
 80066b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80066b6:	f023 0301 	bic.w	r3, r3, #1
 80066ba:	f1a0 0208 	sub.w	r2, r0, #8
 80066be:	444b      	add	r3, r9
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d11f      	bne.n	8006704 <_realloc_r+0x278>
 80066c4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80066c8:	f027 0703 	bic.w	r7, r7, #3
 80066cc:	4437      	add	r7, r6
 80066ce:	e73e      	b.n	800654e <_realloc_r+0xc2>
 80066d0:	68a3      	ldr	r3, [r4, #8]
 80066d2:	612b      	str	r3, [r5, #16]
 80066d4:	68e3      	ldr	r3, [r4, #12]
 80066d6:	616b      	str	r3, [r5, #20]
 80066d8:	2a24      	cmp	r2, #36	; 0x24
 80066da:	bf01      	itttt	eq
 80066dc:	6923      	ldreq	r3, [r4, #16]
 80066de:	61ab      	streq	r3, [r5, #24]
 80066e0:	6962      	ldreq	r2, [r4, #20]
 80066e2:	61ea      	streq	r2, [r5, #28]
 80066e4:	bf19      	ittee	ne
 80066e6:	f105 0018 	addne.w	r0, r5, #24
 80066ea:	f104 0310 	addne.w	r3, r4, #16
 80066ee:	f105 0020 	addeq.w	r0, r5, #32
 80066f2:	f104 0318 	addeq.w	r3, r4, #24
 80066f6:	e7ca      	b.n	800668e <_realloc_r+0x202>
 80066f8:	4623      	mov	r3, r4
 80066fa:	e7c8      	b.n	800668e <_realloc_r+0x202>
 80066fc:	4621      	mov	r1, r4
 80066fe:	f7ff fea3 	bl	8006448 <memmove>
 8006702:	e7ca      	b.n	800669a <_realloc_r+0x20e>
 8006704:	1f32      	subs	r2, r6, #4
 8006706:	2a24      	cmp	r2, #36	; 0x24
 8006708:	d82d      	bhi.n	8006766 <_realloc_r+0x2da>
 800670a:	2a13      	cmp	r2, #19
 800670c:	d928      	bls.n	8006760 <_realloc_r+0x2d4>
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	6003      	str	r3, [r0, #0]
 8006712:	6863      	ldr	r3, [r4, #4]
 8006714:	6043      	str	r3, [r0, #4]
 8006716:	2a1b      	cmp	r2, #27
 8006718:	d80e      	bhi.n	8006738 <_realloc_r+0x2ac>
 800671a:	f100 0308 	add.w	r3, r0, #8
 800671e:	f104 0208 	add.w	r2, r4, #8
 8006722:	6811      	ldr	r1, [r2, #0]
 8006724:	6019      	str	r1, [r3, #0]
 8006726:	6851      	ldr	r1, [r2, #4]
 8006728:	6059      	str	r1, [r3, #4]
 800672a:	6892      	ldr	r2, [r2, #8]
 800672c:	609a      	str	r2, [r3, #8]
 800672e:	4621      	mov	r1, r4
 8006730:	4650      	mov	r0, sl
 8006732:	f7ff fdb9 	bl	80062a8 <_free_r>
 8006736:	e76c      	b.n	8006612 <_realloc_r+0x186>
 8006738:	68a3      	ldr	r3, [r4, #8]
 800673a:	6083      	str	r3, [r0, #8]
 800673c:	68e3      	ldr	r3, [r4, #12]
 800673e:	60c3      	str	r3, [r0, #12]
 8006740:	2a24      	cmp	r2, #36	; 0x24
 8006742:	bf01      	itttt	eq
 8006744:	6923      	ldreq	r3, [r4, #16]
 8006746:	6103      	streq	r3, [r0, #16]
 8006748:	6961      	ldreq	r1, [r4, #20]
 800674a:	6141      	streq	r1, [r0, #20]
 800674c:	bf19      	ittee	ne
 800674e:	f100 0310 	addne.w	r3, r0, #16
 8006752:	f104 0210 	addne.w	r2, r4, #16
 8006756:	f100 0318 	addeq.w	r3, r0, #24
 800675a:	f104 0218 	addeq.w	r2, r4, #24
 800675e:	e7e0      	b.n	8006722 <_realloc_r+0x296>
 8006760:	4603      	mov	r3, r0
 8006762:	4622      	mov	r2, r4
 8006764:	e7dd      	b.n	8006722 <_realloc_r+0x296>
 8006766:	4621      	mov	r1, r4
 8006768:	f7ff fe6e 	bl	8006448 <memmove>
 800676c:	e7df      	b.n	800672e <_realloc_r+0x2a2>
 800676e:	4637      	mov	r7, r6
 8006770:	e6ed      	b.n	800654e <_realloc_r+0xc2>
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	431f      	orrs	r7, r3
 8006778:	f8c9 7004 	str.w	r7, [r9, #4]
 800677c:	6853      	ldr	r3, [r2, #4]
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	6053      	str	r3, [r2, #4]
 8006784:	e6ff      	b.n	8006586 <_realloc_r+0xfa>
 8006786:	bf00      	nop
 8006788:	200000f8 	.word	0x200000f8

0800678c <__ascii_wctomb>:
 800678c:	b149      	cbz	r1, 80067a2 <__ascii_wctomb+0x16>
 800678e:	2aff      	cmp	r2, #255	; 0xff
 8006790:	bf85      	ittet	hi
 8006792:	238a      	movhi	r3, #138	; 0x8a
 8006794:	6003      	strhi	r3, [r0, #0]
 8006796:	700a      	strbls	r2, [r1, #0]
 8006798:	f04f 30ff 	movhi.w	r0, #4294967295
 800679c:	bf98      	it	ls
 800679e:	2001      	movls	r0, #1
 80067a0:	4770      	bx	lr
 80067a2:	4608      	mov	r0, r1
 80067a4:	4770      	bx	lr
	...

080067a8 <_sbrk>:
 80067a8:	4b04      	ldr	r3, [pc, #16]	; (80067bc <_sbrk+0x14>)
 80067aa:	6819      	ldr	r1, [r3, #0]
 80067ac:	4602      	mov	r2, r0
 80067ae:	b909      	cbnz	r1, 80067b4 <_sbrk+0xc>
 80067b0:	4903      	ldr	r1, [pc, #12]	; (80067c0 <_sbrk+0x18>)
 80067b2:	6019      	str	r1, [r3, #0]
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	4402      	add	r2, r0
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	4770      	bx	lr
 80067bc:	200006c4 	.word	0x200006c4
 80067c0:	200007e0 	.word	0x200007e0

080067c4 <_init>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	bf00      	nop
 80067c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ca:	bc08      	pop	{r3}
 80067cc:	469e      	mov	lr, r3
 80067ce:	4770      	bx	lr

080067d0 <_fini>:
 80067d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d2:	bf00      	nop
 80067d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d6:	bc08      	pop	{r3}
 80067d8:	469e      	mov	lr, r3
 80067da:	4770      	bx	lr
